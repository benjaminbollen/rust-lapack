use num::complex::{Complex32, Complex64};

/* automatically generated by rust-bindgen */

pub type __CLPK_integer = ::libc::c_int;
pub type __CLPK_logical = ::libc::c_int;
pub type __CLPK_real = ::libc::c_float;
pub type __CLPK_doublereal = ::libc::c_double;
pub type __CLPK_L_fp =
    ::std::option::Option<extern "C" fn() -> __CLPK_logical>;
pub type __CLPK_ftnlen = ::libc::c_int;
pub type __CLPK_complex = Complex32;
pub type __CLPK_doublecomplex = Complex64;

extern "C" {
    pub fn cbdsqr_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ncvt: *mut __CLPK_integer, __nru: *mut __CLPK_integer,
                   __ncc: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __vt: *mut __CLPK_complex,
                   __ldvt: *mut __CLPK_integer, __u: *mut __CLPK_complex,
                   __ldu: *mut __CLPK_integer, __c__: *mut __CLPK_complex,
                   __ldc: *mut __CLPK_integer, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgbbrd_(__vect: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __ncc: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_complex, __ldab: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __q: *mut __CLPK_complex, __ldq: *mut __CLPK_integer,
                   __pt: *mut __CLPK_complex, __ldpt: *mut __CLPK_integer,
                   __c__: *mut __CLPK_complex, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgbcon_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_complex, __ldab: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __anorm: *mut __CLPK_real,
                   __rcond: *mut __CLPK_real, __work: *mut __CLPK_complex,
                   __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgbequ_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_complex, __ldab: *mut __CLPK_integer,
                   __r__: *mut __CLPK_real, __c__: *mut __CLPK_real,
                   __rowcnd: *mut __CLPK_real, __colcnd: *mut __CLPK_real,
                   __amax: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgbequb_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                    __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                    __ab: *mut __CLPK_complex, __ldab: *mut __CLPK_integer,
                    __r__: *mut __CLPK_real, __c__: *mut __CLPK_real,
                    __rowcnd: *mut __CLPK_real, __colcnd: *mut __CLPK_real,
                    __amax: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgbrfs_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ab: *mut __CLPK_complex,
                   __ldab: *mut __CLPK_integer, __afb: *mut __CLPK_complex,
                   __ldafb: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_complex, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgbsv_(__n: *mut __CLPK_integer, __kl: *mut __CLPK_integer,
                  __ku: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                  __ab: *mut __CLPK_complex, __ldab: *mut __CLPK_integer,
                  __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                  __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgbsvx_(__fact: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __kl: *mut __CLPK_integer,
                   __ku: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ab: *mut __CLPK_complex, __ldab: *mut __CLPK_integer,
                   __afb: *mut __CLPK_complex, __ldafb: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __equed: *mut ::libc::c_char,
                   __r__: *mut __CLPK_real, __c__: *mut __CLPK_real,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_complex, __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_real, __ferr: *mut __CLPK_real,
                   __berr: *mut __CLPK_real, __work: *mut __CLPK_complex,
                   __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgbtf2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_complex, __ldab: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgbtrf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_complex, __ldab: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgbtrs_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ab: *mut __CLPK_complex,
                   __ldab: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgebak_(__job: *mut ::libc::c_char, __side: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __scale: *mut __CLPK_real,
                   __m: *mut __CLPK_integer, __v: *mut __CLPK_complex,
                   __ldv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgebal_(__job: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __ilo: *mut __CLPK_integer, __ihi: *mut __CLPK_integer,
                   __scale: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgebd2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __tauq: *mut __CLPK_complex, __taup: *mut __CLPK_complex,
                   __work: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgebrd_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __tauq: *mut __CLPK_complex, __taup: *mut __CLPK_complex,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgecon_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __anorm: *mut __CLPK_real, __rcond: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgeequ_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __r__: *mut __CLPK_real, __c__: *mut __CLPK_real,
                   __rowcnd: *mut __CLPK_real, __colcnd: *mut __CLPK_real,
                   __amax: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgeequb_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                    __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                    __r__: *mut __CLPK_real, __c__: *mut __CLPK_real,
                    __rowcnd: *mut __CLPK_real, __colcnd: *mut __CLPK_real,
                    __amax: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgees_(__jobvs: *mut ::libc::c_char, __sort: *mut ::libc::c_char,
                  __select: __CLPK_L_fp, __n: *mut __CLPK_integer,
                  __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                  __sdim: *mut __CLPK_integer, __w: *mut __CLPK_complex,
                  __vs: *mut __CLPK_complex, __ldvs: *mut __CLPK_integer,
                  __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                  __rwork: *mut __CLPK_real, __bwork: *mut __CLPK_logical,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgeesx_(__jobvs: *mut ::libc::c_char, __sort: *mut ::libc::c_char,
                   __select: __CLPK_L_fp, __sense: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __sdim: *mut __CLPK_integer,
                   __w: *mut __CLPK_complex, __vs: *mut __CLPK_complex,
                   __ldvs: *mut __CLPK_integer, __rconde: *mut __CLPK_real,
                   __rcondv: *mut __CLPK_real, __work: *mut __CLPK_complex,
                   __lwork: *mut __CLPK_integer, __rwork: *mut __CLPK_real,
                   __bwork: *mut __CLPK_logical, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgeev_(__jobvl: *mut ::libc::c_char, __jobvr: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                  __lda: *mut __CLPK_integer, __w: *mut __CLPK_complex,
                  __vl: *mut __CLPK_complex, __ldvl: *mut __CLPK_integer,
                  __vr: *mut __CLPK_complex, __ldvr: *mut __CLPK_integer,
                  __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                  __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgeevx_(__balanc: *mut ::libc::c_char,
                   __jobvl: *mut ::libc::c_char, __jobvr: *mut ::libc::c_char,
                   __sense: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __w: *mut __CLPK_complex, __vl: *mut __CLPK_complex,
                   __ldvl: *mut __CLPK_integer, __vr: *mut __CLPK_complex,
                   __ldvr: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __scale: *mut __CLPK_real,
                   __abnrm: *mut __CLPK_real, __rconde: *mut __CLPK_real,
                   __rcondv: *mut __CLPK_real, __work: *mut __CLPK_complex,
                   __lwork: *mut __CLPK_integer, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgegs_(__jobvsl: *mut ::libc::c_char,
                  __jobvsr: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                  __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                  __alpha: *mut __CLPK_complex, __beta: *mut __CLPK_complex,
                  __vsl: *mut __CLPK_complex, __ldvsl: *mut __CLPK_integer,
                  __vsr: *mut __CLPK_complex, __ldvsr: *mut __CLPK_integer,
                  __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                  __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgegv_(__jobvl: *mut ::libc::c_char, __jobvr: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                  __lda: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                  __ldb: *mut __CLPK_integer, __alpha: *mut __CLPK_complex,
                  __beta: *mut __CLPK_complex, __vl: *mut __CLPK_complex,
                  __ldvl: *mut __CLPK_integer, __vr: *mut __CLPK_complex,
                  __ldvr: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                  __lwork: *mut __CLPK_integer, __rwork: *mut __CLPK_real,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgehd2_(__n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __work: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgehrd_(__n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgelq2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_complex, __work: *mut __CLPK_complex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgelqf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_complex, __work: *mut __CLPK_complex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgels_(__trans: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                  __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                  __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                  __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                  __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgelsd_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __s: *mut __CLPK_real,
                   __rcond: *mut __CLPK_real, __rank: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgelss_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __s: *mut __CLPK_real,
                   __rcond: *mut __CLPK_real, __rank: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgelsx_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __jpvt: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_real, __rank: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgelsy_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __jpvt: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_real, __rank: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgeql2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_complex, __work: *mut __CLPK_complex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgeqlf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_complex, __work: *mut __CLPK_complex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgeqp3_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __jpvt: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgeqpf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __jpvt: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgeqr2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_complex, __work: *mut __CLPK_complex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgeqrf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_complex, __work: *mut __CLPK_complex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgerfs_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __af: *mut __CLPK_complex,
                   __ldaf: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_complex, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgerq2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_complex, __work: *mut __CLPK_complex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgerqf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_complex, __work: *mut __CLPK_complex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgesc2_(__n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __rhs: *mut __CLPK_complex,
                   __ipiv: *mut __CLPK_integer, __jpiv: *mut __CLPK_integer,
                   __scale: *mut __CLPK_real) -> ::libc::c_int;
    pub fn cgesdd_(__jobz: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __s: *mut __CLPK_real,
                   __u: *mut __CLPK_complex, __ldu: *mut __CLPK_integer,
                   __vt: *mut __CLPK_complex, __ldvt: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgesv_(__n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                  __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                  __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                  __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgesvd_(__jobu: *mut ::libc::c_char, __jobvt: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __s: *mut __CLPK_real, __u: *mut __CLPK_complex,
                   __ldu: *mut __CLPK_integer, __vt: *mut __CLPK_complex,
                   __ldvt: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                   __lwork: *mut __CLPK_integer, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgesvx_(__fact: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __af: *mut __CLPK_complex, __ldaf: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __equed: *mut ::libc::c_char,
                   __r__: *mut __CLPK_real, __c__: *mut __CLPK_real,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_complex, __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_real, __ferr: *mut __CLPK_real,
                   __berr: *mut __CLPK_real, __work: *mut __CLPK_complex,
                   __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgetc2_(__n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __jpiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgetf2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgetrf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgetri_(__n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgetrs_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cggbak_(__job: *mut ::libc::c_char, __side: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __lscale: *mut __CLPK_real,
                   __rscale: *mut __CLPK_real, __m: *mut __CLPK_integer,
                   __v: *mut __CLPK_complex, __ldv: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cggbal_(__job: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __ilo: *mut __CLPK_integer, __ihi: *mut __CLPK_integer,
                   __lscale: *mut __CLPK_real, __rscale: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgges_(__jobvsl: *mut ::libc::c_char,
                  __jobvsr: *mut ::libc::c_char, __sort: *mut ::libc::c_char,
                  __selctg: __CLPK_L_fp, __n: *mut __CLPK_integer,
                  __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                  __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                  __sdim: *mut __CLPK_integer, __alpha: *mut __CLPK_complex,
                  __beta: *mut __CLPK_complex, __vsl: *mut __CLPK_complex,
                  __ldvsl: *mut __CLPK_integer, __vsr: *mut __CLPK_complex,
                  __ldvsr: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                  __lwork: *mut __CLPK_integer, __rwork: *mut __CLPK_real,
                  __bwork: *mut __CLPK_logical, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cggesx_(__jobvsl: *mut ::libc::c_char,
                   __jobvsr: *mut ::libc::c_char, __sort: *mut ::libc::c_char,
                   __selctg: __CLPK_L_fp, __sense: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __sdim: *mut __CLPK_integer,
                   __alpha: *mut __CLPK_complex, __beta: *mut __CLPK_complex,
                   __vsl: *mut __CLPK_complex, __ldvsl: *mut __CLPK_integer,
                   __vsr: *mut __CLPK_complex, __ldvsr: *mut __CLPK_integer,
                   __rconde: *mut __CLPK_real, __rcondv: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer,
                   __bwork: *mut __CLPK_logical, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cggev_(__jobvl: *mut ::libc::c_char, __jobvr: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                  __lda: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                  __ldb: *mut __CLPK_integer, __alpha: *mut __CLPK_complex,
                  __beta: *mut __CLPK_complex, __vl: *mut __CLPK_complex,
                  __ldvl: *mut __CLPK_integer, __vr: *mut __CLPK_complex,
                  __ldvr: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                  __lwork: *mut __CLPK_integer, __rwork: *mut __CLPK_real,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cggevx_(__balanc: *mut ::libc::c_char,
                   __jobvl: *mut ::libc::c_char, __jobvr: *mut ::libc::c_char,
                   __sense: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __alpha: *mut __CLPK_complex, __beta: *mut __CLPK_complex,
                   __vl: *mut __CLPK_complex, __ldvl: *mut __CLPK_integer,
                   __vr: *mut __CLPK_complex, __ldvr: *mut __CLPK_integer,
                   __ilo: *mut __CLPK_integer, __ihi: *mut __CLPK_integer,
                   __lscale: *mut __CLPK_real, __rscale: *mut __CLPK_real,
                   __abnrm: *mut __CLPK_real, __bbnrm: *mut __CLPK_real,
                   __rconde: *mut __CLPK_real, __rcondv: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __bwork: *mut __CLPK_logical, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cggglm_(__n: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __p: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __d__: *mut __CLPK_complex,
                   __x: *mut __CLPK_complex, __y: *mut __CLPK_complex,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgghrd_(__compq: *mut ::libc::c_char, __compz: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __q: *mut __CLPK_complex,
                   __ldq: *mut __CLPK_integer, __z__: *mut __CLPK_complex,
                   __ldz: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgglse_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __p: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __c__: *mut __CLPK_complex,
                   __d__: *mut __CLPK_complex, __x: *mut __CLPK_complex,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cggqrf_(__n: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __p: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __taua: *mut __CLPK_complex,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __taub: *mut __CLPK_complex, __work: *mut __CLPK_complex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cggrqf_(__m: *mut __CLPK_integer, __p: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __taua: *mut __CLPK_complex,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __taub: *mut __CLPK_complex, __work: *mut __CLPK_complex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cggsvd_(__jobu: *mut ::libc::c_char, __jobv: *mut ::libc::c_char,
                   __jobq: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __p: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __l: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __alpha: *mut __CLPK_real, __beta: *mut __CLPK_real,
                   __u: *mut __CLPK_complex, __ldu: *mut __CLPK_integer,
                   __v: *mut __CLPK_complex, __ldv: *mut __CLPK_integer,
                   __q: *mut __CLPK_complex, __ldq: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cggsvp_(__jobu: *mut ::libc::c_char, __jobv: *mut ::libc::c_char,
                   __jobq: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __p: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __tola: *mut __CLPK_real, __tolb: *mut __CLPK_real,
                   __k: *mut __CLPK_integer, __l: *mut __CLPK_integer,
                   __u: *mut __CLPK_complex, __ldu: *mut __CLPK_integer,
                   __v: *mut __CLPK_complex, __ldv: *mut __CLPK_integer,
                   __q: *mut __CLPK_complex, __ldq: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer, __rwork: *mut __CLPK_real,
                   __tau: *mut __CLPK_complex, __work: *mut __CLPK_complex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgtcon_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __dl: *mut __CLPK_complex, __d__: *mut __CLPK_complex,
                   __du: *mut __CLPK_complex, __du2: *mut __CLPK_complex,
                   __ipiv: *mut __CLPK_integer, __anorm: *mut __CLPK_real,
                   __rcond: *mut __CLPK_real, __work: *mut __CLPK_complex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgtrfs_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __dl: *mut __CLPK_complex,
                   __d__: *mut __CLPK_complex, __du: *mut __CLPK_complex,
                   __dlf: *mut __CLPK_complex, __df: *mut __CLPK_complex,
                   __duf: *mut __CLPK_complex, __du2: *mut __CLPK_complex,
                   __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_complex,
                   __ldx: *mut __CLPK_integer, __ferr: *mut __CLPK_real,
                   __berr: *mut __CLPK_real, __work: *mut __CLPK_complex,
                   __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgtsv_(__n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                  __dl: *mut __CLPK_complex, __d__: *mut __CLPK_complex,
                  __du: *mut __CLPK_complex, __b: *mut __CLPK_complex,
                  __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgtsvx_(__fact: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __dl: *mut __CLPK_complex, __d__: *mut __CLPK_complex,
                   __du: *mut __CLPK_complex, __dlf: *mut __CLPK_complex,
                   __df: *mut __CLPK_complex, __duf: *mut __CLPK_complex,
                   __du2: *mut __CLPK_complex, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_complex, __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_real, __ferr: *mut __CLPK_real,
                   __berr: *mut __CLPK_real, __work: *mut __CLPK_complex,
                   __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cgttrf_(__n: *mut __CLPK_integer, __dl: *mut __CLPK_complex,
                   __d__: *mut __CLPK_complex, __du: *mut __CLPK_complex,
                   __du2: *mut __CLPK_complex, __ipiv: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgttrs_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __dl: *mut __CLPK_complex,
                   __d__: *mut __CLPK_complex, __du: *mut __CLPK_complex,
                   __du2: *mut __CLPK_complex, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cgtts2_(__itrans: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __dl: *mut __CLPK_complex,
                   __d__: *mut __CLPK_complex, __du: *mut __CLPK_complex,
                   __du2: *mut __CLPK_complex, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn chbev_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __kd: *mut __CLPK_integer,
                  __ab: *mut __CLPK_complex, __ldab: *mut __CLPK_integer,
                  __w: *mut __CLPK_real, __z__: *mut __CLPK_complex,
                  __ldz: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                  __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn chbevd_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __kd: *mut __CLPK_integer,
                   __ab: *mut __CLPK_complex, __ldab: *mut __CLPK_integer,
                   __w: *mut __CLPK_real, __z__: *mut __CLPK_complex,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                   __lwork: *mut __CLPK_integer, __rwork: *mut __CLPK_real,
                   __lrwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn chbevx_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_complex,
                   __ldab: *mut __CLPK_integer, __q: *mut __CLPK_complex,
                   __ldq: *mut __CLPK_integer, __vl: *mut __CLPK_real,
                   __vu: *mut __CLPK_real, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer, __abstol: *mut __CLPK_real,
                   __m: *mut __CLPK_integer, __w: *mut __CLPK_real,
                   __z__: *mut __CLPK_complex, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __ifail: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn chbgst_(__vect: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ka: *mut __CLPK_integer,
                   __kb: *mut __CLPK_integer, __ab: *mut __CLPK_complex,
                   __ldab: *mut __CLPK_integer, __bb: *mut __CLPK_complex,
                   __ldbb: *mut __CLPK_integer, __x: *mut __CLPK_complex,
                   __ldx: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                   __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn chbgv_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __ka: *mut __CLPK_integer,
                  __kb: *mut __CLPK_integer, __ab: *mut __CLPK_complex,
                  __ldab: *mut __CLPK_integer, __bb: *mut __CLPK_complex,
                  __ldbb: *mut __CLPK_integer, __w: *mut __CLPK_real,
                  __z__: *mut __CLPK_complex, __ldz: *mut __CLPK_integer,
                  __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn chbgvd_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ka: *mut __CLPK_integer,
                   __kb: *mut __CLPK_integer, __ab: *mut __CLPK_complex,
                   __ldab: *mut __CLPK_integer, __bb: *mut __CLPK_complex,
                   __ldbb: *mut __CLPK_integer, __w: *mut __CLPK_real,
                   __z__: *mut __CLPK_complex, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_real, __lrwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn chbgvx_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ka: *mut __CLPK_integer, __kb: *mut __CLPK_integer,
                   __ab: *mut __CLPK_complex, __ldab: *mut __CLPK_integer,
                   __bb: *mut __CLPK_complex, __ldbb: *mut __CLPK_integer,
                   __q: *mut __CLPK_complex, __ldq: *mut __CLPK_integer,
                   __vl: *mut __CLPK_real, __vu: *mut __CLPK_real,
                   __il: *mut __CLPK_integer, __iu: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_real, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_real, __z__: *mut __CLPK_complex,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                   __rwork: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __ifail: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn chbtrd_(__vect: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __kd: *mut __CLPK_integer,
                   __ab: *mut __CLPK_complex, __ldab: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __q: *mut __CLPK_complex, __ldq: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn checon_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __anorm: *mut __CLPK_real,
                   __rcond: *mut __CLPK_real, __work: *mut __CLPK_complex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cheequb_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                    __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                    __s: *mut __CLPK_real, __scond: *mut __CLPK_real,
                    __amax: *mut __CLPK_real, __work: *mut __CLPK_complex,
                    __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cheev_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                  __lda: *mut __CLPK_integer, __w: *mut __CLPK_real,
                  __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                  __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cheevd_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __w: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_real, __lrwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cheevr_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __vl: *mut __CLPK_real, __vu: *mut __CLPK_real,
                   __il: *mut __CLPK_integer, __iu: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_real, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_real, __z__: *mut __CLPK_complex,
                   __ldz: *mut __CLPK_integer, __isuppz: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_real, __lrwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cheevx_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __vl: *mut __CLPK_real, __vu: *mut __CLPK_real,
                   __il: *mut __CLPK_integer, __iu: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_real, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_real, __z__: *mut __CLPK_complex,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                   __lwork: *mut __CLPK_integer, __rwork: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __ifail: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn chegs2_(__itype: *mut __CLPK_integer, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn chegst_(__itype: *mut __CLPK_integer, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn chegv_(__itype: *mut __CLPK_integer, __jobz: *mut ::libc::c_char,
                  __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                  __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                  __w: *mut __CLPK_real, __work: *mut __CLPK_complex,
                  __lwork: *mut __CLPK_integer, __rwork: *mut __CLPK_real,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn chegvd_(__itype: *mut __CLPK_integer, __jobz: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __w: *mut __CLPK_real, __work: *mut __CLPK_complex,
                   __lwork: *mut __CLPK_integer, __rwork: *mut __CLPK_real,
                   __lrwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn chegvx_(__itype: *mut __CLPK_integer, __jobz: *mut ::libc::c_char,
                   __range: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __vl: *mut __CLPK_real,
                   __vu: *mut __CLPK_real, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer, __abstol: *mut __CLPK_real,
                   __m: *mut __CLPK_integer, __w: *mut __CLPK_real,
                   __z__: *mut __CLPK_complex, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __ifail: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cherfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __af: *mut __CLPK_complex,
                   __ldaf: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_complex, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn chesv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                  __lda: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                  __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                  __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn chesvx_(__fact: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __af: *mut __CLPK_complex, __ldaf: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_complex,
                   __ldx: *mut __CLPK_integer, __rcond: *mut __CLPK_real,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn chetd2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __tau: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn chetf2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn chetrd_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __tau: *mut __CLPK_complex, __work: *mut __CLPK_complex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn chetrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn chetri_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn chetrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn chfrk_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                  __trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __k: *mut __CLPK_integer, __alpha: *mut __CLPK_real,
                  __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                  __beta: *mut __CLPK_real, __c__: *mut __CLPK_complex)
     -> ::libc::c_int;
    pub fn chgeqz_(__job: *mut ::libc::c_char, __compq: *mut ::libc::c_char,
                   __compz: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ilo: *mut __CLPK_integer, __ihi: *mut __CLPK_integer,
                   __h__: *mut __CLPK_complex, __ldh: *mut __CLPK_integer,
                   __t: *mut __CLPK_complex, __ldt: *mut __CLPK_integer,
                   __alpha: *mut __CLPK_complex, __beta: *mut __CLPK_complex,
                   __q: *mut __CLPK_complex, __ldq: *mut __CLPK_integer,
                   __z__: *mut __CLPK_complex, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn chla_transtype__(__ret_val: *mut ::libc::c_char,
                            __ret_val_len: __CLPK_ftnlen,
                            __trans: *mut __CLPK_integer) -> ();
    pub fn chpcon_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_complex, __ipiv: *mut __CLPK_integer,
                   __anorm: *mut __CLPK_real, __rcond: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn chpev_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __ap: *mut __CLPK_complex,
                  __w: *mut __CLPK_real, __z__: *mut __CLPK_complex,
                  __ldz: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                  __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn chpevd_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_complex,
                   __w: *mut __CLPK_real, __z__: *mut __CLPK_complex,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                   __lwork: *mut __CLPK_integer, __rwork: *mut __CLPK_real,
                   __lrwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn chpevx_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_complex, __vl: *mut __CLPK_real,
                   __vu: *mut __CLPK_real, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer, __abstol: *mut __CLPK_real,
                   __m: *mut __CLPK_integer, __w: *mut __CLPK_real,
                   __z__: *mut __CLPK_complex, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __ifail: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn chpgst_(__itype: *mut __CLPK_integer, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_complex,
                   __bp: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn chpgv_(__itype: *mut __CLPK_integer, __jobz: *mut ::libc::c_char,
                  __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __ap: *mut __CLPK_complex, __bp: *mut __CLPK_complex,
                  __w: *mut __CLPK_real, __z__: *mut __CLPK_complex,
                  __ldz: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                  __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn chpgvd_(__itype: *mut __CLPK_integer, __jobz: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_complex, __bp: *mut __CLPK_complex,
                   __w: *mut __CLPK_real, __z__: *mut __CLPK_complex,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                   __lwork: *mut __CLPK_integer, __rwork: *mut __CLPK_real,
                   __lrwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn chpgvx_(__itype: *mut __CLPK_integer, __jobz: *mut ::libc::c_char,
                   __range: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_complex,
                   __bp: *mut __CLPK_complex, __vl: *mut __CLPK_real,
                   __vu: *mut __CLPK_real, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer, __abstol: *mut __CLPK_real,
                   __m: *mut __CLPK_integer, __w: *mut __CLPK_real,
                   __z__: *mut __CLPK_complex, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __ifail: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn chprfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_complex,
                   __afp: *mut __CLPK_complex, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_complex, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn chpsv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_complex,
                  __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                  __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn chpsvx_(__fact: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ap: *mut __CLPK_complex, __afp: *mut __CLPK_complex,
                   __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_complex,
                   __ldx: *mut __CLPK_integer, __rcond: *mut __CLPK_real,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn chptrd_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_complex, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __tau: *mut __CLPK_complex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn chptrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_complex, __ipiv: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn chptri_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_complex, __ipiv: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn chptrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_complex,
                   __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn chsein_(__side: *mut ::libc::c_char, __eigsrc: *mut ::libc::c_char,
                   __initv: *mut ::libc::c_char,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __h__: *mut __CLPK_complex, __ldh: *mut __CLPK_integer,
                   __w: *mut __CLPK_complex, __vl: *mut __CLPK_complex,
                   __ldvl: *mut __CLPK_integer, __vr: *mut __CLPK_complex,
                   __ldvr: *mut __CLPK_integer, __mm: *mut __CLPK_integer,
                   __m: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                   __rwork: *mut __CLPK_real, __ifaill: *mut __CLPK_integer,
                   __ifailr: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn chseqr_(__job: *mut ::libc::c_char, __compz: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __h__: *mut __CLPK_complex,
                   __ldh: *mut __CLPK_integer, __w: *mut __CLPK_complex,
                   __z__: *mut __CLPK_complex, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn clabrd_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nb: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __tauq: *mut __CLPK_complex,
                   __taup: *mut __CLPK_complex, __x: *mut __CLPK_complex,
                   __ldx: *mut __CLPK_integer, __y: *mut __CLPK_complex,
                   __ldy: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn clacgv_(__n: *mut __CLPK_integer, __x: *mut __CLPK_complex,
                   __incx: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn clacn2_(__n: *mut __CLPK_integer, __v: *mut __CLPK_complex,
                   __x: *mut __CLPK_complex, __est: *mut __CLPK_real,
                   __kase: *mut __CLPK_integer, __isave: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn clacon_(__n: *mut __CLPK_integer, __v: *mut __CLPK_complex,
                   __x: *mut __CLPK_complex, __est: *mut __CLPK_real,
                   __kase: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn clacp2_(__uplo: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn clacpy_(__uplo: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn clacrm_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __c__: *mut __CLPK_complex, __ldc: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_real) -> ::libc::c_int;
    pub fn clacrt_(__n: *mut __CLPK_integer, __cx: *mut __CLPK_complex,
                   __incx: *mut __CLPK_integer, __cy: *mut __CLPK_complex,
                   __incy: *mut __CLPK_integer, __c__: *mut __CLPK_complex,
                   __s: *mut __CLPK_complex) -> ::libc::c_int;
    pub fn cladiv_(__ret_val: *mut __CLPK_complex, __x: *mut __CLPK_complex,
                   __y: *mut __CLPK_complex) -> ();
    pub fn claed0_(__qsiz: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __q: *mut __CLPK_complex, __ldq: *mut __CLPK_integer,
                   __qstore: *mut __CLPK_complex, __ldqs: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn claed7_(__n: *mut __CLPK_integer, __cutpnt: *mut __CLPK_integer,
                   __qsiz: *mut __CLPK_integer, __tlvls: *mut __CLPK_integer,
                   __curlvl: *mut __CLPK_integer,
                   __curpbm: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __q: *mut __CLPK_complex, __ldq: *mut __CLPK_integer,
                   __rho: *mut __CLPK_real, __indxq: *mut __CLPK_integer,
                   __qstore: *mut __CLPK_real, __qptr: *mut __CLPK_integer,
                   __prmptr: *mut __CLPK_integer, __perm: *mut __CLPK_integer,
                   __givptr: *mut __CLPK_integer,
                   __givcol: *mut __CLPK_integer, __givnum: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn claed8_(__k: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __qsiz: *mut __CLPK_integer, __q: *mut __CLPK_complex,
                   __ldq: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __rho: *mut __CLPK_real, __cutpnt: *mut __CLPK_integer,
                   __z__: *mut __CLPK_real, __dlamda: *mut __CLPK_real,
                   __q2: *mut __CLPK_complex, __ldq2: *mut __CLPK_integer,
                   __w: *mut __CLPK_real, __indxp: *mut __CLPK_integer,
                   __indx: *mut __CLPK_integer, __indxq: *mut __CLPK_integer,
                   __perm: *mut __CLPK_integer, __givptr: *mut __CLPK_integer,
                   __givcol: *mut __CLPK_integer, __givnum: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn claein_(__rightv: *mut __CLPK_logical,
                   __noinit: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __h__: *mut __CLPK_complex, __ldh: *mut __CLPK_integer,
                   __w: *mut __CLPK_complex, __v: *mut __CLPK_complex,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_real, __eps3: *mut __CLPK_real,
                   __smlnum: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn claesy_(__a: *mut __CLPK_complex, __b: *mut __CLPK_complex,
                   __c__: *mut __CLPK_complex, __rt1: *mut __CLPK_complex,
                   __rt2: *mut __CLPK_complex, __evscal: *mut __CLPK_complex,
                   __cs1: *mut __CLPK_complex, __sn1: *mut __CLPK_complex)
     -> ::libc::c_int;
    pub fn claev2_(__a: *mut __CLPK_complex, __b: *mut __CLPK_complex,
                   __c__: *mut __CLPK_complex, __rt1: *mut __CLPK_real,
                   __rt2: *mut __CLPK_real, __cs1: *mut __CLPK_real,
                   __sn1: *mut __CLPK_complex) -> ::libc::c_int;
    pub fn clag2z_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __sa: *mut __CLPK_complex, __ldsa: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn clags2_(__upper: *mut __CLPK_logical, __a1: *mut __CLPK_real,
                   __a2: *mut __CLPK_complex, __a3: *mut __CLPK_real,
                   __b1: *mut __CLPK_real, __b2: *mut __CLPK_complex,
                   __b3: *mut __CLPK_real, __csu: *mut __CLPK_real,
                   __snu: *mut __CLPK_complex, __csv: *mut __CLPK_real,
                   __snv: *mut __CLPK_complex, __csq: *mut __CLPK_real,
                   __snq: *mut __CLPK_complex) -> ::libc::c_int;
    pub fn clagtm_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __alpha: *mut __CLPK_real,
                   __dl: *mut __CLPK_complex, __d__: *mut __CLPK_complex,
                   __du: *mut __CLPK_complex, __x: *mut __CLPK_complex,
                   __ldx: *mut __CLPK_integer, __beta: *mut __CLPK_real,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn clahef_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nb: *mut __CLPK_integer, __kb: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __w: *mut __CLPK_complex,
                   __ldw: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn clahqr_(__wantt: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __h__: *mut __CLPK_complex,
                   __ldh: *mut __CLPK_integer, __w: *mut __CLPK_complex,
                   __iloz: *mut __CLPK_integer, __ihiz: *mut __CLPK_integer,
                   __z__: *mut __CLPK_complex, __ldz: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn clahr2_(__n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __nb: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __t: *mut __CLPK_complex, __ldt: *mut __CLPK_integer,
                   __y: *mut __CLPK_complex, __ldy: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn clahrd_(__n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __nb: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __t: *mut __CLPK_complex, __ldt: *mut __CLPK_integer,
                   __y: *mut __CLPK_complex, __ldy: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn claic1_(__job: *mut __CLPK_integer, __j: *mut __CLPK_integer,
                   __x: *mut __CLPK_complex, __sest: *mut __CLPK_real,
                   __w: *mut __CLPK_complex, __gamma: *mut __CLPK_complex,
                   __sestpr: *mut __CLPK_real, __s: *mut __CLPK_complex,
                   __c__: *mut __CLPK_complex) -> ::libc::c_int;
    pub fn clals0_(__icompq: *mut __CLPK_integer, __nl: *mut __CLPK_integer,
                   __nr: *mut __CLPK_integer, __sqre: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __bx: *mut __CLPK_complex,
                   __ldbx: *mut __CLPK_integer, __perm: *mut __CLPK_integer,
                   __givptr: *mut __CLPK_integer,
                   __givcol: *mut __CLPK_integer,
                   __ldgcol: *mut __CLPK_integer, __givnum: *mut __CLPK_real,
                   __ldgnum: *mut __CLPK_integer, __poles: *mut __CLPK_real,
                   __difl: *mut __CLPK_real, __difr: *mut __CLPK_real,
                   __z__: *mut __CLPK_real, __k: *mut __CLPK_integer,
                   __c__: *mut __CLPK_real, __s: *mut __CLPK_real,
                   __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn clalsa_(__icompq: *mut __CLPK_integer,
                   __smlsiz: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __bx: *mut __CLPK_complex,
                   __ldbx: *mut __CLPK_integer, __u: *mut __CLPK_real,
                   __ldu: *mut __CLPK_integer, __vt: *mut __CLPK_real,
                   __k: *mut __CLPK_integer, __difl: *mut __CLPK_real,
                   __difr: *mut __CLPK_real, __z__: *mut __CLPK_real,
                   __poles: *mut __CLPK_real, __givptr: *mut __CLPK_integer,
                   __givcol: *mut __CLPK_integer,
                   __ldgcol: *mut __CLPK_integer, __perm: *mut __CLPK_integer,
                   __givnum: *mut __CLPK_real, __c__: *mut __CLPK_real,
                   __s: *mut __CLPK_real, __rwork: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn clalsd_(__uplo: *mut ::libc::c_char, __smlsiz: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_real, __rank: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn clangb_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_complex, __ldab: *mut __CLPK_integer,
                   __work: *mut __CLPK_real) -> __CLPK_doublereal;
    pub fn clange_(__norm: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __work: *mut __CLPK_real)
     -> __CLPK_doublereal;
    pub fn clangt_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __dl: *mut __CLPK_complex, __d__: *mut __CLPK_complex,
                   __du: *mut __CLPK_complex) -> __CLPK_doublereal;
    pub fn clanhb_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __ab: *mut __CLPK_complex, __ldab: *mut __CLPK_integer,
                   __work: *mut __CLPK_real) -> __CLPK_doublereal;
    pub fn clanhe_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __work: *mut __CLPK_real)
     -> __CLPK_doublereal;
    pub fn clanhf_(__norm: *mut ::libc::c_char, __transr: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __work: *mut __CLPK_real)
     -> __CLPK_doublereal;
    pub fn clanhp_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_complex,
                   __work: *mut __CLPK_real) -> __CLPK_doublereal;
    pub fn clanhs_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __work: *mut __CLPK_real) -> __CLPK_doublereal;
    pub fn clanht_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_complex)
     -> __CLPK_doublereal;
    pub fn clansb_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __ab: *mut __CLPK_complex, __ldab: *mut __CLPK_integer,
                   __work: *mut __CLPK_real) -> __CLPK_doublereal;
    pub fn clansp_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_complex,
                   __work: *mut __CLPK_real) -> __CLPK_doublereal;
    pub fn clansy_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __work: *mut __CLPK_real)
     -> __CLPK_doublereal;
    pub fn clantb_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __ab: *mut __CLPK_complex,
                   __ldab: *mut __CLPK_integer, __work: *mut __CLPK_real)
     -> __CLPK_doublereal;
    pub fn clantp_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_complex, __work: *mut __CLPK_real)
     -> __CLPK_doublereal;
    pub fn clantr_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __work: *mut __CLPK_real)
     -> __CLPK_doublereal;
    pub fn clapll_(__n: *mut __CLPK_integer, __x: *mut __CLPK_complex,
                   __incx: *mut __CLPK_integer, __y: *mut __CLPK_complex,
                   __incy: *mut __CLPK_integer, __ssmin: *mut __CLPK_real)
     -> ::libc::c_int;
    pub fn clapmt_(__forwrd: *mut __CLPK_logical, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __x: *mut __CLPK_complex,
                   __ldx: *mut __CLPK_integer, __k: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn claqgb_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_complex, __ldab: *mut __CLPK_integer,
                   __r__: *mut __CLPK_real, __c__: *mut __CLPK_real,
                   __rowcnd: *mut __CLPK_real, __colcnd: *mut __CLPK_real,
                   __amax: *mut __CLPK_real, __equed: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn claqge_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __r__: *mut __CLPK_real, __c__: *mut __CLPK_real,
                   __rowcnd: *mut __CLPK_real, __colcnd: *mut __CLPK_real,
                   __amax: *mut __CLPK_real, __equed: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn claqhb_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_complex,
                   __ldab: *mut __CLPK_integer, __s: *mut __CLPK_real,
                   __scond: *mut __CLPK_real, __amax: *mut __CLPK_real,
                   __equed: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn claqhe_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __s: *mut __CLPK_real, __scond: *mut __CLPK_real,
                   __amax: *mut __CLPK_real, __equed: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn claqhp_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_complex, __s: *mut __CLPK_real,
                   __scond: *mut __CLPK_real, __amax: *mut __CLPK_real,
                   __equed: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn claqp2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __offset: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __jpvt: *mut __CLPK_integer,
                   __tau: *mut __CLPK_complex, __vn1: *mut __CLPK_real,
                   __vn2: *mut __CLPK_real, __work: *mut __CLPK_complex)
     -> ::libc::c_int;
    pub fn claqps_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __offset: *mut __CLPK_integer, __nb: *mut __CLPK_integer,
                   __kb: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __jpvt: *mut __CLPK_integer,
                   __tau: *mut __CLPK_complex, __vn1: *mut __CLPK_real,
                   __vn2: *mut __CLPK_real, __auxv: *mut __CLPK_complex,
                   __f: *mut __CLPK_complex, __ldf: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn claqr0_(__wantt: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __h__: *mut __CLPK_complex,
                   __ldh: *mut __CLPK_integer, __w: *mut __CLPK_complex,
                   __iloz: *mut __CLPK_integer, __ihiz: *mut __CLPK_integer,
                   __z__: *mut __CLPK_complex, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn claqr1_(__n: *mut __CLPK_integer, __h__: *mut __CLPK_complex,
                   __ldh: *mut __CLPK_integer, __s1: *mut __CLPK_complex,
                   __s2: *mut __CLPK_complex, __v: *mut __CLPK_complex)
     -> ::libc::c_int;
    pub fn claqr2_(__wantt: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __ktop: *mut __CLPK_integer,
                   __kbot: *mut __CLPK_integer, __nw: *mut __CLPK_integer,
                   __h__: *mut __CLPK_complex, __ldh: *mut __CLPK_integer,
                   __iloz: *mut __CLPK_integer, __ihiz: *mut __CLPK_integer,
                   __z__: *mut __CLPK_complex, __ldz: *mut __CLPK_integer,
                   __ns: *mut __CLPK_integer, __nd: *mut __CLPK_integer,
                   __sh: *mut __CLPK_complex, __v: *mut __CLPK_complex,
                   __ldv: *mut __CLPK_integer, __nh: *mut __CLPK_integer,
                   __t: *mut __CLPK_complex, __ldt: *mut __CLPK_integer,
                   __nv: *mut __CLPK_integer, __wv: *mut __CLPK_complex,
                   __ldwv: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                   __lwork: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn claqr3_(__wantt: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __ktop: *mut __CLPK_integer,
                   __kbot: *mut __CLPK_integer, __nw: *mut __CLPK_integer,
                   __h__: *mut __CLPK_complex, __ldh: *mut __CLPK_integer,
                   __iloz: *mut __CLPK_integer, __ihiz: *mut __CLPK_integer,
                   __z__: *mut __CLPK_complex, __ldz: *mut __CLPK_integer,
                   __ns: *mut __CLPK_integer, __nd: *mut __CLPK_integer,
                   __sh: *mut __CLPK_complex, __v: *mut __CLPK_complex,
                   __ldv: *mut __CLPK_integer, __nh: *mut __CLPK_integer,
                   __t: *mut __CLPK_complex, __ldt: *mut __CLPK_integer,
                   __nv: *mut __CLPK_integer, __wv: *mut __CLPK_complex,
                   __ldwv: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                   __lwork: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn claqr4_(__wantt: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __h__: *mut __CLPK_complex,
                   __ldh: *mut __CLPK_integer, __w: *mut __CLPK_complex,
                   __iloz: *mut __CLPK_integer, __ihiz: *mut __CLPK_integer,
                   __z__: *mut __CLPK_complex, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn claqr5_(__wantt: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __kacc22: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __ktop: *mut __CLPK_integer, __kbot: *mut __CLPK_integer,
                   __nshfts: *mut __CLPK_integer, __s: *mut __CLPK_complex,
                   __h__: *mut __CLPK_complex, __ldh: *mut __CLPK_integer,
                   __iloz: *mut __CLPK_integer, __ihiz: *mut __CLPK_integer,
                   __z__: *mut __CLPK_complex, __ldz: *mut __CLPK_integer,
                   __v: *mut __CLPK_complex, __ldv: *mut __CLPK_integer,
                   __u: *mut __CLPK_complex, __ldu: *mut __CLPK_integer,
                   __nv: *mut __CLPK_integer, __wv: *mut __CLPK_complex,
                   __ldwv: *mut __CLPK_integer, __nh: *mut __CLPK_integer,
                   __wh: *mut __CLPK_complex, __ldwh: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn claqsb_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_complex,
                   __ldab: *mut __CLPK_integer, __s: *mut __CLPK_real,
                   __scond: *mut __CLPK_real, __amax: *mut __CLPK_real,
                   __equed: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn claqsp_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_complex, __s: *mut __CLPK_real,
                   __scond: *mut __CLPK_real, __amax: *mut __CLPK_real,
                   __equed: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn claqsy_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __s: *mut __CLPK_real, __scond: *mut __CLPK_real,
                   __amax: *mut __CLPK_real, __equed: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn clar1v_(__n: *mut __CLPK_integer, __b1: *mut __CLPK_integer,
                   __bn: *mut __CLPK_integer, __lambda: *mut __CLPK_real,
                   __d__: *mut __CLPK_real, __l: *mut __CLPK_real,
                   __ld: *mut __CLPK_real, __lld: *mut __CLPK_real,
                   __pivmin: *mut __CLPK_real, __gaptol: *mut __CLPK_real,
                   __z__: *mut __CLPK_complex, __wantnc: *mut __CLPK_logical,
                   __negcnt: *mut __CLPK_integer, __ztz: *mut __CLPK_real,
                   __mingma: *mut __CLPK_real, __r__: *mut __CLPK_integer,
                   __isuppz: *mut __CLPK_integer, __nrminv: *mut __CLPK_real,
                   __resid: *mut __CLPK_real, __rqcorr: *mut __CLPK_real,
                   __work: *mut __CLPK_real) -> ::libc::c_int;
    pub fn clar2v_(__n: *mut __CLPK_integer, __x: *mut __CLPK_complex,
                   __y: *mut __CLPK_complex, __z__: *mut __CLPK_complex,
                   __incx: *mut __CLPK_integer, __c__: *mut __CLPK_real,
                   __s: *mut __CLPK_complex, __incc: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn clarcm_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __c__: *mut __CLPK_complex, __ldc: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_real) -> ::libc::c_int;
    pub fn clarf_(__side: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                  __n: *mut __CLPK_integer, __v: *mut __CLPK_complex,
                  __incv: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                  __c__: *mut __CLPK_complex, __ldc: *mut __CLPK_integer,
                  __work: *mut __CLPK_complex) -> ::libc::c_int;
    pub fn clarfb_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __direct: *mut ::libc::c_char,
                   __storev: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __v: *mut __CLPK_complex, __ldv: *mut __CLPK_integer,
                   __t: *mut __CLPK_complex, __ldt: *mut __CLPK_integer,
                   __c__: *mut __CLPK_complex, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __ldwork: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn clarfg_(__n: *mut __CLPK_integer, __alpha: *mut __CLPK_complex,
                   __x: *mut __CLPK_complex, __incx: *mut __CLPK_integer,
                   __tau: *mut __CLPK_complex) -> ::libc::c_int;
    pub fn clarfp_(__n: *mut __CLPK_integer, __alpha: *mut __CLPK_complex,
                   __x: *mut __CLPK_complex, __incx: *mut __CLPK_integer,
                   __tau: *mut __CLPK_complex) -> ::libc::c_int;
    pub fn clarft_(__direct: *mut ::libc::c_char,
                   __storev: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __v: *mut __CLPK_complex,
                   __ldv: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __t: *mut __CLPK_complex, __ldt: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn clarfx_(__side: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __v: *mut __CLPK_complex,
                   __tau: *mut __CLPK_complex, __c__: *mut __CLPK_complex,
                   __ldc: *mut __CLPK_integer, __work: *mut __CLPK_complex)
     -> ::libc::c_int;
    pub fn clargv_(__n: *mut __CLPK_integer, __x: *mut __CLPK_complex,
                   __incx: *mut __CLPK_integer, __y: *mut __CLPK_complex,
                   __incy: *mut __CLPK_integer, __c__: *mut __CLPK_real,
                   __incc: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn clarnv_(__idist: *mut __CLPK_integer, __iseed: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __x: *mut __CLPK_complex)
     -> ::libc::c_int;
    pub fn clarrv_(__n: *mut __CLPK_integer, __vl: *mut __CLPK_real,
                   __vu: *mut __CLPK_real, __d__: *mut __CLPK_real,
                   __l: *mut __CLPK_real, __pivmin: *mut __CLPK_real,
                   __isplit: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __dol: *mut __CLPK_integer, __dou: *mut __CLPK_integer,
                   __minrgp: *mut __CLPK_real, __rtol1: *mut __CLPK_real,
                   __rtol2: *mut __CLPK_real, __w: *mut __CLPK_real,
                   __werr: *mut __CLPK_real, __wgap: *mut __CLPK_real,
                   __iblock: *mut __CLPK_integer,
                   __indexw: *mut __CLPK_integer, __gers: *mut __CLPK_real,
                   __z__: *mut __CLPK_complex, __ldz: *mut __CLPK_integer,
                   __isuppz: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn clarscl2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                     __d__: *mut __CLPK_real, __x: *mut __CLPK_complex,
                     __ldx: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn clartg_(__f: *mut __CLPK_complex, __g: *mut __CLPK_complex,
                   __cs: *mut __CLPK_real, __sn: *mut __CLPK_complex,
                   __r__: *mut __CLPK_complex) -> ::libc::c_int;
    pub fn clartv_(__n: *mut __CLPK_integer, __x: *mut __CLPK_complex,
                   __incx: *mut __CLPK_integer, __y: *mut __CLPK_complex,
                   __incy: *mut __CLPK_integer, __c__: *mut __CLPK_real,
                   __s: *mut __CLPK_complex, __incc: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn clarz_(__side: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                  __n: *mut __CLPK_integer, __l: *mut __CLPK_integer,
                  __v: *mut __CLPK_complex, __incv: *mut __CLPK_integer,
                  __tau: *mut __CLPK_complex, __c__: *mut __CLPK_complex,
                  __ldc: *mut __CLPK_integer, __work: *mut __CLPK_complex)
     -> ::libc::c_int;
    pub fn clarzb_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __direct: *mut ::libc::c_char,
                   __storev: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __l: *mut __CLPK_integer, __v: *mut __CLPK_complex,
                   __ldv: *mut __CLPK_integer, __t: *mut __CLPK_complex,
                   __ldt: *mut __CLPK_integer, __c__: *mut __CLPK_complex,
                   __ldc: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                   __ldwork: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn clarzt_(__direct: *mut ::libc::c_char,
                   __storev: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __v: *mut __CLPK_complex,
                   __ldv: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __t: *mut __CLPK_complex, __ldt: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn clascl_(__type__: *mut ::libc::c_char, __kl: *mut __CLPK_integer,
                   __ku: *mut __CLPK_integer, __cfrom: *mut __CLPK_real,
                   __cto: *mut __CLPK_real, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn clascl2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                    __d__: *mut __CLPK_real, __x: *mut __CLPK_complex,
                    __ldx: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn claset_(__uplo: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __alpha: *mut __CLPK_complex,
                   __beta: *mut __CLPK_complex, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn clasr_(__side: *mut ::libc::c_char, __pivot: *mut ::libc::c_char,
                  __direct: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                  __n: *mut __CLPK_integer, __c__: *mut __CLPK_real,
                  __s: *mut __CLPK_real, __a: *mut __CLPK_complex,
                  __lda: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn classq_(__n: *mut __CLPK_integer, __x: *mut __CLPK_complex,
                   __incx: *mut __CLPK_integer, __scale: *mut __CLPK_real,
                   __sumsq: *mut __CLPK_real) -> ::libc::c_int;
    pub fn claswp_(__n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __k1: *mut __CLPK_integer,
                   __k2: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __incx: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn clasyf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nb: *mut __CLPK_integer, __kb: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __w: *mut __CLPK_complex,
                   __ldw: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn clatbs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __normin: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __kd: *mut __CLPK_integer,
                   __ab: *mut __CLPK_complex, __ldab: *mut __CLPK_integer,
                   __x: *mut __CLPK_complex, __scale: *mut __CLPK_real,
                   __cnorm: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn clatdf_(__ijob: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __z__: *mut __CLPK_complex, __ldz: *mut __CLPK_integer,
                   __rhs: *mut __CLPK_complex, __rdsum: *mut __CLPK_real,
                   __rdscal: *mut __CLPK_real, __ipiv: *mut __CLPK_integer,
                   __jpiv: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn clatps_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __normin: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_complex,
                   __x: *mut __CLPK_complex, __scale: *mut __CLPK_real,
                   __cnorm: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn clatrd_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nb: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __e: *mut __CLPK_real,
                   __tau: *mut __CLPK_complex, __w: *mut __CLPK_complex,
                   __ldw: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn clatrs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __normin: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __x: *mut __CLPK_complex,
                   __scale: *mut __CLPK_real, __cnorm: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn clatrz_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __l: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __work: *mut __CLPK_complex) -> ::libc::c_int;
    pub fn clatzm_(__side: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __v: *mut __CLPK_complex,
                   __incv: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __c1: *mut __CLPK_complex, __c2: *mut __CLPK_complex,
                   __ldc: *mut __CLPK_integer, __work: *mut __CLPK_complex)
     -> ::libc::c_int;
    pub fn clauu2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn clauum_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cpbcon_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_complex,
                   __ldab: *mut __CLPK_integer, __anorm: *mut __CLPK_real,
                   __rcond: *mut __CLPK_real, __work: *mut __CLPK_complex,
                   __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cpbequ_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_complex,
                   __ldab: *mut __CLPK_integer, __s: *mut __CLPK_real,
                   __scond: *mut __CLPK_real, __amax: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cpbrfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ab: *mut __CLPK_complex, __ldab: *mut __CLPK_integer,
                   __afb: *mut __CLPK_complex, __ldafb: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_complex, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cpbstf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_complex,
                   __ldab: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cpbsv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __kd: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                  __ab: *mut __CLPK_complex, __ldab: *mut __CLPK_integer,
                  __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cpbsvx_(__fact: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __kd: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ab: *mut __CLPK_complex,
                   __ldab: *mut __CLPK_integer, __afb: *mut __CLPK_complex,
                   __ldafb: *mut __CLPK_integer, __equed: *mut ::libc::c_char,
                   __s: *mut __CLPK_real, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_complex,
                   __ldx: *mut __CLPK_integer, __rcond: *mut __CLPK_real,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cpbtf2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_complex,
                   __ldab: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cpbtrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_complex,
                   __ldab: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cpbtrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ab: *mut __CLPK_complex, __ldab: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cpftrf_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cpftri_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cpftrs_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cpocon_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __anorm: *mut __CLPK_real, __rcond: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cpoequ_(__n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __s: *mut __CLPK_real,
                   __scond: *mut __CLPK_real, __amax: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cpoequb_(__n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                    __lda: *mut __CLPK_integer, __s: *mut __CLPK_real,
                    __scond: *mut __CLPK_real, __amax: *mut __CLPK_real,
                    __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cporfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __af: *mut __CLPK_complex,
                   __ldaf: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_complex,
                   __ldx: *mut __CLPK_integer, __ferr: *mut __CLPK_real,
                   __berr: *mut __CLPK_real, __work: *mut __CLPK_complex,
                   __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cposv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                  __lda: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                  __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cposvx_(__fact: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __af: *mut __CLPK_complex, __ldaf: *mut __CLPK_integer,
                   __equed: *mut ::libc::c_char, __s: *mut __CLPK_real,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_complex, __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_real, __ferr: *mut __CLPK_real,
                   __berr: *mut __CLPK_real, __work: *mut __CLPK_complex,
                   __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cpotf2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cpotrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cpotri_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cpotrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cppcon_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_complex, __anorm: *mut __CLPK_real,
                   __rcond: *mut __CLPK_real, __work: *mut __CLPK_complex,
                   __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cppequ_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_complex, __s: *mut __CLPK_real,
                   __scond: *mut __CLPK_real, __amax: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cpprfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_complex,
                   __afp: *mut __CLPK_complex, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_complex,
                   __ldx: *mut __CLPK_integer, __ferr: *mut __CLPK_real,
                   __berr: *mut __CLPK_real, __work: *mut __CLPK_complex,
                   __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cppsv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_complex,
                  __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cppsvx_(__fact: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ap: *mut __CLPK_complex, __afp: *mut __CLPK_complex,
                   __equed: *mut ::libc::c_char, __s: *mut __CLPK_real,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_complex, __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_real, __ferr: *mut __CLPK_real,
                   __berr: *mut __CLPK_real, __work: *mut __CLPK_complex,
                   __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cpptrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cpptri_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cpptrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_complex,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cpstf2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __piv: *mut __CLPK_integer, __rank: *mut __CLPK_integer,
                   __tol: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cpstrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __piv: *mut __CLPK_integer, __rank: *mut __CLPK_integer,
                   __tol: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cptcon_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_complex, __anorm: *mut __CLPK_real,
                   __rcond: *mut __CLPK_real, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cpteqr_(__compz: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __z__: *mut __CLPK_complex, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cptrfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_complex, __df: *mut __CLPK_real,
                   __ef: *mut __CLPK_complex, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_complex,
                   __ldx: *mut __CLPK_integer, __ferr: *mut __CLPK_real,
                   __berr: *mut __CLPK_real, __work: *mut __CLPK_complex,
                   __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cptsv_(__n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                  __d__: *mut __CLPK_real, __e: *mut __CLPK_complex,
                  __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cptsvx_(__fact: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_complex, __df: *mut __CLPK_real,
                   __ef: *mut __CLPK_complex, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_complex,
                   __ldx: *mut __CLPK_integer, __rcond: *mut __CLPK_real,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cpttrf_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cpttrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_complex, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cptts2_(__iuplo: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_complex, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn crot_(__n: *mut __CLPK_integer, __cx: *mut __CLPK_complex,
                 __incx: *mut __CLPK_integer, __cy: *mut __CLPK_complex,
                 __incy: *mut __CLPK_integer, __c__: *mut __CLPK_real,
                 __s: *mut __CLPK_complex) -> ::libc::c_int;
    pub fn cspcon_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_complex, __ipiv: *mut __CLPK_integer,
                   __anorm: *mut __CLPK_real, __rcond: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cspmv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __alpha: *mut __CLPK_complex, __ap: *mut __CLPK_complex,
                  __x: *mut __CLPK_complex, __incx: *mut __CLPK_integer,
                  __beta: *mut __CLPK_complex, __y: *mut __CLPK_complex,
                  __incy: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cspr_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                 __alpha: *mut __CLPK_complex, __x: *mut __CLPK_complex,
                 __incx: *mut __CLPK_integer, __ap: *mut __CLPK_complex)
     -> ::libc::c_int;
    pub fn csprfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_complex,
                   __afp: *mut __CLPK_complex, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_complex, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cspsv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_complex,
                  __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                  __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cspsvx_(__fact: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ap: *mut __CLPK_complex, __afp: *mut __CLPK_complex,
                   __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_complex,
                   __ldx: *mut __CLPK_integer, __rcond: *mut __CLPK_real,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn csptrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_complex, __ipiv: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn csptri_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_complex, __ipiv: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn csptrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_complex,
                   __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn csrscl_(__n: *mut __CLPK_integer, __sa: *mut __CLPK_real,
                   __sx: *mut __CLPK_complex, __incx: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cstedc_(__compz: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __z__: *mut __CLPK_complex, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_real, __lrwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cstegr_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __vl: *mut __CLPK_real,
                   __vu: *mut __CLPK_real, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer, __abstol: *mut __CLPK_real,
                   __m: *mut __CLPK_integer, __w: *mut __CLPK_real,
                   __z__: *mut __CLPK_complex, __ldz: *mut __CLPK_integer,
                   __isuppz: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cstein_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_real, __iblock: *mut __CLPK_integer,
                   __isplit: *mut __CLPK_integer, __z__: *mut __CLPK_complex,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __ifail: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cstemr_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __vl: *mut __CLPK_real,
                   __vu: *mut __CLPK_real, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_real, __z__: *mut __CLPK_complex,
                   __ldz: *mut __CLPK_integer, __nzc: *mut __CLPK_integer,
                   __isuppz: *mut __CLPK_integer,
                   __tryrac: *mut __CLPK_logical, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn csteqr_(__compz: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __z__: *mut __CLPK_complex, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn csycon_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __anorm: *mut __CLPK_real,
                   __rcond: *mut __CLPK_real, __work: *mut __CLPK_complex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn csyequb_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                    __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                    __s: *mut __CLPK_real, __scond: *mut __CLPK_real,
                    __amax: *mut __CLPK_real, __work: *mut __CLPK_complex,
                    __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn csymv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __alpha: *mut __CLPK_complex, __a: *mut __CLPK_complex,
                  __lda: *mut __CLPK_integer, __x: *mut __CLPK_complex,
                  __incx: *mut __CLPK_integer, __beta: *mut __CLPK_complex,
                  __y: *mut __CLPK_complex, __incy: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn csyr_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                 __alpha: *mut __CLPK_complex, __x: *mut __CLPK_complex,
                 __incx: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                 __lda: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn csyrfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __af: *mut __CLPK_complex,
                   __ldaf: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_complex, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn csysv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                  __lda: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                  __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                  __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn csysvx_(__fact: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __af: *mut __CLPK_complex, __ldaf: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_complex,
                   __ldx: *mut __CLPK_integer, __rcond: *mut __CLPK_real,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn csytf2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn csytrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn csytri_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn csytrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ctbcon_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_complex,
                   __ldab: *mut __CLPK_integer, __rcond: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ctbrfs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ab: *mut __CLPK_complex, __ldab: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_complex, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ctbtrs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ab: *mut __CLPK_complex, __ldab: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ctfsm_(__transr: *mut ::libc::c_char, __side: *mut ::libc::c_char,
                  __uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                  __diag: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                  __n: *mut __CLPK_integer, __alpha: *mut __CLPK_complex,
                  __a: *mut __CLPK_complex, __b: *mut __CLPK_complex,
                  __ldb: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ctftri_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ctfttp_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __arf: *mut __CLPK_complex,
                   __ap: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ctfttr_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __arf: *mut __CLPK_complex,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ctgevc_(__side: *mut ::libc::c_char, __howmny: *mut ::libc::c_char,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __s: *mut __CLPK_complex, __lds: *mut __CLPK_integer,
                   __p: *mut __CLPK_complex, __ldp: *mut __CLPK_integer,
                   __vl: *mut __CLPK_complex, __ldvl: *mut __CLPK_integer,
                   __vr: *mut __CLPK_complex, __ldvr: *mut __CLPK_integer,
                   __mm: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ctgex2_(__wantq: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __q: *mut __CLPK_complex,
                   __ldq: *mut __CLPK_integer, __z__: *mut __CLPK_complex,
                   __ldz: *mut __CLPK_integer, __j1: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ctgexc_(__wantq: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __q: *mut __CLPK_complex,
                   __ldq: *mut __CLPK_integer, __z__: *mut __CLPK_complex,
                   __ldz: *mut __CLPK_integer, __ifst: *mut __CLPK_integer,
                   __ilst: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ctgsen_(__ijob: *mut __CLPK_integer, __wantq: *mut __CLPK_logical,
                   __wantz: *mut __CLPK_logical,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __alpha: *mut __CLPK_complex, __beta: *mut __CLPK_complex,
                   __q: *mut __CLPK_complex, __ldq: *mut __CLPK_integer,
                   __z__: *mut __CLPK_complex, __ldz: *mut __CLPK_integer,
                   __m: *mut __CLPK_integer, __pl: *mut __CLPK_real,
                   __pr: *mut __CLPK_real, __dif: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ctgsja_(__jobu: *mut ::libc::c_char, __jobv: *mut ::libc::c_char,
                   __jobq: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __p: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __l: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __tola: *mut __CLPK_real, __tolb: *mut __CLPK_real,
                   __alpha: *mut __CLPK_real, __beta: *mut __CLPK_real,
                   __u: *mut __CLPK_complex, __ldu: *mut __CLPK_integer,
                   __v: *mut __CLPK_complex, __ldv: *mut __CLPK_integer,
                   __q: *mut __CLPK_complex, __ldq: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __ncycle: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ctgsna_(__job: *mut ::libc::c_char, __howmny: *mut ::libc::c_char,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __vl: *mut __CLPK_complex, __ldvl: *mut __CLPK_integer,
                   __vr: *mut __CLPK_complex, __ldvr: *mut __CLPK_integer,
                   __s: *mut __CLPK_real, __dif: *mut __CLPK_real,
                   __mm: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ctgsy2_(__trans: *mut ::libc::c_char, __ijob: *mut __CLPK_integer,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __c__: *mut __CLPK_complex, __ldc: *mut __CLPK_integer,
                   __d__: *mut __CLPK_complex, __ldd: *mut __CLPK_integer,
                   __e: *mut __CLPK_complex, __lde: *mut __CLPK_integer,
                   __f: *mut __CLPK_complex, __ldf: *mut __CLPK_integer,
                   __scale: *mut __CLPK_real, __rdsum: *mut __CLPK_real,
                   __rdscal: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ctgsyl_(__trans: *mut ::libc::c_char, __ijob: *mut __CLPK_integer,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __c__: *mut __CLPK_complex, __ldc: *mut __CLPK_integer,
                   __d__: *mut __CLPK_complex, __ldd: *mut __CLPK_integer,
                   __e: *mut __CLPK_complex, __lde: *mut __CLPK_integer,
                   __f: *mut __CLPK_complex, __ldf: *mut __CLPK_integer,
                   __scale: *mut __CLPK_real, __dif: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ctpcon_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_complex, __rcond: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ctprfs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_complex,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_complex, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ctptri_(__uplo: *mut ::libc::c_char, __diag: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_complex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ctptrs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_complex,
                   __b: *mut __CLPK_complex, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ctpttf_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_complex,
                   __arf: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ctpttr_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_complex, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ctrcon_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_real, __work: *mut __CLPK_complex,
                   __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ctrevc_(__side: *mut ::libc::c_char, __howmny: *mut ::libc::c_char,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __t: *mut __CLPK_complex, __ldt: *mut __CLPK_integer,
                   __vl: *mut __CLPK_complex, __ldvl: *mut __CLPK_integer,
                   __vr: *mut __CLPK_complex, __ldvr: *mut __CLPK_integer,
                   __mm: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __rwork: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ctrexc_(__compq: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __t: *mut __CLPK_complex, __ldt: *mut __CLPK_integer,
                   __q: *mut __CLPK_complex, __ldq: *mut __CLPK_integer,
                   __ifst: *mut __CLPK_integer, __ilst: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ctrrfs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_complex,
                   __ldx: *mut __CLPK_integer, __ferr: *mut __CLPK_real,
                   __berr: *mut __CLPK_real, __work: *mut __CLPK_complex,
                   __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ctrsen_(__job: *mut ::libc::c_char, __compq: *mut ::libc::c_char,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __t: *mut __CLPK_complex, __ldt: *mut __CLPK_integer,
                   __q: *mut __CLPK_complex, __ldq: *mut __CLPK_integer,
                   __w: *mut __CLPK_complex, __m: *mut __CLPK_integer,
                   __s: *mut __CLPK_real, __sep: *mut __CLPK_real,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ctrsna_(__job: *mut ::libc::c_char, __howmny: *mut ::libc::c_char,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __t: *mut __CLPK_complex, __ldt: *mut __CLPK_integer,
                   __vl: *mut __CLPK_complex, __ldvl: *mut __CLPK_integer,
                   __vr: *mut __CLPK_complex, __ldvr: *mut __CLPK_integer,
                   __s: *mut __CLPK_real, __sep: *mut __CLPK_real,
                   __mm: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __ldwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ctrsyl_(__trana: *mut ::libc::c_char, __tranb: *mut ::libc::c_char,
                   __isgn: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __c__: *mut __CLPK_complex,
                   __ldc: *mut __CLPK_integer, __scale: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ctrti2_(__uplo: *mut ::libc::c_char, __diag: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ctrtri_(__uplo: *mut ::libc::c_char, __diag: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ctrtrs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_complex,
                   __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ctrttf_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __arf: *mut __CLPK_complex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ctrttp_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __ap: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ctzrqf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ctzrzf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_complex, __work: *mut __CLPK_complex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cung2l_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __work: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cung2r_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __work: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cungbr_(__vect: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_complex, __work: *mut __CLPK_complex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cunghr_(__n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cungl2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __work: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cunglq_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cungql_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cungqr_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cungr2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __work: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cungrq_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cungtr_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_complex, __work: *mut __CLPK_complex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cunm2l_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __c__: *mut __CLPK_complex, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cunm2r_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __c__: *mut __CLPK_complex, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cunmbr_(__vect: *mut ::libc::c_char, __side: *mut ::libc::c_char,
                   __trans: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_complex, __c__: *mut __CLPK_complex,
                   __ldc: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cunmhr_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __ilo: *mut __CLPK_integer, __ihi: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_complex, __c__: *mut __CLPK_complex,
                   __ldc: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cunml2_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __c__: *mut __CLPK_complex, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cunmlq_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __c__: *mut __CLPK_complex, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cunmql_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __c__: *mut __CLPK_complex, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cunmqr_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __c__: *mut __CLPK_complex, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cunmr2_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __c__: *mut __CLPK_complex, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cunmr3_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __l: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_complex, __c__: *mut __CLPK_complex,
                   __ldc: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cunmrq_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __c__: *mut __CLPK_complex, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cunmrz_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __l: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_complex, __c__: *mut __CLPK_complex,
                   __ldc: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cunmtr_(__side: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __trans: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_complex,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_complex,
                   __c__: *mut __CLPK_complex, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn cupgtr_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_complex, __tau: *mut __CLPK_complex,
                   __q: *mut __CLPK_complex, __ldq: *mut __CLPK_integer,
                   __work: *mut __CLPK_complex, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn cupmtr_(__side: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __trans: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_complex,
                   __tau: *mut __CLPK_complex, __c__: *mut __CLPK_complex,
                   __ldc: *mut __CLPK_integer, __work: *mut __CLPK_complex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dbdsdc_(__uplo: *mut ::libc::c_char, __compq: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublereal, __u: *mut __CLPK_doublereal,
                   __ldu: *mut __CLPK_integer, __vt: *mut __CLPK_doublereal,
                   __ldvt: *mut __CLPK_integer, __q: *mut __CLPK_doublereal,
                   __iq: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dbdsqr_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ncvt: *mut __CLPK_integer, __nru: *mut __CLPK_integer,
                   __ncc: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublereal, __vt: *mut __CLPK_doublereal,
                   __ldvt: *mut __CLPK_integer, __u: *mut __CLPK_doublereal,
                   __ldu: *mut __CLPK_integer, __c__: *mut __CLPK_doublereal,
                   __ldc: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ddisna_(__job: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __sep: *mut __CLPK_doublereal, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgbbrd_(__vect: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __ncc: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublereal, __ldab: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __q: *mut __CLPK_doublereal, __ldq: *mut __CLPK_integer,
                   __pt: *mut __CLPK_doublereal, __ldpt: *mut __CLPK_integer,
                   __c__: *mut __CLPK_doublereal, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dgbcon_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublereal, __ldab: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer,
                   __anorm: *mut __CLPK_doublereal,
                   __rcond: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgbequ_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublereal, __ldab: *mut __CLPK_integer,
                   __r__: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal,
                   __rowcnd: *mut __CLPK_doublereal,
                   __colcnd: *mut __CLPK_doublereal,
                   __amax: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dgbequb_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                    __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                    __ab: *mut __CLPK_doublereal, __ldab: *mut __CLPK_integer,
                    __r__: *mut __CLPK_doublereal,
                    __c__: *mut __CLPK_doublereal,
                    __rowcnd: *mut __CLPK_doublereal,
                    __colcnd: *mut __CLPK_doublereal,
                    __amax: *mut __CLPK_doublereal,
                    __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dgbrfs_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ab: *mut __CLPK_doublereal,
                   __ldab: *mut __CLPK_integer, __afb: *mut __CLPK_doublereal,
                   __ldafb: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublereal, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgbsv_(__n: *mut __CLPK_integer, __kl: *mut __CLPK_integer,
                  __ku: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                  __ab: *mut __CLPK_doublereal, __ldab: *mut __CLPK_integer,
                  __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                  __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgbsvx_(__fact: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __kl: *mut __CLPK_integer,
                   __ku: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublereal, __ldab: *mut __CLPK_integer,
                   __afb: *mut __CLPK_doublereal,
                   __ldafb: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __equed: *mut ::libc::c_char,
                   __r__: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_doublereal,
                   __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgbtf2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublereal, __ldab: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgbtrf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublereal, __ldab: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgbtrs_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ab: *mut __CLPK_doublereal,
                   __ldab: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dgebak_(__job: *mut ::libc::c_char, __side: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer,
                   __scale: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __v: *mut __CLPK_doublereal, __ldv: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dgebal_(__job: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __ilo: *mut __CLPK_integer, __ihi: *mut __CLPK_integer,
                   __scale: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dgebd2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __tauq: *mut __CLPK_doublereal,
                   __taup: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dgebrd_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __tauq: *mut __CLPK_doublereal,
                   __taup: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgecon_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __anorm: *mut __CLPK_doublereal,
                   __rcond: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgeequ_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __r__: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal,
                   __rowcnd: *mut __CLPK_doublereal,
                   __colcnd: *mut __CLPK_doublereal,
                   __amax: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dgeequb_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                    __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                    __r__: *mut __CLPK_doublereal,
                    __c__: *mut __CLPK_doublereal,
                    __rowcnd: *mut __CLPK_doublereal,
                    __colcnd: *mut __CLPK_doublereal,
                    __amax: *mut __CLPK_doublereal,
                    __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dgees_(__jobvs: *mut ::libc::c_char, __sort: *mut ::libc::c_char,
                  __select: __CLPK_L_fp, __n: *mut __CLPK_integer,
                  __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                  __sdim: *mut __CLPK_integer, __wr: *mut __CLPK_doublereal,
                  __wi: *mut __CLPK_doublereal, __vs: *mut __CLPK_doublereal,
                  __ldvs: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                  __lwork: *mut __CLPK_integer, __bwork: *mut __CLPK_logical,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dgeesx_(__jobvs: *mut ::libc::c_char, __sort: *mut ::libc::c_char,
                   __select: __CLPK_L_fp, __sense: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __sdim: *mut __CLPK_integer,
                   __wr: *mut __CLPK_doublereal, __wi: *mut __CLPK_doublereal,
                   __vs: *mut __CLPK_doublereal, __ldvs: *mut __CLPK_integer,
                   __rconde: *mut __CLPK_doublereal,
                   __rcondv: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer,
                   __bwork: *mut __CLPK_logical, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgeev_(__jobvl: *mut ::libc::c_char, __jobvr: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                  __lda: *mut __CLPK_integer, __wr: *mut __CLPK_doublereal,
                  __wi: *mut __CLPK_doublereal, __vl: *mut __CLPK_doublereal,
                  __ldvl: *mut __CLPK_integer, __vr: *mut __CLPK_doublereal,
                  __ldvr: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                  __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgeevx_(__balanc: *mut ::libc::c_char,
                   __jobvl: *mut ::libc::c_char, __jobvr: *mut ::libc::c_char,
                   __sense: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __wr: *mut __CLPK_doublereal, __wi: *mut __CLPK_doublereal,
                   __vl: *mut __CLPK_doublereal, __ldvl: *mut __CLPK_integer,
                   __vr: *mut __CLPK_doublereal, __ldvr: *mut __CLPK_integer,
                   __ilo: *mut __CLPK_integer, __ihi: *mut __CLPK_integer,
                   __scale: *mut __CLPK_doublereal,
                   __abnrm: *mut __CLPK_doublereal,
                   __rconde: *mut __CLPK_doublereal,
                   __rcondv: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dgegs_(__jobvsl: *mut ::libc::c_char,
                  __jobvsr: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                  __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                  __alphar: *mut __CLPK_doublereal,
                  __alphai: *mut __CLPK_doublereal,
                  __beta: *mut __CLPK_doublereal,
                  __vsl: *mut __CLPK_doublereal, __ldvsl: *mut __CLPK_integer,
                  __vsr: *mut __CLPK_doublereal, __ldvsr: *mut __CLPK_integer,
                  __work: *mut __CLPK_doublereal,
                  __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgegv_(__jobvl: *mut ::libc::c_char, __jobvr: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                  __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                  __ldb: *mut __CLPK_integer,
                  __alphar: *mut __CLPK_doublereal,
                  __alphai: *mut __CLPK_doublereal,
                  __beta: *mut __CLPK_doublereal,
                  __vl: *mut __CLPK_doublereal, __ldvl: *mut __CLPK_integer,
                  __vr: *mut __CLPK_doublereal, __ldvr: *mut __CLPK_integer,
                  __work: *mut __CLPK_doublereal,
                  __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgehd2_(__n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dgehrd_(__n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgejsv_(__joba: *mut ::libc::c_char, __jobu: *mut ::libc::c_char,
                   __jobv: *mut ::libc::c_char, __jobr: *mut ::libc::c_char,
                   __jobt: *mut ::libc::c_char, __jobp: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __sva: *mut __CLPK_doublereal, __u: *mut __CLPK_doublereal,
                   __ldu: *mut __CLPK_integer, __v: *mut __CLPK_doublereal,
                   __ldv: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dgelq2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dgelqf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgels_(__trans: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                  __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                  __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                  __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                  __work: *mut __CLPK_doublereal,
                  __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgelsd_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __s: *mut __CLPK_doublereal,
                   __rcond: *mut __CLPK_doublereal,
                   __rank: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dgelss_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __s: *mut __CLPK_doublereal,
                   __rcond: *mut __CLPK_doublereal,
                   __rank: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgelsx_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __jpvt: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __rank: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dgelsy_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __jpvt: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __rank: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgeql2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dgeqlf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgeqp3_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __jpvt: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgeqpf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __jpvt: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dgeqr2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dgeqrf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgerfs_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __af: *mut __CLPK_doublereal,
                   __ldaf: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublereal, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgerq2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dgerqf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgesc2_(__n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __rhs: *mut __CLPK_doublereal,
                   __ipiv: *mut __CLPK_integer, __jpiv: *mut __CLPK_integer,
                   __scale: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dgesdd_(__jobz: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __s: *mut __CLPK_doublereal,
                   __u: *mut __CLPK_doublereal, __ldu: *mut __CLPK_integer,
                   __vt: *mut __CLPK_doublereal, __ldvt: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dgesv_(__n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                  __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                  __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                  __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgesvd_(__jobu: *mut ::libc::c_char, __jobvt: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __s: *mut __CLPK_doublereal, __u: *mut __CLPK_doublereal,
                   __ldu: *mut __CLPK_integer, __vt: *mut __CLPK_doublereal,
                   __ldvt: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgesvj_(__joba: *mut ::libc::c_char, __jobu: *mut ::libc::c_char,
                   __jobv: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __sva: *mut __CLPK_doublereal,
                   __mv: *mut __CLPK_integer, __v: *mut __CLPK_doublereal,
                   __ldv: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgesvx_(__fact: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __af: *mut __CLPK_doublereal, __ldaf: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __equed: *mut ::libc::c_char,
                   __r__: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_doublereal,
                   __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgetc2_(__n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __jpiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgetf2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgetrf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgetri_(__n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgetrs_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dggbak_(__job: *mut ::libc::c_char, __side: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer,
                   __lscale: *mut __CLPK_doublereal,
                   __rscale: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __v: *mut __CLPK_doublereal, __ldv: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dggbal_(__job: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __ilo: *mut __CLPK_integer, __ihi: *mut __CLPK_integer,
                   __lscale: *mut __CLPK_doublereal,
                   __rscale: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dgges_(__jobvsl: *mut ::libc::c_char,
                  __jobvsr: *mut ::libc::c_char, __sort: *mut ::libc::c_char,
                  __selctg: __CLPK_L_fp, __n: *mut __CLPK_integer,
                  __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                  __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                  __sdim: *mut __CLPK_integer,
                  __alphar: *mut __CLPK_doublereal,
                  __alphai: *mut __CLPK_doublereal,
                  __beta: *mut __CLPK_doublereal,
                  __vsl: *mut __CLPK_doublereal, __ldvsl: *mut __CLPK_integer,
                  __vsr: *mut __CLPK_doublereal, __ldvsr: *mut __CLPK_integer,
                  __work: *mut __CLPK_doublereal,
                  __lwork: *mut __CLPK_integer, __bwork: *mut __CLPK_logical,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dggesx_(__jobvsl: *mut ::libc::c_char,
                   __jobvsr: *mut ::libc::c_char, __sort: *mut ::libc::c_char,
                   __selctg: __CLPK_L_fp, __sense: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __sdim: *mut __CLPK_integer,
                   __alphar: *mut __CLPK_doublereal,
                   __alphai: *mut __CLPK_doublereal,
                   __beta: *mut __CLPK_doublereal,
                   __vsl: *mut __CLPK_doublereal,
                   __ldvsl: *mut __CLPK_integer,
                   __vsr: *mut __CLPK_doublereal,
                   __ldvsr: *mut __CLPK_integer,
                   __rconde: *mut __CLPK_doublereal,
                   __rcondv: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer,
                   __bwork: *mut __CLPK_logical, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dggev_(__jobvl: *mut ::libc::c_char, __jobvr: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                  __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                  __ldb: *mut __CLPK_integer,
                  __alphar: *mut __CLPK_doublereal,
                  __alphai: *mut __CLPK_doublereal,
                  __beta: *mut __CLPK_doublereal,
                  __vl: *mut __CLPK_doublereal, __ldvl: *mut __CLPK_integer,
                  __vr: *mut __CLPK_doublereal, __ldvr: *mut __CLPK_integer,
                  __work: *mut __CLPK_doublereal,
                  __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dggevx_(__balanc: *mut ::libc::c_char,
                   __jobvl: *mut ::libc::c_char, __jobvr: *mut ::libc::c_char,
                   __sense: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __alphar: *mut __CLPK_doublereal,
                   __alphai: *mut __CLPK_doublereal,
                   __beta: *mut __CLPK_doublereal,
                   __vl: *mut __CLPK_doublereal, __ldvl: *mut __CLPK_integer,
                   __vr: *mut __CLPK_doublereal, __ldvr: *mut __CLPK_integer,
                   __ilo: *mut __CLPK_integer, __ihi: *mut __CLPK_integer,
                   __lscale: *mut __CLPK_doublereal,
                   __rscale: *mut __CLPK_doublereal,
                   __abnrm: *mut __CLPK_doublereal,
                   __bbnrm: *mut __CLPK_doublereal,
                   __rconde: *mut __CLPK_doublereal,
                   __rcondv: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __bwork: *mut __CLPK_logical, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dggglm_(__n: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __p: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __x: *mut __CLPK_doublereal, __y: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgghrd_(__compq: *mut ::libc::c_char, __compz: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __q: *mut __CLPK_doublereal,
                   __ldq: *mut __CLPK_integer, __z__: *mut __CLPK_doublereal,
                   __ldz: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgglse_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __p: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __c__: *mut __CLPK_doublereal,
                   __d__: *mut __CLPK_doublereal, __x: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dggqrf_(__n: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __p: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __taua: *mut __CLPK_doublereal,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __taub: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dggrqf_(__m: *mut __CLPK_integer, __p: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __taua: *mut __CLPK_doublereal,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __taub: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dggsvd_(__jobu: *mut ::libc::c_char, __jobv: *mut ::libc::c_char,
                   __jobq: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __p: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __l: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __alpha: *mut __CLPK_doublereal,
                   __beta: *mut __CLPK_doublereal,
                   __u: *mut __CLPK_doublereal, __ldu: *mut __CLPK_integer,
                   __v: *mut __CLPK_doublereal, __ldv: *mut __CLPK_integer,
                   __q: *mut __CLPK_doublereal, __ldq: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dggsvp_(__jobu: *mut ::libc::c_char, __jobv: *mut ::libc::c_char,
                   __jobq: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __p: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __tola: *mut __CLPK_doublereal,
                   __tolb: *mut __CLPK_doublereal, __k: *mut __CLPK_integer,
                   __l: *mut __CLPK_integer, __u: *mut __CLPK_doublereal,
                   __ldu: *mut __CLPK_integer, __v: *mut __CLPK_doublereal,
                   __ldv: *mut __CLPK_integer, __q: *mut __CLPK_doublereal,
                   __ldq: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dgsvj0_(__jobv: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __sva: *mut __CLPK_doublereal, __mv: *mut __CLPK_integer,
                   __v: *mut __CLPK_doublereal, __ldv: *mut __CLPK_integer,
                   __eps: *mut __CLPK_doublereal,
                   __sfmin: *mut __CLPK_doublereal,
                   __tol: *mut __CLPK_doublereal,
                   __nsweep: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgsvj1_(__jobv: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __n1: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal,
                   __sva: *mut __CLPK_doublereal, __mv: *mut __CLPK_integer,
                   __v: *mut __CLPK_doublereal, __ldv: *mut __CLPK_integer,
                   __eps: *mut __CLPK_doublereal,
                   __sfmin: *mut __CLPK_doublereal,
                   __tol: *mut __CLPK_doublereal,
                   __nsweep: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgtcon_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __dl: *mut __CLPK_doublereal,
                   __d__: *mut __CLPK_doublereal,
                   __du: *mut __CLPK_doublereal,
                   __du2: *mut __CLPK_doublereal, __ipiv: *mut __CLPK_integer,
                   __anorm: *mut __CLPK_doublereal,
                   __rcond: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgtrfs_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __dl: *mut __CLPK_doublereal,
                   __d__: *mut __CLPK_doublereal,
                   __du: *mut __CLPK_doublereal,
                   __dlf: *mut __CLPK_doublereal,
                   __df: *mut __CLPK_doublereal,
                   __duf: *mut __CLPK_doublereal,
                   __du2: *mut __CLPK_doublereal, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublereal, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgtsv_(__n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                  __dl: *mut __CLPK_doublereal, __d__: *mut __CLPK_doublereal,
                  __du: *mut __CLPK_doublereal, __b: *mut __CLPK_doublereal,
                  __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgtsvx_(__fact: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __dl: *mut __CLPK_doublereal,
                   __d__: *mut __CLPK_doublereal,
                   __du: *mut __CLPK_doublereal,
                   __dlf: *mut __CLPK_doublereal,
                   __df: *mut __CLPK_doublereal,
                   __duf: *mut __CLPK_doublereal,
                   __du2: *mut __CLPK_doublereal, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublereal, __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dgttrf_(__n: *mut __CLPK_integer, __dl: *mut __CLPK_doublereal,
                   __d__: *mut __CLPK_doublereal,
                   __du: *mut __CLPK_doublereal,
                   __du2: *mut __CLPK_doublereal, __ipiv: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dgttrs_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __dl: *mut __CLPK_doublereal,
                   __d__: *mut __CLPK_doublereal,
                   __du: *mut __CLPK_doublereal,
                   __du2: *mut __CLPK_doublereal, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dgtts2_(__itrans: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __dl: *mut __CLPK_doublereal,
                   __d__: *mut __CLPK_doublereal,
                   __du: *mut __CLPK_doublereal,
                   __du2: *mut __CLPK_doublereal, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dhgeqz_(__job: *mut ::libc::c_char, __compq: *mut ::libc::c_char,
                   __compz: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ilo: *mut __CLPK_integer, __ihi: *mut __CLPK_integer,
                   __h__: *mut __CLPK_doublereal, __ldh: *mut __CLPK_integer,
                   __t: *mut __CLPK_doublereal, __ldt: *mut __CLPK_integer,
                   __alphar: *mut __CLPK_doublereal,
                   __alphai: *mut __CLPK_doublereal,
                   __beta: *mut __CLPK_doublereal,
                   __q: *mut __CLPK_doublereal, __ldq: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublereal, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dhsein_(__side: *mut ::libc::c_char, __eigsrc: *mut ::libc::c_char,
                   __initv: *mut ::libc::c_char,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __h__: *mut __CLPK_doublereal, __ldh: *mut __CLPK_integer,
                   __wr: *mut __CLPK_doublereal, __wi: *mut __CLPK_doublereal,
                   __vl: *mut __CLPK_doublereal, __ldvl: *mut __CLPK_integer,
                   __vr: *mut __CLPK_doublereal, __ldvr: *mut __CLPK_integer,
                   __mm: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __ifaill: *mut __CLPK_integer,
                   __ifailr: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dhseqr_(__job: *mut ::libc::c_char, __compz: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __h__: *mut __CLPK_doublereal,
                   __ldh: *mut __CLPK_integer, __wr: *mut __CLPK_doublereal,
                   __wi: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublereal, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn disnan_(__din: *mut __CLPK_doublereal) -> __CLPK_logical;
    pub fn dlabad_(__small: *mut __CLPK_doublereal,
                   __large: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dlabrd_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nb: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublereal,
                   __tauq: *mut __CLPK_doublereal,
                   __taup: *mut __CLPK_doublereal,
                   __x: *mut __CLPK_doublereal, __ldx: *mut __CLPK_integer,
                   __y: *mut __CLPK_doublereal, __ldy: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlacn2_(__n: *mut __CLPK_integer, __v: *mut __CLPK_doublereal,
                   __x: *mut __CLPK_doublereal, __isgn: *mut __CLPK_integer,
                   __est: *mut __CLPK_doublereal, __kase: *mut __CLPK_integer,
                   __isave: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlacon_(__n: *mut __CLPK_integer, __v: *mut __CLPK_doublereal,
                   __x: *mut __CLPK_doublereal, __isgn: *mut __CLPK_integer,
                   __est: *mut __CLPK_doublereal, __kase: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlacpy_(__uplo: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dladiv_(__a: *mut __CLPK_doublereal, __b: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal,
                   __d__: *mut __CLPK_doublereal, __p: *mut __CLPK_doublereal,
                   __q: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dlae2_(__a: *mut __CLPK_doublereal, __b: *mut __CLPK_doublereal,
                  __c__: *mut __CLPK_doublereal,
                  __rt1: *mut __CLPK_doublereal,
                  __rt2: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dlaebz_(__ijob: *mut __CLPK_integer, __nitmax: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __mmax: *mut __CLPK_integer,
                   __minp: *mut __CLPK_integer, __nbmin: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_doublereal,
                   __reltol: *mut __CLPK_doublereal,
                   __pivmin: *mut __CLPK_doublereal,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __e2: *mut __CLPK_doublereal, __nval: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal, __mout: *mut __CLPK_integer,
                   __nab: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlaed0_(__icompq: *mut __CLPK_integer, __qsiz: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublereal, __q: *mut __CLPK_doublereal,
                   __ldq: *mut __CLPK_integer,
                   __qstore: *mut __CLPK_doublereal,
                   __ldqs: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlaed1_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __q: *mut __CLPK_doublereal, __ldq: *mut __CLPK_integer,
                   __indxq: *mut __CLPK_integer,
                   __rho: *mut __CLPK_doublereal,
                   __cutpnt: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlaed2_(__k: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __n1: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __q: *mut __CLPK_doublereal, __ldq: *mut __CLPK_integer,
                   __indxq: *mut __CLPK_integer,
                   __rho: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublereal,
                   __dlamda: *mut __CLPK_doublereal,
                   __w: *mut __CLPK_doublereal, __q2: *mut __CLPK_doublereal,
                   __indx: *mut __CLPK_integer, __indxc: *mut __CLPK_integer,
                   __indxp: *mut __CLPK_integer,
                   __coltyp: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlaed3_(__k: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __n1: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __q: *mut __CLPK_doublereal, __ldq: *mut __CLPK_integer,
                   __rho: *mut __CLPK_doublereal,
                   __dlamda: *mut __CLPK_doublereal,
                   __q2: *mut __CLPK_doublereal, __indx: *mut __CLPK_integer,
                   __ctot: *mut __CLPK_integer, __w: *mut __CLPK_doublereal,
                   __s: *mut __CLPK_doublereal, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlaed4_(__n: *mut __CLPK_integer, __i__: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublereal,
                   __delta: *mut __CLPK_doublereal,
                   __rho: *mut __CLPK_doublereal,
                   __dlam: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlaed5_(__i__: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublereal,
                   __delta: *mut __CLPK_doublereal,
                   __rho: *mut __CLPK_doublereal,
                   __dlam: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dlaed6_(__kniter: *mut __CLPK_integer,
                   __orgati: *mut __CLPK_logical,
                   __rho: *mut __CLPK_doublereal,
                   __d__: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublereal,
                   __finit: *mut __CLPK_doublereal,
                   __tau: *mut __CLPK_doublereal, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlaed7_(__icompq: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __qsiz: *mut __CLPK_integer, __tlvls: *mut __CLPK_integer,
                   __curlvl: *mut __CLPK_integer,
                   __curpbm: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __q: *mut __CLPK_doublereal,
                   __ldq: *mut __CLPK_integer, __indxq: *mut __CLPK_integer,
                   __rho: *mut __CLPK_doublereal,
                   __cutpnt: *mut __CLPK_integer,
                   __qstore: *mut __CLPK_doublereal,
                   __qptr: *mut __CLPK_integer, __prmptr: *mut __CLPK_integer,
                   __perm: *mut __CLPK_integer, __givptr: *mut __CLPK_integer,
                   __givcol: *mut __CLPK_integer,
                   __givnum: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlaed8_(__icompq: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __qsiz: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __q: *mut __CLPK_doublereal,
                   __ldq: *mut __CLPK_integer, __indxq: *mut __CLPK_integer,
                   __rho: *mut __CLPK_doublereal,
                   __cutpnt: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublereal,
                   __dlamda: *mut __CLPK_doublereal,
                   __q2: *mut __CLPK_doublereal, __ldq2: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal, __perm: *mut __CLPK_integer,
                   __givptr: *mut __CLPK_integer,
                   __givcol: *mut __CLPK_integer,
                   __givnum: *mut __CLPK_doublereal,
                   __indxp: *mut __CLPK_integer, __indx: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlaed9_(__k: *mut __CLPK_integer, __kstart: *mut __CLPK_integer,
                   __kstop: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __q: *mut __CLPK_doublereal,
                   __ldq: *mut __CLPK_integer, __rho: *mut __CLPK_doublereal,
                   __dlamda: *mut __CLPK_doublereal,
                   __w: *mut __CLPK_doublereal, __s: *mut __CLPK_doublereal,
                   __lds: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlaeda_(__n: *mut __CLPK_integer, __tlvls: *mut __CLPK_integer,
                   __curlvl: *mut __CLPK_integer,
                   __curpbm: *mut __CLPK_integer,
                   __prmptr: *mut __CLPK_integer, __perm: *mut __CLPK_integer,
                   __givptr: *mut __CLPK_integer,
                   __givcol: *mut __CLPK_integer,
                   __givnum: *mut __CLPK_doublereal,
                   __q: *mut __CLPK_doublereal, __qptr: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublereal,
                   __ztemp: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlaein_(__rightv: *mut __CLPK_logical,
                   __noinit: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __h__: *mut __CLPK_doublereal, __ldh: *mut __CLPK_integer,
                   __wr: *mut __CLPK_doublereal, __wi: *mut __CLPK_doublereal,
                   __vr: *mut __CLPK_doublereal, __vi: *mut __CLPK_doublereal,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __eps3: *mut __CLPK_doublereal,
                   __smlnum: *mut __CLPK_doublereal,
                   __bignum: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlaev2_(__a: *mut __CLPK_doublereal, __b: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal,
                   __rt1: *mut __CLPK_doublereal,
                   __rt2: *mut __CLPK_doublereal,
                   __cs1: *mut __CLPK_doublereal,
                   __sn1: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dlaexc_(__wantq: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __t: *mut __CLPK_doublereal, __ldt: *mut __CLPK_integer,
                   __q: *mut __CLPK_doublereal, __ldq: *mut __CLPK_integer,
                   __j1: *mut __CLPK_integer, __n1: *mut __CLPK_integer,
                   __n2: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlag2_(__a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                  __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                  __safmin: *mut __CLPK_doublereal,
                  __scale1: *mut __CLPK_doublereal,
                  __scale2: *mut __CLPK_doublereal,
                  __wr1: *mut __CLPK_doublereal,
                  __wr2: *mut __CLPK_doublereal, __wi: *mut __CLPK_doublereal)
     -> ::libc::c_int;
    pub fn dlag2s_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __sa: *mut __CLPK_real, __ldsa: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlags2_(__upper: *mut __CLPK_logical, __a1: *mut __CLPK_doublereal,
                   __a2: *mut __CLPK_doublereal, __a3: *mut __CLPK_doublereal,
                   __b1: *mut __CLPK_doublereal, __b2: *mut __CLPK_doublereal,
                   __b3: *mut __CLPK_doublereal,
                   __csu: *mut __CLPK_doublereal,
                   __snu: *mut __CLPK_doublereal,
                   __csv: *mut __CLPK_doublereal,
                   __snv: *mut __CLPK_doublereal,
                   __csq: *mut __CLPK_doublereal,
                   __snq: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dlagtf_(__n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lambda: *mut __CLPK_doublereal,
                   __b: *mut __CLPK_doublereal, __c__: *mut __CLPK_doublereal,
                   __tol: *mut __CLPK_doublereal,
                   __d__: *mut __CLPK_doublereal, __in: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlagtm_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __alpha: *mut __CLPK_doublereal,
                   __dl: *mut __CLPK_doublereal,
                   __d__: *mut __CLPK_doublereal,
                   __du: *mut __CLPK_doublereal, __x: *mut __CLPK_doublereal,
                   __ldx: *mut __CLPK_integer, __beta: *mut __CLPK_doublereal,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlagts_(__job: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __b: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal,
                   __d__: *mut __CLPK_doublereal, __in: *mut __CLPK_integer,
                   __y: *mut __CLPK_doublereal, __tol: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlagv2_(__a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __alphar: *mut __CLPK_doublereal,
                   __alphai: *mut __CLPK_doublereal,
                   __beta: *mut __CLPK_doublereal,
                   __csl: *mut __CLPK_doublereal,
                   __snl: *mut __CLPK_doublereal,
                   __csr: *mut __CLPK_doublereal,
                   __snr: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dlahqr_(__wantt: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __h__: *mut __CLPK_doublereal,
                   __ldh: *mut __CLPK_integer, __wr: *mut __CLPK_doublereal,
                   __wi: *mut __CLPK_doublereal, __iloz: *mut __CLPK_integer,
                   __ihiz: *mut __CLPK_integer, __z__: *mut __CLPK_doublereal,
                   __ldz: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlahr2_(__n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __nb: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __t: *mut __CLPK_doublereal, __ldt: *mut __CLPK_integer,
                   __y: *mut __CLPK_doublereal, __ldy: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlahrd_(__n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __nb: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __t: *mut __CLPK_doublereal, __ldt: *mut __CLPK_integer,
                   __y: *mut __CLPK_doublereal, __ldy: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlaic1_(__job: *mut __CLPK_integer, __j: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublereal,
                   __sest: *mut __CLPK_doublereal,
                   __w: *mut __CLPK_doublereal,
                   __gamma: *mut __CLPK_doublereal,
                   __sestpr: *mut __CLPK_doublereal,
                   __s: *mut __CLPK_doublereal, __c__: *mut __CLPK_doublereal)
     -> ::libc::c_int;
    pub fn dlaisnan_(__din1: *mut __CLPK_doublereal,
                     __din2: *mut __CLPK_doublereal) -> __CLPK_logical;
    pub fn dlaln2_(__ltrans: *mut __CLPK_logical, __na: *mut __CLPK_integer,
                   __nw: *mut __CLPK_integer, __smin: *mut __CLPK_doublereal,
                   __ca: *mut __CLPK_doublereal, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __d1: *mut __CLPK_doublereal,
                   __d2: *mut __CLPK_doublereal, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __wr: *mut __CLPK_doublereal,
                   __wi: *mut __CLPK_doublereal, __x: *mut __CLPK_doublereal,
                   __ldx: *mut __CLPK_integer,
                   __scale: *mut __CLPK_doublereal,
                   __xnorm: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlals0_(__icompq: *mut __CLPK_integer, __nl: *mut __CLPK_integer,
                   __nr: *mut __CLPK_integer, __sqre: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __bx: *mut __CLPK_doublereal,
                   __ldbx: *mut __CLPK_integer, __perm: *mut __CLPK_integer,
                   __givptr: *mut __CLPK_integer,
                   __givcol: *mut __CLPK_integer,
                   __ldgcol: *mut __CLPK_integer,
                   __givnum: *mut __CLPK_doublereal,
                   __ldgnum: *mut __CLPK_integer,
                   __poles: *mut __CLPK_doublereal,
                   __difl: *mut __CLPK_doublereal,
                   __difr: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublereal, __k: *mut __CLPK_integer,
                   __c__: *mut __CLPK_doublereal, __s: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlalsa_(__icompq: *mut __CLPK_integer,
                   __smlsiz: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __bx: *mut __CLPK_doublereal,
                   __ldbx: *mut __CLPK_integer, __u: *mut __CLPK_doublereal,
                   __ldu: *mut __CLPK_integer, __vt: *mut __CLPK_doublereal,
                   __k: *mut __CLPK_integer, __difl: *mut __CLPK_doublereal,
                   __difr: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublereal,
                   __poles: *mut __CLPK_doublereal,
                   __givptr: *mut __CLPK_integer,
                   __givcol: *mut __CLPK_integer,
                   __ldgcol: *mut __CLPK_integer, __perm: *mut __CLPK_integer,
                   __givnum: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal, __s: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlalsd_(__uplo: *mut ::libc::c_char, __smlsiz: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __rank: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlamrg_(__n1: *mut __CLPK_integer, __n2: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __dtrd1: *mut __CLPK_integer,
                   __dtrd2: *mut __CLPK_integer, __index: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlaneg_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __lld: *mut __CLPK_doublereal,
                   __sigma: *mut __CLPK_doublereal,
                   __pivmin: *mut __CLPK_doublereal,
                   __r__: *mut __CLPK_integer) -> __CLPK_integer;
    pub fn dlangb_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublereal, __ldab: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal) -> __CLPK_doublereal;
    pub fn dlange_(__norm: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __work: *mut __CLPK_doublereal)
     -> __CLPK_doublereal;
    pub fn dlangt_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __dl: *mut __CLPK_doublereal,
                   __d__: *mut __CLPK_doublereal,
                   __du: *mut __CLPK_doublereal) -> __CLPK_doublereal;
    pub fn dlanhs_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal) -> __CLPK_doublereal;
    pub fn dlansb_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublereal, __ldab: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal) -> __CLPK_doublereal;
    pub fn dlansf_(__norm: *mut ::libc::c_char, __transr: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal) -> __CLPK_doublereal;
    pub fn dlansp_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal) -> __CLPK_doublereal;
    pub fn dlanst_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal)
     -> __CLPK_doublereal;
    pub fn dlansy_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __work: *mut __CLPK_doublereal)
     -> __CLPK_doublereal;
    pub fn dlantb_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __ab: *mut __CLPK_doublereal,
                   __ldab: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal) -> __CLPK_doublereal;
    pub fn dlantp_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal) -> __CLPK_doublereal;
    pub fn dlantr_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __work: *mut __CLPK_doublereal)
     -> __CLPK_doublereal;
    pub fn dlanv2_(__a: *mut __CLPK_doublereal, __b: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal,
                   __d__: *mut __CLPK_doublereal,
                   __rt1r: *mut __CLPK_doublereal,
                   __rt1i: *mut __CLPK_doublereal,
                   __rt2r: *mut __CLPK_doublereal,
                   __rt2i: *mut __CLPK_doublereal,
                   __cs: *mut __CLPK_doublereal, __sn: *mut __CLPK_doublereal)
     -> ::libc::c_int;
    pub fn dlapll_(__n: *mut __CLPK_integer, __x: *mut __CLPK_doublereal,
                   __incx: *mut __CLPK_integer, __y: *mut __CLPK_doublereal,
                   __incy: *mut __CLPK_integer,
                   __ssmin: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dlapmt_(__forwrd: *mut __CLPK_logical, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __x: *mut __CLPK_doublereal,
                   __ldx: *mut __CLPK_integer, __k: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlapy2_(__x: *mut __CLPK_doublereal, __y: *mut __CLPK_doublereal)
     -> __CLPK_doublereal;
    pub fn dlapy3_(__x: *mut __CLPK_doublereal, __y: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublereal) -> __CLPK_doublereal;
    pub fn dlaqgb_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublereal, __ldab: *mut __CLPK_integer,
                   __r__: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal,
                   __rowcnd: *mut __CLPK_doublereal,
                   __colcnd: *mut __CLPK_doublereal,
                   __amax: *mut __CLPK_doublereal,
                   __equed: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn dlaqge_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __r__: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal,
                   __rowcnd: *mut __CLPK_doublereal,
                   __colcnd: *mut __CLPK_doublereal,
                   __amax: *mut __CLPK_doublereal,
                   __equed: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn dlaqp2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __offset: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __jpvt: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublereal,
                   __vn1: *mut __CLPK_doublereal,
                   __vn2: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dlaqps_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __offset: *mut __CLPK_integer, __nb: *mut __CLPK_integer,
                   __kb: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __jpvt: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublereal,
                   __vn1: *mut __CLPK_doublereal,
                   __vn2: *mut __CLPK_doublereal,
                   __auxv: *mut __CLPK_doublereal,
                   __f: *mut __CLPK_doublereal, __ldf: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlaqr0_(__wantt: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __h__: *mut __CLPK_doublereal,
                   __ldh: *mut __CLPK_integer, __wr: *mut __CLPK_doublereal,
                   __wi: *mut __CLPK_doublereal, __iloz: *mut __CLPK_integer,
                   __ihiz: *mut __CLPK_integer, __z__: *mut __CLPK_doublereal,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlaqr1_(__n: *mut __CLPK_integer, __h__: *mut __CLPK_doublereal,
                   __ldh: *mut __CLPK_integer, __sr1: *mut __CLPK_doublereal,
                   __si1: *mut __CLPK_doublereal,
                   __sr2: *mut __CLPK_doublereal,
                   __si2: *mut __CLPK_doublereal, __v: *mut __CLPK_doublereal)
     -> ::libc::c_int;
    pub fn dlaqr2_(__wantt: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __ktop: *mut __CLPK_integer,
                   __kbot: *mut __CLPK_integer, __nw: *mut __CLPK_integer,
                   __h__: *mut __CLPK_doublereal, __ldh: *mut __CLPK_integer,
                   __iloz: *mut __CLPK_integer, __ihiz: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublereal, __ldz: *mut __CLPK_integer,
                   __ns: *mut __CLPK_integer, __nd: *mut __CLPK_integer,
                   __sr: *mut __CLPK_doublereal, __si: *mut __CLPK_doublereal,
                   __v: *mut __CLPK_doublereal, __ldv: *mut __CLPK_integer,
                   __nh: *mut __CLPK_integer, __t: *mut __CLPK_doublereal,
                   __ldt: *mut __CLPK_integer, __nv: *mut __CLPK_integer,
                   __wv: *mut __CLPK_doublereal, __ldwv: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlaqr3_(__wantt: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __ktop: *mut __CLPK_integer,
                   __kbot: *mut __CLPK_integer, __nw: *mut __CLPK_integer,
                   __h__: *mut __CLPK_doublereal, __ldh: *mut __CLPK_integer,
                   __iloz: *mut __CLPK_integer, __ihiz: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublereal, __ldz: *mut __CLPK_integer,
                   __ns: *mut __CLPK_integer, __nd: *mut __CLPK_integer,
                   __sr: *mut __CLPK_doublereal, __si: *mut __CLPK_doublereal,
                   __v: *mut __CLPK_doublereal, __ldv: *mut __CLPK_integer,
                   __nh: *mut __CLPK_integer, __t: *mut __CLPK_doublereal,
                   __ldt: *mut __CLPK_integer, __nv: *mut __CLPK_integer,
                   __wv: *mut __CLPK_doublereal, __ldwv: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlaqr4_(__wantt: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __h__: *mut __CLPK_doublereal,
                   __ldh: *mut __CLPK_integer, __wr: *mut __CLPK_doublereal,
                   __wi: *mut __CLPK_doublereal, __iloz: *mut __CLPK_integer,
                   __ihiz: *mut __CLPK_integer, __z__: *mut __CLPK_doublereal,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlaqr5_(__wantt: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __kacc22: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __ktop: *mut __CLPK_integer, __kbot: *mut __CLPK_integer,
                   __nshfts: *mut __CLPK_integer,
                   __sr: *mut __CLPK_doublereal, __si: *mut __CLPK_doublereal,
                   __h__: *mut __CLPK_doublereal, __ldh: *mut __CLPK_integer,
                   __iloz: *mut __CLPK_integer, __ihiz: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublereal, __ldz: *mut __CLPK_integer,
                   __v: *mut __CLPK_doublereal, __ldv: *mut __CLPK_integer,
                   __u: *mut __CLPK_doublereal, __ldu: *mut __CLPK_integer,
                   __nv: *mut __CLPK_integer, __wv: *mut __CLPK_doublereal,
                   __ldwv: *mut __CLPK_integer, __nh: *mut __CLPK_integer,
                   __wh: *mut __CLPK_doublereal, __ldwh: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlaqsb_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_doublereal,
                   __ldab: *mut __CLPK_integer, __s: *mut __CLPK_doublereal,
                   __scond: *mut __CLPK_doublereal,
                   __amax: *mut __CLPK_doublereal,
                   __equed: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn dlaqsp_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublereal, __s: *mut __CLPK_doublereal,
                   __scond: *mut __CLPK_doublereal,
                   __amax: *mut __CLPK_doublereal,
                   __equed: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn dlaqsy_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __s: *mut __CLPK_doublereal,
                   __scond: *mut __CLPK_doublereal,
                   __amax: *mut __CLPK_doublereal,
                   __equed: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn dlaqtr_(__ltran: *mut __CLPK_logical,
                   __l__CLPK_real: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __t: *mut __CLPK_doublereal,
                   __ldt: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __w: *mut __CLPK_doublereal,
                   __scale: *mut __CLPK_doublereal,
                   __x: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlar1v_(__n: *mut __CLPK_integer, __b1: *mut __CLPK_integer,
                   __bn: *mut __CLPK_integer,
                   __lambda: *mut __CLPK_doublereal,
                   __d__: *mut __CLPK_doublereal, __l: *mut __CLPK_doublereal,
                   __ld: *mut __CLPK_doublereal,
                   __lld: *mut __CLPK_doublereal,
                   __pivmin: *mut __CLPK_doublereal,
                   __gaptol: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublereal,
                   __wantnc: *mut __CLPK_logical,
                   __negcnt: *mut __CLPK_integer,
                   __ztz: *mut __CLPK_doublereal,
                   __mingma: *mut __CLPK_doublereal,
                   __r__: *mut __CLPK_integer, __isuppz: *mut __CLPK_integer,
                   __nrminv: *mut __CLPK_doublereal,
                   __resid: *mut __CLPK_doublereal,
                   __rqcorr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dlar2v_(__n: *mut __CLPK_integer, __x: *mut __CLPK_doublereal,
                   __y: *mut __CLPK_doublereal, __z__: *mut __CLPK_doublereal,
                   __incx: *mut __CLPK_integer, __c__: *mut __CLPK_doublereal,
                   __s: *mut __CLPK_doublereal, __incc: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlarf_(__side: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                  __n: *mut __CLPK_integer, __v: *mut __CLPK_doublereal,
                  __incv: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                  __c__: *mut __CLPK_doublereal, __ldc: *mut __CLPK_integer,
                  __work: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dlarfb_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __direct: *mut ::libc::c_char,
                   __storev: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __v: *mut __CLPK_doublereal, __ldv: *mut __CLPK_integer,
                   __t: *mut __CLPK_doublereal, __ldt: *mut __CLPK_integer,
                   __c__: *mut __CLPK_doublereal, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __ldwork: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlarfg_(__n: *mut __CLPK_integer, __alpha: *mut __CLPK_doublereal,
                   __x: *mut __CLPK_doublereal, __incx: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dlarfp_(__n: *mut __CLPK_integer, __alpha: *mut __CLPK_doublereal,
                   __x: *mut __CLPK_doublereal, __incx: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dlarft_(__direct: *mut ::libc::c_char,
                   __storev: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __v: *mut __CLPK_doublereal,
                   __ldv: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __t: *mut __CLPK_doublereal, __ldt: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlarfx_(__side: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __v: *mut __CLPK_doublereal,
                   __tau: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dlargv_(__n: *mut __CLPK_integer, __x: *mut __CLPK_doublereal,
                   __incx: *mut __CLPK_integer, __y: *mut __CLPK_doublereal,
                   __incy: *mut __CLPK_integer, __c__: *mut __CLPK_doublereal,
                   __incc: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlarnv_(__idist: *mut __CLPK_integer, __iseed: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __x: *mut __CLPK_doublereal)
     -> ::libc::c_int;
    pub fn dlarra_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublereal, __e2: *mut __CLPK_doublereal,
                   __spltol: *mut __CLPK_doublereal,
                   __tnrm: *mut __CLPK_doublereal,
                   __nsplit: *mut __CLPK_integer,
                   __isplit: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlarrb_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __lld: *mut __CLPK_doublereal,
                   __ifirst: *mut __CLPK_integer,
                   __ilast: *mut __CLPK_integer,
                   __rtol1: *mut __CLPK_doublereal,
                   __rtol2: *mut __CLPK_doublereal,
                   __offset: *mut __CLPK_integer, __w: *mut __CLPK_doublereal,
                   __wgap: *mut __CLPK_doublereal,
                   __werr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer,
                   __pivmin: *mut __CLPK_doublereal,
                   __spdiam: *mut __CLPK_doublereal,
                   __twist: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlarrc_(__jobt: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __vl: *mut __CLPK_doublereal, __vu: *mut __CLPK_doublereal,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __pivmin: *mut __CLPK_doublereal,
                   __eigcnt: *mut __CLPK_integer, __lcnt: *mut __CLPK_integer,
                   __rcnt: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlarrd_(__range: *mut ::libc::c_char, __order: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __vl: *mut __CLPK_doublereal,
                   __vu: *mut __CLPK_doublereal, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer, __gers: *mut __CLPK_doublereal,
                   __reltol: *mut __CLPK_doublereal,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __e2: *mut __CLPK_doublereal,
                   __pivmin: *mut __CLPK_doublereal,
                   __nsplit: *mut __CLPK_integer,
                   __isplit: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal,
                   __werr: *mut __CLPK_doublereal,
                   __wl: *mut __CLPK_doublereal, __wu: *mut __CLPK_doublereal,
                   __iblock: *mut __CLPK_integer,
                   __indexw: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlarre_(__range: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __vl: *mut __CLPK_doublereal, __vu: *mut __CLPK_doublereal,
                   __il: *mut __CLPK_integer, __iu: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __e2: *mut __CLPK_doublereal,
                   __rtol1: *mut __CLPK_doublereal,
                   __rtol2: *mut __CLPK_doublereal,
                   __spltol: *mut __CLPK_doublereal,
                   __nsplit: *mut __CLPK_integer,
                   __isplit: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal,
                   __werr: *mut __CLPK_doublereal,
                   __wgap: *mut __CLPK_doublereal,
                   __iblock: *mut __CLPK_integer,
                   __indexw: *mut __CLPK_integer,
                   __gers: *mut __CLPK_doublereal,
                   __pivmin: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlarrf_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __l: *mut __CLPK_doublereal, __ld: *mut __CLPK_doublereal,
                   __clstrt: *mut __CLPK_integer,
                   __clend: *mut __CLPK_integer, __w: *mut __CLPK_doublereal,
                   __wgap: *mut __CLPK_doublereal,
                   __werr: *mut __CLPK_doublereal,
                   __spdiam: *mut __CLPK_doublereal,
                   __clgapl: *mut __CLPK_doublereal,
                   __clgapr: *mut __CLPK_doublereal,
                   __pivmin: *mut __CLPK_doublereal,
                   __sigma: *mut __CLPK_doublereal,
                   __dplus: *mut __CLPK_doublereal,
                   __lplus: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlarrj_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e2: *mut __CLPK_doublereal,
                   __ifirst: *mut __CLPK_integer,
                   __ilast: *mut __CLPK_integer,
                   __rtol: *mut __CLPK_doublereal,
                   __offset: *mut __CLPK_integer, __w: *mut __CLPK_doublereal,
                   __werr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer,
                   __pivmin: *mut __CLPK_doublereal,
                   __spdiam: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlarrk_(__n: *mut __CLPK_integer, __iw: *mut __CLPK_integer,
                   __gl: *mut __CLPK_doublereal, __gu: *mut __CLPK_doublereal,
                   __d__: *mut __CLPK_doublereal,
                   __e2: *mut __CLPK_doublereal,
                   __pivmin: *mut __CLPK_doublereal,
                   __reltol: *mut __CLPK_doublereal,
                   __w: *mut __CLPK_doublereal,
                   __werr: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlarrr_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublereal, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlarrv_(__n: *mut __CLPK_integer, __vl: *mut __CLPK_doublereal,
                   __vu: *mut __CLPK_doublereal,
                   __d__: *mut __CLPK_doublereal, __l: *mut __CLPK_doublereal,
                   __pivmin: *mut __CLPK_doublereal,
                   __isplit: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __dol: *mut __CLPK_integer, __dou: *mut __CLPK_integer,
                   __minrgp: *mut __CLPK_doublereal,
                   __rtol1: *mut __CLPK_doublereal,
                   __rtol2: *mut __CLPK_doublereal,
                   __w: *mut __CLPK_doublereal,
                   __werr: *mut __CLPK_doublereal,
                   __wgap: *mut __CLPK_doublereal,
                   __iblock: *mut __CLPK_integer,
                   __indexw: *mut __CLPK_integer,
                   __gers: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublereal, __ldz: *mut __CLPK_integer,
                   __isuppz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlarscl2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                     __d__: *mut __CLPK_doublereal,
                     __x: *mut __CLPK_doublereal, __ldx: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlartg_(__f: *mut __CLPK_doublereal, __g: *mut __CLPK_doublereal,
                   __cs: *mut __CLPK_doublereal, __sn: *mut __CLPK_doublereal,
                   __r__: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dlartv_(__n: *mut __CLPK_integer, __x: *mut __CLPK_doublereal,
                   __incx: *mut __CLPK_integer, __y: *mut __CLPK_doublereal,
                   __incy: *mut __CLPK_integer, __c__: *mut __CLPK_doublereal,
                   __s: *mut __CLPK_doublereal, __incc: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlaruv_(__iseed: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dlarz_(__side: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                  __n: *mut __CLPK_integer, __l: *mut __CLPK_integer,
                  __v: *mut __CLPK_doublereal, __incv: *mut __CLPK_integer,
                  __tau: *mut __CLPK_doublereal,
                  __c__: *mut __CLPK_doublereal, __ldc: *mut __CLPK_integer,
                  __work: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dlarzb_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __direct: *mut ::libc::c_char,
                   __storev: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __l: *mut __CLPK_integer, __v: *mut __CLPK_doublereal,
                   __ldv: *mut __CLPK_integer, __t: *mut __CLPK_doublereal,
                   __ldt: *mut __CLPK_integer, __c__: *mut __CLPK_doublereal,
                   __ldc: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __ldwork: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlarzt_(__direct: *mut ::libc::c_char,
                   __storev: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __v: *mut __CLPK_doublereal,
                   __ldv: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __t: *mut __CLPK_doublereal, __ldt: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlas2_(__f: *mut __CLPK_doublereal, __g: *mut __CLPK_doublereal,
                  __h__: *mut __CLPK_doublereal,
                  __ssmin: *mut __CLPK_doublereal,
                  __ssmax: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dlascl_(__type__: *mut ::libc::c_char, __kl: *mut __CLPK_integer,
                   __ku: *mut __CLPK_integer, __cfrom: *mut __CLPK_doublereal,
                   __cto: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlascl2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                    __d__: *mut __CLPK_doublereal,
                    __x: *mut __CLPK_doublereal, __ldx: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlasd0_(__n: *mut __CLPK_integer, __sqre: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __u: *mut __CLPK_doublereal, __ldu: *mut __CLPK_integer,
                   __vt: *mut __CLPK_doublereal, __ldvt: *mut __CLPK_integer,
                   __smlsiz: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlasd1_(__nl: *mut __CLPK_integer, __nr: *mut __CLPK_integer,
                   __sqre: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __alpha: *mut __CLPK_doublereal,
                   __beta: *mut __CLPK_doublereal,
                   __u: *mut __CLPK_doublereal, __ldu: *mut __CLPK_integer,
                   __vt: *mut __CLPK_doublereal, __ldvt: *mut __CLPK_integer,
                   __idxq: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlasd2_(__nl: *mut __CLPK_integer, __nr: *mut __CLPK_integer,
                   __sqre: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublereal,
                   __alpha: *mut __CLPK_doublereal,
                   __beta: *mut __CLPK_doublereal,
                   __u: *mut __CLPK_doublereal, __ldu: *mut __CLPK_integer,
                   __vt: *mut __CLPK_doublereal, __ldvt: *mut __CLPK_integer,
                   __dsigma: *mut __CLPK_doublereal,
                   __u2: *mut __CLPK_doublereal, __ldu2: *mut __CLPK_integer,
                   __vt2: *mut __CLPK_doublereal,
                   __ldvt2: *mut __CLPK_integer, __idxp: *mut __CLPK_integer,
                   __idx: *mut __CLPK_integer, __idxc: *mut __CLPK_integer,
                   __idxq: *mut __CLPK_integer, __coltyp: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlasd3_(__nl: *mut __CLPK_integer, __nr: *mut __CLPK_integer,
                   __sqre: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __q: *mut __CLPK_doublereal,
                   __ldq: *mut __CLPK_integer,
                   __dsigma: *mut __CLPK_doublereal,
                   __u: *mut __CLPK_doublereal, __ldu: *mut __CLPK_integer,
                   __u2: *mut __CLPK_doublereal, __ldu2: *mut __CLPK_integer,
                   __vt: *mut __CLPK_doublereal, __ldvt: *mut __CLPK_integer,
                   __vt2: *mut __CLPK_doublereal,
                   __ldvt2: *mut __CLPK_integer, __idxc: *mut __CLPK_integer,
                   __ctot: *mut __CLPK_integer, __z__: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlasd4_(__n: *mut __CLPK_integer, __i__: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublereal,
                   __delta: *mut __CLPK_doublereal,
                   __rho: *mut __CLPK_doublereal,
                   __sigma: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlasd5_(__i__: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublereal,
                   __delta: *mut __CLPK_doublereal,
                   __rho: *mut __CLPK_doublereal,
                   __dsigma: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dlasd6_(__icompq: *mut __CLPK_integer, __nl: *mut __CLPK_integer,
                   __nr: *mut __CLPK_integer, __sqre: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal,
                   __vf: *mut __CLPK_doublereal, __vl: *mut __CLPK_doublereal,
                   __alpha: *mut __CLPK_doublereal,
                   __beta: *mut __CLPK_doublereal,
                   __idxq: *mut __CLPK_integer, __perm: *mut __CLPK_integer,
                   __givptr: *mut __CLPK_integer,
                   __givcol: *mut __CLPK_integer,
                   __ldgcol: *mut __CLPK_integer,
                   __givnum: *mut __CLPK_doublereal,
                   __ldgnum: *mut __CLPK_integer,
                   __poles: *mut __CLPK_doublereal,
                   __difl: *mut __CLPK_doublereal,
                   __difr: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublereal, __k: *mut __CLPK_integer,
                   __c__: *mut __CLPK_doublereal, __s: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlasd7_(__icompq: *mut __CLPK_integer, __nl: *mut __CLPK_integer,
                   __nr: *mut __CLPK_integer, __sqre: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublereal,
                   __zw: *mut __CLPK_doublereal, __vf: *mut __CLPK_doublereal,
                   __vfw: *mut __CLPK_doublereal,
                   __vl: *mut __CLPK_doublereal,
                   __vlw: *mut __CLPK_doublereal,
                   __alpha: *mut __CLPK_doublereal,
                   __beta: *mut __CLPK_doublereal,
                   __dsigma: *mut __CLPK_doublereal,
                   __idx: *mut __CLPK_integer, __idxp: *mut __CLPK_integer,
                   __idxq: *mut __CLPK_integer, __perm: *mut __CLPK_integer,
                   __givptr: *mut __CLPK_integer,
                   __givcol: *mut __CLPK_integer,
                   __ldgcol: *mut __CLPK_integer,
                   __givnum: *mut __CLPK_doublereal,
                   __ldgnum: *mut __CLPK_integer,
                   __c__: *mut __CLPK_doublereal, __s: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlasd8_(__icompq: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublereal,
                   __vf: *mut __CLPK_doublereal, __vl: *mut __CLPK_doublereal,
                   __difl: *mut __CLPK_doublereal,
                   __difr: *mut __CLPK_doublereal,
                   __lddifr: *mut __CLPK_integer,
                   __dsigma: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlasda_(__icompq: *mut __CLPK_integer,
                   __smlsiz: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __sqre: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublereal, __u: *mut __CLPK_doublereal,
                   __ldu: *mut __CLPK_integer, __vt: *mut __CLPK_doublereal,
                   __k: *mut __CLPK_integer, __difl: *mut __CLPK_doublereal,
                   __difr: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublereal,
                   __poles: *mut __CLPK_doublereal,
                   __givptr: *mut __CLPK_integer,
                   __givcol: *mut __CLPK_integer,
                   __ldgcol: *mut __CLPK_integer, __perm: *mut __CLPK_integer,
                   __givnum: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal, __s: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlasdq_(__uplo: *mut ::libc::c_char, __sqre: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __ncvt: *mut __CLPK_integer,
                   __nru: *mut __CLPK_integer, __ncc: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __vt: *mut __CLPK_doublereal, __ldvt: *mut __CLPK_integer,
                   __u: *mut __CLPK_doublereal, __ldu: *mut __CLPK_integer,
                   __c__: *mut __CLPK_doublereal, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlasdt_(__n: *mut __CLPK_integer, __lvl: *mut __CLPK_integer,
                   __nd: *mut __CLPK_integer, __inode: *mut __CLPK_integer,
                   __ndiml: *mut __CLPK_integer, __ndimr: *mut __CLPK_integer,
                   __msub: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlaset_(__uplo: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __alpha: *mut __CLPK_doublereal,
                   __beta: *mut __CLPK_doublereal,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlasq1_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlasq2_(__n: *mut __CLPK_integer, __z__: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlasq3_(__i0: *mut __CLPK_integer, __n0: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublereal, __pp: *mut __CLPK_integer,
                   __dmin__: *mut __CLPK_doublereal,
                   __sigma: *mut __CLPK_doublereal,
                   __desig: *mut __CLPK_doublereal,
                   __qmax: *mut __CLPK_doublereal,
                   __nfail: *mut __CLPK_integer, __iter: *mut __CLPK_integer,
                   __ndiv: *mut __CLPK_integer, __ieee: *mut __CLPK_logical,
                   __ttype: *mut __CLPK_integer,
                   __dmin1: *mut __CLPK_doublereal,
                   __dmin2: *mut __CLPK_doublereal,
                   __dn: *mut __CLPK_doublereal,
                   __dn1: *mut __CLPK_doublereal,
                   __dn2: *mut __CLPK_doublereal, __g: *mut __CLPK_doublereal,
                   __tau: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dlasq4_(__i0: *mut __CLPK_integer, __n0: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublereal, __pp: *mut __CLPK_integer,
                   __n0in: *mut __CLPK_integer,
                   __dmin__: *mut __CLPK_doublereal,
                   __dmin1: *mut __CLPK_doublereal,
                   __dmin2: *mut __CLPK_doublereal,
                   __dn: *mut __CLPK_doublereal,
                   __dn1: *mut __CLPK_doublereal,
                   __dn2: *mut __CLPK_doublereal,
                   __tau: *mut __CLPK_doublereal,
                   __ttype: *mut __CLPK_integer, __g: *mut __CLPK_doublereal)
     -> ::libc::c_int;
    pub fn dlasq5_(__i0: *mut __CLPK_integer, __n0: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublereal, __pp: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublereal,
                   __dmin__: *mut __CLPK_doublereal,
                   __dmin1: *mut __CLPK_doublereal,
                   __dmin2: *mut __CLPK_doublereal,
                   __dn: *mut __CLPK_doublereal,
                   __dnm1: *mut __CLPK_doublereal,
                   __dnm2: *mut __CLPK_doublereal,
                   __ieee: *mut __CLPK_logical) -> ::libc::c_int;
    pub fn dlasq6_(__i0: *mut __CLPK_integer, __n0: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublereal, __pp: *mut __CLPK_integer,
                   __dmin__: *mut __CLPK_doublereal,
                   __dmin1: *mut __CLPK_doublereal,
                   __dmin2: *mut __CLPK_doublereal,
                   __dn: *mut __CLPK_doublereal,
                   __dnm1: *mut __CLPK_doublereal,
                   __dnm2: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dlasr_(__side: *mut ::libc::c_char, __pivot: *mut ::libc::c_char,
                  __direct: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                  __n: *mut __CLPK_integer, __c__: *mut __CLPK_doublereal,
                  __s: *mut __CLPK_doublereal, __a: *mut __CLPK_doublereal,
                  __lda: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlasrt_(__id: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlassq_(__n: *mut __CLPK_integer, __x: *mut __CLPK_doublereal,
                   __incx: *mut __CLPK_integer,
                   __scale: *mut __CLPK_doublereal,
                   __sumsq: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dlasv2_(__f: *mut __CLPK_doublereal, __g: *mut __CLPK_doublereal,
                   __h__: *mut __CLPK_doublereal,
                   __ssmin: *mut __CLPK_doublereal,
                   __ssmax: *mut __CLPK_doublereal,
                   __snr: *mut __CLPK_doublereal,
                   __csr: *mut __CLPK_doublereal,
                   __snl: *mut __CLPK_doublereal,
                   __csl: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dlaswp_(__n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __k1: *mut __CLPK_integer,
                   __k2: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __incx: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlasy2_(__ltranl: *mut __CLPK_logical,
                   __ltranr: *mut __CLPK_logical, __isgn: *mut __CLPK_integer,
                   __n1: *mut __CLPK_integer, __n2: *mut __CLPK_integer,
                   __tl: *mut __CLPK_doublereal, __ldtl: *mut __CLPK_integer,
                   __tr: *mut __CLPK_doublereal, __ldtr: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __scale: *mut __CLPK_doublereal,
                   __x: *mut __CLPK_doublereal, __ldx: *mut __CLPK_integer,
                   __xnorm: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlasyf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nb: *mut __CLPK_integer, __kb: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __w: *mut __CLPK_doublereal,
                   __ldw: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlat2s_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __sa: *mut __CLPK_real, __ldsa: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlatbs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __normin: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __kd: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublereal, __ldab: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublereal,
                   __scale: *mut __CLPK_doublereal,
                   __cnorm: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlatdf_(__ijob: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublereal, __ldz: *mut __CLPK_integer,
                   __rhs: *mut __CLPK_doublereal,
                   __rdsum: *mut __CLPK_doublereal,
                   __rdscal: *mut __CLPK_doublereal,
                   __ipiv: *mut __CLPK_integer, __jpiv: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dlatps_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __normin: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_doublereal,
                   __x: *mut __CLPK_doublereal,
                   __scale: *mut __CLPK_doublereal,
                   __cnorm: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlatrd_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nb: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __e: *mut __CLPK_doublereal,
                   __tau: *mut __CLPK_doublereal, __w: *mut __CLPK_doublereal,
                   __ldw: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlatrs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __normin: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __x: *mut __CLPK_doublereal,
                   __scale: *mut __CLPK_doublereal,
                   __cnorm: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlatrz_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __l: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dlatzm_(__side: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __v: *mut __CLPK_doublereal,
                   __incv: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __c1: *mut __CLPK_doublereal, __c2: *mut __CLPK_doublereal,
                   __ldc: *mut __CLPK_integer, __work: *mut __CLPK_doublereal)
     -> ::libc::c_int;
    pub fn dlauu2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlauum_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dopgtr_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublereal,
                   __tau: *mut __CLPK_doublereal, __q: *mut __CLPK_doublereal,
                   __ldq: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dopmtr_(__side: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __trans: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_doublereal,
                   __tau: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dorg2l_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dorg2r_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dorgbr_(__vect: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dorghr_(__n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dorgl2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dorglq_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dorgql_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dorgqr_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dorgr2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dorgrq_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dorgtr_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dorm2l_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dorm2r_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dormbr_(__vect: *mut ::libc::c_char, __side: *mut ::libc::c_char,
                   __trans: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dormhr_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __ilo: *mut __CLPK_integer, __ihi: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dorml2_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dormlq_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dormql_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dormqr_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dormr2_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dormr3_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __l: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dormrq_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dormrz_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __l: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dormtr_(__side: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __trans: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dpbcon_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_doublereal,
                   __ldab: *mut __CLPK_integer,
                   __anorm: *mut __CLPK_doublereal,
                   __rcond: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dpbequ_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_doublereal,
                   __ldab: *mut __CLPK_integer, __s: *mut __CLPK_doublereal,
                   __scond: *mut __CLPK_doublereal,
                   __amax: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dpbrfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublereal, __ldab: *mut __CLPK_integer,
                   __afb: *mut __CLPK_doublereal,
                   __ldafb: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_doublereal,
                   __ldx: *mut __CLPK_integer, __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dpbstf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_doublereal,
                   __ldab: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dpbsv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __kd: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                  __ab: *mut __CLPK_doublereal, __ldab: *mut __CLPK_integer,
                  __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dpbsvx_(__fact: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __kd: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ab: *mut __CLPK_doublereal,
                   __ldab: *mut __CLPK_integer, __afb: *mut __CLPK_doublereal,
                   __ldafb: *mut __CLPK_integer, __equed: *mut ::libc::c_char,
                   __s: *mut __CLPK_doublereal, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_doublereal,
                   __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dpbtf2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_doublereal,
                   __ldab: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dpbtrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_doublereal,
                   __ldab: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dpbtrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublereal, __ldab: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dpftrf_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dpftri_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dpftrs_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dpocon_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __anorm: *mut __CLPK_doublereal,
                   __rcond: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dpoequ_(__n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __s: *mut __CLPK_doublereal,
                   __scond: *mut __CLPK_doublereal,
                   __amax: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dpoequb_(__n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                    __lda: *mut __CLPK_integer, __s: *mut __CLPK_doublereal,
                    __scond: *mut __CLPK_doublereal,
                    __amax: *mut __CLPK_doublereal,
                    __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dporfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __af: *mut __CLPK_doublereal,
                   __ldaf: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_doublereal,
                   __ldx: *mut __CLPK_integer, __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dposv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                  __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                  __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dposvx_(__fact: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __af: *mut __CLPK_doublereal, __ldaf: *mut __CLPK_integer,
                   __equed: *mut ::libc::c_char, __s: *mut __CLPK_doublereal,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublereal, __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dpotf2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dpotrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dpotri_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dpotrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dppcon_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublereal,
                   __anorm: *mut __CLPK_doublereal,
                   __rcond: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dppequ_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublereal, __s: *mut __CLPK_doublereal,
                   __scond: *mut __CLPK_doublereal,
                   __amax: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dpprfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_doublereal,
                   __afp: *mut __CLPK_doublereal, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_doublereal,
                   __ldx: *mut __CLPK_integer, __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dppsv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_doublereal,
                  __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dppsvx_(__fact: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublereal,
                   __afp: *mut __CLPK_doublereal,
                   __equed: *mut ::libc::c_char, __s: *mut __CLPK_doublereal,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublereal, __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dpptrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublereal, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dpptri_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublereal, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dpptrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_doublereal,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dpstf2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __piv: *mut __CLPK_integer, __rank: *mut __CLPK_integer,
                   __tol: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dpstrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __piv: *mut __CLPK_integer, __rank: *mut __CLPK_integer,
                   __tol: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dptcon_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublereal,
                   __anorm: *mut __CLPK_doublereal,
                   __rcond: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dpteqr_(__compz: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublereal, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dptrfs_(__n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __df: *mut __CLPK_doublereal, __ef: *mut __CLPK_doublereal,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublereal, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dptsv_(__n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                  __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                  __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dptsvx_(__fact: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublereal, __df: *mut __CLPK_doublereal,
                   __ef: *mut __CLPK_doublereal, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_doublereal,
                   __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dpttrf_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublereal, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dpttrs_(__n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dptts2_(__n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn drscl_(__n: *mut __CLPK_integer, __sa: *mut __CLPK_doublereal,
                  __sx: *mut __CLPK_doublereal, __incx: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dsbev_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __kd: *mut __CLPK_integer,
                  __ab: *mut __CLPK_doublereal, __ldab: *mut __CLPK_integer,
                  __w: *mut __CLPK_doublereal, __z__: *mut __CLPK_doublereal,
                  __ldz: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dsbevd_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __kd: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublereal, __ldab: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal, __z__: *mut __CLPK_doublereal,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dsbevx_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_doublereal,
                   __ldab: *mut __CLPK_integer, __q: *mut __CLPK_doublereal,
                   __ldq: *mut __CLPK_integer, __vl: *mut __CLPK_doublereal,
                   __vu: *mut __CLPK_doublereal, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal, __z__: *mut __CLPK_doublereal,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __ifail: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dsbgst_(__vect: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ka: *mut __CLPK_integer,
                   __kb: *mut __CLPK_integer, __ab: *mut __CLPK_doublereal,
                   __ldab: *mut __CLPK_integer, __bb: *mut __CLPK_doublereal,
                   __ldbb: *mut __CLPK_integer, __x: *mut __CLPK_doublereal,
                   __ldx: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dsbgv_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __ka: *mut __CLPK_integer,
                  __kb: *mut __CLPK_integer, __ab: *mut __CLPK_doublereal,
                  __ldab: *mut __CLPK_integer, __bb: *mut __CLPK_doublereal,
                  __ldbb: *mut __CLPK_integer, __w: *mut __CLPK_doublereal,
                  __z__: *mut __CLPK_doublereal, __ldz: *mut __CLPK_integer,
                  __work: *mut __CLPK_doublereal, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dsbgvd_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ka: *mut __CLPK_integer,
                   __kb: *mut __CLPK_integer, __ab: *mut __CLPK_doublereal,
                   __ldab: *mut __CLPK_integer, __bb: *mut __CLPK_doublereal,
                   __ldbb: *mut __CLPK_integer, __w: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublereal, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dsbgvx_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ka: *mut __CLPK_integer, __kb: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublereal, __ldab: *mut __CLPK_integer,
                   __bb: *mut __CLPK_doublereal, __ldbb: *mut __CLPK_integer,
                   __q: *mut __CLPK_doublereal, __ldq: *mut __CLPK_integer,
                   __vl: *mut __CLPK_doublereal, __vu: *mut __CLPK_doublereal,
                   __il: *mut __CLPK_integer, __iu: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal, __z__: *mut __CLPK_doublereal,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __ifail: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dsbtrd_(__vect: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __kd: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublereal, __ldab: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __q: *mut __CLPK_doublereal, __ldq: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dsfrk_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                  __trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __k: *mut __CLPK_integer, __alpha: *mut __CLPK_doublereal,
                  __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                  __beta: *mut __CLPK_doublereal,
                  __c__: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dsgesv_(__n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_doublereal,
                   __ldx: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __swork: *mut __CLPK_real, __iter: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dspcon_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublereal, __ipiv: *mut __CLPK_integer,
                   __anorm: *mut __CLPK_doublereal,
                   __rcond: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dspev_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __ap: *mut __CLPK_doublereal,
                  __w: *mut __CLPK_doublereal, __z__: *mut __CLPK_doublereal,
                  __ldz: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dspevd_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_doublereal,
                   __w: *mut __CLPK_doublereal, __z__: *mut __CLPK_doublereal,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dspevx_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublereal, __vl: *mut __CLPK_doublereal,
                   __vu: *mut __CLPK_doublereal, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal, __z__: *mut __CLPK_doublereal,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __ifail: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dspgst_(__itype: *mut __CLPK_integer, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_doublereal,
                   __bp: *mut __CLPK_doublereal, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dspgv_(__itype: *mut __CLPK_integer, __jobz: *mut ::libc::c_char,
                  __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __ap: *mut __CLPK_doublereal, __bp: *mut __CLPK_doublereal,
                  __w: *mut __CLPK_doublereal, __z__: *mut __CLPK_doublereal,
                  __ldz: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dspgvd_(__itype: *mut __CLPK_integer, __jobz: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublereal, __bp: *mut __CLPK_doublereal,
                   __w: *mut __CLPK_doublereal, __z__: *mut __CLPK_doublereal,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dspgvx_(__itype: *mut __CLPK_integer, __jobz: *mut ::libc::c_char,
                   __range: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_doublereal,
                   __bp: *mut __CLPK_doublereal, __vl: *mut __CLPK_doublereal,
                   __vu: *mut __CLPK_doublereal, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal, __z__: *mut __CLPK_doublereal,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __ifail: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dsposv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_doublereal,
                   __ldx: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __swork: *mut __CLPK_real, __iter: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dsprfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_doublereal,
                   __afp: *mut __CLPK_doublereal, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublereal, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dspsv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_doublereal,
                  __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                  __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dspsvx_(__fact: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublereal,
                   __afp: *mut __CLPK_doublereal, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublereal, __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dsptrd_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublereal,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __tau: *mut __CLPK_doublereal, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dsptrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublereal, __ipiv: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dsptri_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublereal, __ipiv: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dsptrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_doublereal,
                   __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dstebz_(__range: *mut ::libc::c_char, __order: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __vl: *mut __CLPK_doublereal,
                   __vu: *mut __CLPK_doublereal, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_doublereal,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __m: *mut __CLPK_integer, __nsplit: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal, __iblock: *mut __CLPK_integer,
                   __isplit: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dstedc_(__compz: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublereal, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dstegr_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublereal, __vl: *mut __CLPK_doublereal,
                   __vu: *mut __CLPK_doublereal, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal, __z__: *mut __CLPK_doublereal,
                   __ldz: *mut __CLPK_integer, __isuppz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dstein_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal, __iblock: *mut __CLPK_integer,
                   __isplit: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublereal, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __ifail: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dstemr_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublereal, __vl: *mut __CLPK_doublereal,
                   __vu: *mut __CLPK_doublereal, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal, __z__: *mut __CLPK_doublereal,
                   __ldz: *mut __CLPK_integer, __nzc: *mut __CLPK_integer,
                   __isuppz: *mut __CLPK_integer,
                   __tryrac: *mut __CLPK_logical,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dsteqr_(__compz: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublereal, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dsterf_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublereal, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dstev_(__jobz: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                  __z__: *mut __CLPK_doublereal, __ldz: *mut __CLPK_integer,
                  __work: *mut __CLPK_doublereal, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dstevd_(__jobz: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublereal, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dstevr_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublereal, __vl: *mut __CLPK_doublereal,
                   __vu: *mut __CLPK_doublereal, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal, __z__: *mut __CLPK_doublereal,
                   __ldz: *mut __CLPK_integer, __isuppz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dstevx_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublereal, __vl: *mut __CLPK_doublereal,
                   __vu: *mut __CLPK_doublereal, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal, __z__: *mut __CLPK_doublereal,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __ifail: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dsycon_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer,
                   __anorm: *mut __CLPK_doublereal,
                   __rcond: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dsyequb_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                    __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                    __s: *mut __CLPK_doublereal,
                    __scond: *mut __CLPK_doublereal,
                    __amax: *mut __CLPK_doublereal,
                    __work: *mut __CLPK_doublereal,
                    __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dsyev_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                  __lda: *mut __CLPK_integer, __w: *mut __CLPK_doublereal,
                  __work: *mut __CLPK_doublereal,
                  __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dsyevd_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __w: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dsyevr_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __vl: *mut __CLPK_doublereal, __vu: *mut __CLPK_doublereal,
                   __il: *mut __CLPK_integer, __iu: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal, __z__: *mut __CLPK_doublereal,
                   __ldz: *mut __CLPK_integer, __isuppz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dsyevx_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __vl: *mut __CLPK_doublereal, __vu: *mut __CLPK_doublereal,
                   __il: *mut __CLPK_integer, __iu: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal, __z__: *mut __CLPK_doublereal,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __ifail: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dsygs2_(__itype: *mut __CLPK_integer, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dsygst_(__itype: *mut __CLPK_integer, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dsygv_(__itype: *mut __CLPK_integer, __jobz: *mut ::libc::c_char,
                  __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                  __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                  __w: *mut __CLPK_doublereal, __work: *mut __CLPK_doublereal,
                  __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dsygvd_(__itype: *mut __CLPK_integer, __jobz: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dsygvx_(__itype: *mut __CLPK_integer, __jobz: *mut ::libc::c_char,
                   __range: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __vl: *mut __CLPK_doublereal,
                   __vu: *mut __CLPK_doublereal, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal, __z__: *mut __CLPK_doublereal,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __ifail: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dsyrfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __af: *mut __CLPK_doublereal,
                   __ldaf: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublereal, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dsysv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                  __lda: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                  __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                  __work: *mut __CLPK_doublereal,
                  __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dsysvx_(__fact: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __af: *mut __CLPK_doublereal, __ldaf: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_doublereal,
                   __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dsytd2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __tau: *mut __CLPK_doublereal, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dsytf2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dsytrd_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dsytrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dsytri_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dsytrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dtbcon_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_doublereal,
                   __ldab: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dtbrfs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublereal, __ldab: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublereal, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dtbtrs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublereal, __ldab: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dtfsm_(__transr: *mut ::libc::c_char, __side: *mut ::libc::c_char,
                  __uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                  __diag: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                  __n: *mut __CLPK_integer, __alpha: *mut __CLPK_doublereal,
                  __a: *mut __CLPK_doublereal, __b: *mut __CLPK_doublereal,
                  __ldb: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dtftri_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dtfttp_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __arf: *mut __CLPK_doublereal,
                   __ap: *mut __CLPK_doublereal, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dtfttr_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __arf: *mut __CLPK_doublereal,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dtgevc_(__side: *mut ::libc::c_char, __howmny: *mut ::libc::c_char,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __s: *mut __CLPK_doublereal, __lds: *mut __CLPK_integer,
                   __p: *mut __CLPK_doublereal, __ldp: *mut __CLPK_integer,
                   __vl: *mut __CLPK_doublereal, __ldvl: *mut __CLPK_integer,
                   __vr: *mut __CLPK_doublereal, __ldvr: *mut __CLPK_integer,
                   __mm: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dtgex2_(__wantq: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __q: *mut __CLPK_doublereal,
                   __ldq: *mut __CLPK_integer, __z__: *mut __CLPK_doublereal,
                   __ldz: *mut __CLPK_integer, __j1: *mut __CLPK_integer,
                   __n1: *mut __CLPK_integer, __n2: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dtgexc_(__wantq: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __q: *mut __CLPK_doublereal,
                   __ldq: *mut __CLPK_integer, __z__: *mut __CLPK_doublereal,
                   __ldz: *mut __CLPK_integer, __ifst: *mut __CLPK_integer,
                   __ilst: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dtgsen_(__ijob: *mut __CLPK_integer, __wantq: *mut __CLPK_logical,
                   __wantz: *mut __CLPK_logical,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __alphar: *mut __CLPK_doublereal,
                   __alphai: *mut __CLPK_doublereal,
                   __beta: *mut __CLPK_doublereal,
                   __q: *mut __CLPK_doublereal, __ldq: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublereal, __ldz: *mut __CLPK_integer,
                   __m: *mut __CLPK_integer, __pl: *mut __CLPK_doublereal,
                   __pr: *mut __CLPK_doublereal,
                   __dif: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dtgsja_(__jobu: *mut ::libc::c_char, __jobv: *mut ::libc::c_char,
                   __jobq: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __p: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __l: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __tola: *mut __CLPK_doublereal,
                   __tolb: *mut __CLPK_doublereal,
                   __alpha: *mut __CLPK_doublereal,
                   __beta: *mut __CLPK_doublereal,
                   __u: *mut __CLPK_doublereal, __ldu: *mut __CLPK_integer,
                   __v: *mut __CLPK_doublereal, __ldv: *mut __CLPK_integer,
                   __q: *mut __CLPK_doublereal, __ldq: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __ncycle: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dtgsna_(__job: *mut ::libc::c_char, __howmny: *mut ::libc::c_char,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __vl: *mut __CLPK_doublereal, __ldvl: *mut __CLPK_integer,
                   __vr: *mut __CLPK_doublereal, __ldvr: *mut __CLPK_integer,
                   __s: *mut __CLPK_doublereal, __dif: *mut __CLPK_doublereal,
                   __mm: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dtgsy2_(__trans: *mut ::libc::c_char, __ijob: *mut __CLPK_integer,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __c__: *mut __CLPK_doublereal, __ldc: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __ldd: *mut __CLPK_integer,
                   __e: *mut __CLPK_doublereal, __lde: *mut __CLPK_integer,
                   __f: *mut __CLPK_doublereal, __ldf: *mut __CLPK_integer,
                   __scale: *mut __CLPK_doublereal,
                   __rdsum: *mut __CLPK_doublereal,
                   __rdscal: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __pq: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dtgsyl_(__trans: *mut ::libc::c_char, __ijob: *mut __CLPK_integer,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __c__: *mut __CLPK_doublereal, __ldc: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __ldd: *mut __CLPK_integer,
                   __e: *mut __CLPK_doublereal, __lde: *mut __CLPK_integer,
                   __f: *mut __CLPK_doublereal, __ldf: *mut __CLPK_integer,
                   __scale: *mut __CLPK_doublereal,
                   __dif: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dtpcon_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublereal,
                   __rcond: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dtprfs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_doublereal,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublereal, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dtptri_(__uplo: *mut ::libc::c_char, __diag: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dtptrs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_doublereal,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dtpttf_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_doublereal,
                   __arf: *mut __CLPK_doublereal, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dtpttr_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublereal, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dtrcon_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dtrevc_(__side: *mut ::libc::c_char, __howmny: *mut ::libc::c_char,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __t: *mut __CLPK_doublereal, __ldt: *mut __CLPK_integer,
                   __vl: *mut __CLPK_doublereal, __ldvl: *mut __CLPK_integer,
                   __vr: *mut __CLPK_doublereal, __ldvr: *mut __CLPK_integer,
                   __mm: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dtrexc_(__compq: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __t: *mut __CLPK_doublereal, __ldt: *mut __CLPK_integer,
                   __q: *mut __CLPK_doublereal, __ldq: *mut __CLPK_integer,
                   __ifst: *mut __CLPK_integer, __ilst: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dtrrfs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_doublereal,
                   __ldx: *mut __CLPK_integer, __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dtrsen_(__job: *mut ::libc::c_char, __compq: *mut ::libc::c_char,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __t: *mut __CLPK_doublereal, __ldt: *mut __CLPK_integer,
                   __q: *mut __CLPK_doublereal, __ldq: *mut __CLPK_integer,
                   __wr: *mut __CLPK_doublereal, __wi: *mut __CLPK_doublereal,
                   __m: *mut __CLPK_integer, __s: *mut __CLPK_doublereal,
                   __sep: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dtrsna_(__job: *mut ::libc::c_char, __howmny: *mut ::libc::c_char,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __t: *mut __CLPK_doublereal, __ldt: *mut __CLPK_integer,
                   __vl: *mut __CLPK_doublereal, __ldvl: *mut __CLPK_integer,
                   __vr: *mut __CLPK_doublereal, __ldvr: *mut __CLPK_integer,
                   __s: *mut __CLPK_doublereal, __sep: *mut __CLPK_doublereal,
                   __mm: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __ldwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dtrsyl_(__trana: *mut ::libc::c_char, __tranb: *mut ::libc::c_char,
                   __isgn: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __c__: *mut __CLPK_doublereal,
                   __ldc: *mut __CLPK_integer,
                   __scale: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dtrti2_(__uplo: *mut ::libc::c_char, __diag: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dtrtri_(__uplo: *mut ::libc::c_char, __diag: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dtrtrs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublereal,
                   __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dtrttf_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __arf: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dtrttp_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublereal, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dtzrqf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublereal, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dtzrzf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn dzsum1_(__n: *mut __CLPK_integer, __cx: *mut __CLPK_doublecomplex,
                   __incx: *mut __CLPK_integer) -> __CLPK_doublereal;
    pub fn icmax1_(__n: *mut __CLPK_integer, __cx: *mut __CLPK_complex,
                   __incx: *mut __CLPK_integer) -> __CLPK_integer;
    pub fn ieeeck_(__ispec: *mut __CLPK_integer, __zero: *mut __CLPK_real,
                   __one: *mut __CLPK_real) -> __CLPK_integer;
    pub fn ilaclc_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer)
     -> __CLPK_integer;
    pub fn ilaclr_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_complex, __lda: *mut __CLPK_integer)
     -> __CLPK_integer;
    pub fn iladiag_(__diag: *mut ::libc::c_char) -> __CLPK_integer;
    pub fn iladlc_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer)
     -> __CLPK_integer;
    pub fn iladlr_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer)
     -> __CLPK_integer;
    pub fn ilaenv_(__ispec: *mut __CLPK_integer,
                   __name__: *mut ::libc::c_char, __opts: *mut ::libc::c_char,
                   __n1: *mut __CLPK_integer, __n2: *mut __CLPK_integer,
                   __n3: *mut __CLPK_integer, __n4: *mut __CLPK_integer)
     -> __CLPK_integer;
    pub fn ilaprec_(__prec: *mut ::libc::c_char) -> __CLPK_integer;
    pub fn ilaslc_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer)
     -> __CLPK_integer;
    pub fn ilaslr_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer)
     -> __CLPK_integer;
    pub fn ilatrans_(__trans: *mut ::libc::c_char) -> __CLPK_integer;
    pub fn ilauplo_(__uplo: *mut ::libc::c_char) -> __CLPK_integer;
    pub fn ilaver_(__vers_major__: *mut __CLPK_integer,
                   __vers_minor__: *mut __CLPK_integer,
                   __vers_patch__: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ilazlc_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer)
     -> __CLPK_integer;
    pub fn ilazlr_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer)
     -> __CLPK_integer;
    pub fn iparmq_(__ispec: *mut __CLPK_integer,
                   __name__: *mut ::libc::c_char, __opts: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __lwork: *mut __CLPK_integer)
     -> __CLPK_integer;
    pub fn izmax1_(__n: *mut __CLPK_integer, __cx: *mut __CLPK_doublecomplex,
                   __incx: *mut __CLPK_integer) -> __CLPK_integer;
    pub fn lsamen_(__n: *mut __CLPK_integer, __ca: *mut ::libc::c_char,
                   __cb: *mut ::libc::c_char) -> __CLPK_logical;
    pub fn smaxloc_(__a: *mut __CLPK_real, __dimm: *mut __CLPK_integer)
     -> __CLPK_integer;
    pub fn sbdsdc_(__uplo: *mut ::libc::c_char, __compq: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __u: *mut __CLPK_real,
                   __ldu: *mut __CLPK_integer, __vt: *mut __CLPK_real,
                   __ldvt: *mut __CLPK_integer, __q: *mut __CLPK_real,
                   __iq: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sbdsqr_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ncvt: *mut __CLPK_integer, __nru: *mut __CLPK_integer,
                   __ncc: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __vt: *mut __CLPK_real,
                   __ldvt: *mut __CLPK_integer, __u: *mut __CLPK_real,
                   __ldu: *mut __CLPK_integer, __c__: *mut __CLPK_real,
                   __ldc: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn scsum1_(__n: *mut __CLPK_integer, __cx: *mut __CLPK_complex,
                   __incx: *mut __CLPK_integer) -> __CLPK_doublereal;
    pub fn sdisna_(__job: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __sep: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgbbrd_(__vect: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __ncc: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_real, __ldab: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __q: *mut __CLPK_real, __ldq: *mut __CLPK_integer,
                   __pt: *mut __CLPK_real, __ldpt: *mut __CLPK_integer,
                   __c__: *mut __CLPK_real, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgbcon_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_real, __ldab: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __anorm: *mut __CLPK_real,
                   __rcond: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgbequ_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_real, __ldab: *mut __CLPK_integer,
                   __r__: *mut __CLPK_real, __c__: *mut __CLPK_real,
                   __rowcnd: *mut __CLPK_real, __colcnd: *mut __CLPK_real,
                   __amax: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgbequb_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                    __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                    __ab: *mut __CLPK_real, __ldab: *mut __CLPK_integer,
                    __r__: *mut __CLPK_real, __c__: *mut __CLPK_real,
                    __rowcnd: *mut __CLPK_real, __colcnd: *mut __CLPK_real,
                    __amax: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgbrfs_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ab: *mut __CLPK_real,
                   __ldab: *mut __CLPK_integer, __afb: *mut __CLPK_real,
                   __ldafb: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_real, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sgbsv_(__n: *mut __CLPK_integer, __kl: *mut __CLPK_integer,
                  __ku: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                  __ab: *mut __CLPK_real, __ldab: *mut __CLPK_integer,
                  __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_real,
                  __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgbsvx_(__fact: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __kl: *mut __CLPK_integer,
                   __ku: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ab: *mut __CLPK_real, __ldab: *mut __CLPK_integer,
                   __afb: *mut __CLPK_real, __ldafb: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __equed: *mut ::libc::c_char,
                   __r__: *mut __CLPK_real, __c__: *mut __CLPK_real,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_real, __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_real, __ferr: *mut __CLPK_real,
                   __berr: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgbtf2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_real, __ldab: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgbtrf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_real, __ldab: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgbtrs_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ab: *mut __CLPK_real,
                   __ldab: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sgebak_(__job: *mut ::libc::c_char, __side: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __scale: *mut __CLPK_real,
                   __m: *mut __CLPK_integer, __v: *mut __CLPK_real,
                   __ldv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgebal_(__job: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __ilo: *mut __CLPK_integer, __ihi: *mut __CLPK_integer,
                   __scale: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgebd2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __tauq: *mut __CLPK_real, __taup: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgebrd_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __tauq: *mut __CLPK_real, __taup: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sgecon_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __anorm: *mut __CLPK_real, __rcond: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sgeequ_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __r__: *mut __CLPK_real, __c__: *mut __CLPK_real,
                   __rowcnd: *mut __CLPK_real, __colcnd: *mut __CLPK_real,
                   __amax: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgeequb_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                    __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                    __r__: *mut __CLPK_real, __c__: *mut __CLPK_real,
                    __rowcnd: *mut __CLPK_real, __colcnd: *mut __CLPK_real,
                    __amax: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgees_(__jobvs: *mut ::libc::c_char, __sort: *mut ::libc::c_char,
                  __select: __CLPK_L_fp, __n: *mut __CLPK_integer,
                  __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                  __sdim: *mut __CLPK_integer, __wr: *mut __CLPK_real,
                  __wi: *mut __CLPK_real, __vs: *mut __CLPK_real,
                  __ldvs: *mut __CLPK_integer, __work: *mut __CLPK_real,
                  __lwork: *mut __CLPK_integer, __bwork: *mut __CLPK_logical,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sgeesx_(__jobvs: *mut ::libc::c_char, __sort: *mut ::libc::c_char,
                   __select: __CLPK_L_fp, __sense: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __sdim: *mut __CLPK_integer,
                   __wr: *mut __CLPK_real, __wi: *mut __CLPK_real,
                   __vs: *mut __CLPK_real, __ldvs: *mut __CLPK_integer,
                   __rconde: *mut __CLPK_real, __rcondv: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer,
                   __bwork: *mut __CLPK_logical, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgeev_(__jobvl: *mut ::libc::c_char, __jobvr: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                  __lda: *mut __CLPK_integer, __wr: *mut __CLPK_real,
                  __wi: *mut __CLPK_real, __vl: *mut __CLPK_real,
                  __ldvl: *mut __CLPK_integer, __vr: *mut __CLPK_real,
                  __ldvr: *mut __CLPK_integer, __work: *mut __CLPK_real,
                  __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgeevx_(__balanc: *mut ::libc::c_char,
                   __jobvl: *mut ::libc::c_char, __jobvr: *mut ::libc::c_char,
                   __sense: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __wr: *mut __CLPK_real, __wi: *mut __CLPK_real,
                   __vl: *mut __CLPK_real, __ldvl: *mut __CLPK_integer,
                   __vr: *mut __CLPK_real, __ldvr: *mut __CLPK_integer,
                   __ilo: *mut __CLPK_integer, __ihi: *mut __CLPK_integer,
                   __scale: *mut __CLPK_real, __abnrm: *mut __CLPK_real,
                   __rconde: *mut __CLPK_real, __rcondv: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgegs_(__jobvsl: *mut ::libc::c_char,
                  __jobvsr: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                  __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                  __alphar: *mut __CLPK_real, __alphai: *mut __CLPK_real,
                  __beta: *mut __CLPK_real, __vsl: *mut __CLPK_real,
                  __ldvsl: *mut __CLPK_integer, __vsr: *mut __CLPK_real,
                  __ldvsr: *mut __CLPK_integer, __work: *mut __CLPK_real,
                  __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgegv_(__jobvl: *mut ::libc::c_char, __jobvr: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                  __lda: *mut __CLPK_integer, __b: *mut __CLPK_real,
                  __ldb: *mut __CLPK_integer, __alphar: *mut __CLPK_real,
                  __alphai: *mut __CLPK_real, __beta: *mut __CLPK_real,
                  __vl: *mut __CLPK_real, __ldvl: *mut __CLPK_integer,
                  __vr: *mut __CLPK_real, __ldvr: *mut __CLPK_integer,
                  __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sgehd2_(__n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgehrd_(__n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sgejsv_(__joba: *mut ::libc::c_char, __jobu: *mut ::libc::c_char,
                   __jobv: *mut ::libc::c_char, __jobr: *mut ::libc::c_char,
                   __jobt: *mut ::libc::c_char, __jobp: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __sva: *mut __CLPK_real, __u: *mut __CLPK_real,
                   __ldu: *mut __CLPK_integer, __v: *mut __CLPK_real,
                   __ldv: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sgelq2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sgelqf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgels_(__trans: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                  __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                  __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                  __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                  __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sgelsd_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __s: *mut __CLPK_real,
                   __rcond: *mut __CLPK_real, __rank: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgelss_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __s: *mut __CLPK_real,
                   __rcond: *mut __CLPK_real, __rank: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sgelsx_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __jpvt: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_real, __rank: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgelsy_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __jpvt: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_real, __rank: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sgeql2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sgeqlf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgeqp3_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __jpvt: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sgeqpf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __jpvt: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgeqr2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sgeqrf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgerfs_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __af: *mut __CLPK_real,
                   __ldaf: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_real, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sgerq2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sgerqf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgesc2_(__n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __rhs: *mut __CLPK_real,
                   __ipiv: *mut __CLPK_integer, __jpiv: *mut __CLPK_integer,
                   __scale: *mut __CLPK_real) -> ::libc::c_int;
    pub fn sgesdd_(__jobz: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __s: *mut __CLPK_real,
                   __u: *mut __CLPK_real, __ldu: *mut __CLPK_integer,
                   __vt: *mut __CLPK_real, __ldvt: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgesv_(__n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                  __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                  __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_real,
                  __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgesvd_(__jobu: *mut ::libc::c_char, __jobvt: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __s: *mut __CLPK_real, __u: *mut __CLPK_real,
                   __ldu: *mut __CLPK_integer, __vt: *mut __CLPK_real,
                   __ldvt: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgesvj_(__joba: *mut ::libc::c_char, __jobu: *mut ::libc::c_char,
                   __jobv: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __sva: *mut __CLPK_real,
                   __mv: *mut __CLPK_integer, __v: *mut __CLPK_real,
                   __ldv: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgesvx_(__fact: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __af: *mut __CLPK_real, __ldaf: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __equed: *mut ::libc::c_char,
                   __r__: *mut __CLPK_real, __c__: *mut __CLPK_real,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_real, __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_real, __ferr: *mut __CLPK_real,
                   __berr: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgetc2_(__n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __jpiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgetf2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgetrf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgetri_(__n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sgetrs_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sggbak_(__job: *mut ::libc::c_char, __side: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __lscale: *mut __CLPK_real,
                   __rscale: *mut __CLPK_real, __m: *mut __CLPK_integer,
                   __v: *mut __CLPK_real, __ldv: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sggbal_(__job: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __ilo: *mut __CLPK_integer, __ihi: *mut __CLPK_integer,
                   __lscale: *mut __CLPK_real, __rscale: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgges_(__jobvsl: *mut ::libc::c_char,
                  __jobvsr: *mut ::libc::c_char, __sort: *mut ::libc::c_char,
                  __selctg: __CLPK_L_fp, __n: *mut __CLPK_integer,
                  __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                  __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                  __sdim: *mut __CLPK_integer, __alphar: *mut __CLPK_real,
                  __alphai: *mut __CLPK_real, __beta: *mut __CLPK_real,
                  __vsl: *mut __CLPK_real, __ldvsl: *mut __CLPK_integer,
                  __vsr: *mut __CLPK_real, __ldvsr: *mut __CLPK_integer,
                  __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                  __bwork: *mut __CLPK_logical, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sggesx_(__jobvsl: *mut ::libc::c_char,
                   __jobvsr: *mut ::libc::c_char, __sort: *mut ::libc::c_char,
                   __selctg: __CLPK_L_fp, __sense: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __sdim: *mut __CLPK_integer,
                   __alphar: *mut __CLPK_real, __alphai: *mut __CLPK_real,
                   __beta: *mut __CLPK_real, __vsl: *mut __CLPK_real,
                   __ldvsl: *mut __CLPK_integer, __vsr: *mut __CLPK_real,
                   __ldvsr: *mut __CLPK_integer, __rconde: *mut __CLPK_real,
                   __rcondv: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer,
                   __bwork: *mut __CLPK_logical, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sggev_(__jobvl: *mut ::libc::c_char, __jobvr: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                  __lda: *mut __CLPK_integer, __b: *mut __CLPK_real,
                  __ldb: *mut __CLPK_integer, __alphar: *mut __CLPK_real,
                  __alphai: *mut __CLPK_real, __beta: *mut __CLPK_real,
                  __vl: *mut __CLPK_real, __ldvl: *mut __CLPK_integer,
                  __vr: *mut __CLPK_real, __ldvr: *mut __CLPK_integer,
                  __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sggevx_(__balanc: *mut ::libc::c_char,
                   __jobvl: *mut ::libc::c_char, __jobvr: *mut ::libc::c_char,
                   __sense: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __alphar: *mut __CLPK_real, __alphai: *mut __CLPK_real,
                   __beta: *mut __CLPK_real, __vl: *mut __CLPK_real,
                   __ldvl: *mut __CLPK_integer, __vr: *mut __CLPK_real,
                   __ldvr: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __lscale: *mut __CLPK_real,
                   __rscale: *mut __CLPK_real, __abnrm: *mut __CLPK_real,
                   __bbnrm: *mut __CLPK_real, __rconde: *mut __CLPK_real,
                   __rcondv: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __bwork: *mut __CLPK_logical, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sggglm_(__n: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __p: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __x: *mut __CLPK_real, __y: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sgghrd_(__compq: *mut ::libc::c_char, __compz: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __q: *mut __CLPK_real,
                   __ldq: *mut __CLPK_integer, __z__: *mut __CLPK_real,
                   __ldz: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgglse_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __p: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __c__: *mut __CLPK_real,
                   __d__: *mut __CLPK_real, __x: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sggqrf_(__n: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __p: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __taua: *mut __CLPK_real,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __taub: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sggrqf_(__m: *mut __CLPK_integer, __p: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __taua: *mut __CLPK_real,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __taub: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sggsvd_(__jobu: *mut ::libc::c_char, __jobv: *mut ::libc::c_char,
                   __jobq: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __p: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __l: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __alpha: *mut __CLPK_real, __beta: *mut __CLPK_real,
                   __u: *mut __CLPK_real, __ldu: *mut __CLPK_integer,
                   __v: *mut __CLPK_real, __ldv: *mut __CLPK_integer,
                   __q: *mut __CLPK_real, __ldq: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sggsvp_(__jobu: *mut ::libc::c_char, __jobv: *mut ::libc::c_char,
                   __jobq: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __p: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __tola: *mut __CLPK_real, __tolb: *mut __CLPK_real,
                   __k: *mut __CLPK_integer, __l: *mut __CLPK_integer,
                   __u: *mut __CLPK_real, __ldu: *mut __CLPK_integer,
                   __v: *mut __CLPK_real, __ldv: *mut __CLPK_integer,
                   __q: *mut __CLPK_real, __ldq: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgsvj0_(__jobv: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __sva: *mut __CLPK_real, __mv: *mut __CLPK_integer,
                   __v: *mut __CLPK_real, __ldv: *mut __CLPK_integer,
                   __eps: *mut __CLPK_real, __sfmin: *mut __CLPK_real,
                   __tol: *mut __CLPK_real, __nsweep: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sgsvj1_(__jobv: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __n1: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __sva: *mut __CLPK_real,
                   __mv: *mut __CLPK_integer, __v: *mut __CLPK_real,
                   __ldv: *mut __CLPK_integer, __eps: *mut __CLPK_real,
                   __sfmin: *mut __CLPK_real, __tol: *mut __CLPK_real,
                   __nsweep: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgtcon_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __dl: *mut __CLPK_real, __d__: *mut __CLPK_real,
                   __du: *mut __CLPK_real, __du2: *mut __CLPK_real,
                   __ipiv: *mut __CLPK_integer, __anorm: *mut __CLPK_real,
                   __rcond: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgtrfs_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __dl: *mut __CLPK_real,
                   __d__: *mut __CLPK_real, __du: *mut __CLPK_real,
                   __dlf: *mut __CLPK_real, __df: *mut __CLPK_real,
                   __duf: *mut __CLPK_real, __du2: *mut __CLPK_real,
                   __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_real,
                   __ldx: *mut __CLPK_integer, __ferr: *mut __CLPK_real,
                   __berr: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgtsv_(__n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                  __dl: *mut __CLPK_real, __d__: *mut __CLPK_real,
                  __du: *mut __CLPK_real, __b: *mut __CLPK_real,
                  __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgtsvx_(__fact: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __dl: *mut __CLPK_real, __d__: *mut __CLPK_real,
                   __du: *mut __CLPK_real, __dlf: *mut __CLPK_real,
                   __df: *mut __CLPK_real, __duf: *mut __CLPK_real,
                   __du2: *mut __CLPK_real, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_real, __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_real, __ferr: *mut __CLPK_real,
                   __berr: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sgttrf_(__n: *mut __CLPK_integer, __dl: *mut __CLPK_real,
                   __d__: *mut __CLPK_real, __du: *mut __CLPK_real,
                   __du2: *mut __CLPK_real, __ipiv: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sgttrs_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __dl: *mut __CLPK_real,
                   __d__: *mut __CLPK_real, __du: *mut __CLPK_real,
                   __du2: *mut __CLPK_real, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sgtts2_(__itrans: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __dl: *mut __CLPK_real,
                   __d__: *mut __CLPK_real, __du: *mut __CLPK_real,
                   __du2: *mut __CLPK_real, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn shgeqz_(__job: *mut ::libc::c_char, __compq: *mut ::libc::c_char,
                   __compz: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ilo: *mut __CLPK_integer, __ihi: *mut __CLPK_integer,
                   __h__: *mut __CLPK_real, __ldh: *mut __CLPK_integer,
                   __t: *mut __CLPK_real, __ldt: *mut __CLPK_integer,
                   __alphar: *mut __CLPK_real, __alphai: *mut __CLPK_real,
                   __beta: *mut __CLPK_real, __q: *mut __CLPK_real,
                   __ldq: *mut __CLPK_integer, __z__: *mut __CLPK_real,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn shsein_(__side: *mut ::libc::c_char, __eigsrc: *mut ::libc::c_char,
                   __initv: *mut ::libc::c_char,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __h__: *mut __CLPK_real, __ldh: *mut __CLPK_integer,
                   __wr: *mut __CLPK_real, __wi: *mut __CLPK_real,
                   __vl: *mut __CLPK_real, __ldvl: *mut __CLPK_integer,
                   __vr: *mut __CLPK_real, __ldvr: *mut __CLPK_integer,
                   __mm: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __ifaill: *mut __CLPK_integer,
                   __ifailr: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn shseqr_(__job: *mut ::libc::c_char, __compz: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __h__: *mut __CLPK_real,
                   __ldh: *mut __CLPK_integer, __wr: *mut __CLPK_real,
                   __wi: *mut __CLPK_real, __z__: *mut __CLPK_real,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sisnan_(__sin__: *mut __CLPK_real) -> __CLPK_logical;
    pub fn slabad_(__small: *mut __CLPK_real, __large: *mut __CLPK_real)
     -> ::libc::c_int;
    pub fn slabrd_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nb: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __tauq: *mut __CLPK_real,
                   __taup: *mut __CLPK_real, __x: *mut __CLPK_real,
                   __ldx: *mut __CLPK_integer, __y: *mut __CLPK_real,
                   __ldy: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slacn2_(__n: *mut __CLPK_integer, __v: *mut __CLPK_real,
                   __x: *mut __CLPK_real, __isgn: *mut __CLPK_integer,
                   __est: *mut __CLPK_real, __kase: *mut __CLPK_integer,
                   __isave: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slacon_(__n: *mut __CLPK_integer, __v: *mut __CLPK_real,
                   __x: *mut __CLPK_real, __isgn: *mut __CLPK_integer,
                   __est: *mut __CLPK_real, __kase: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slacpy_(__uplo: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sladiv_(__a: *mut __CLPK_real, __b: *mut __CLPK_real,
                   __c__: *mut __CLPK_real, __d__: *mut __CLPK_real,
                   __p: *mut __CLPK_real, __q: *mut __CLPK_real)
     -> ::libc::c_int;
    pub fn slae2_(__a: *mut __CLPK_real, __b: *mut __CLPK_real,
                  __c__: *mut __CLPK_real, __rt1: *mut __CLPK_real,
                  __rt2: *mut __CLPK_real) -> ::libc::c_int;
    pub fn slaebz_(__ijob: *mut __CLPK_integer, __nitmax: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __mmax: *mut __CLPK_integer,
                   __minp: *mut __CLPK_integer, __nbmin: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_real, __reltol: *mut __CLPK_real,
                   __pivmin: *mut __CLPK_real, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __e2: *mut __CLPK_real,
                   __nval: *mut __CLPK_integer, __ab: *mut __CLPK_real,
                   __c__: *mut __CLPK_real, __mout: *mut __CLPK_integer,
                   __nab: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slaed0_(__icompq: *mut __CLPK_integer, __qsiz: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __q: *mut __CLPK_real,
                   __ldq: *mut __CLPK_integer, __qstore: *mut __CLPK_real,
                   __ldqs: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slaed1_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __q: *mut __CLPK_real, __ldq: *mut __CLPK_integer,
                   __indxq: *mut __CLPK_integer, __rho: *mut __CLPK_real,
                   __cutpnt: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slaed2_(__k: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __n1: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __q: *mut __CLPK_real, __ldq: *mut __CLPK_integer,
                   __indxq: *mut __CLPK_integer, __rho: *mut __CLPK_real,
                   __z__: *mut __CLPK_real, __dlamda: *mut __CLPK_real,
                   __w: *mut __CLPK_real, __q2: *mut __CLPK_real,
                   __indx: *mut __CLPK_integer, __indxc: *mut __CLPK_integer,
                   __indxp: *mut __CLPK_integer,
                   __coltyp: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slaed3_(__k: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __n1: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __q: *mut __CLPK_real, __ldq: *mut __CLPK_integer,
                   __rho: *mut __CLPK_real, __dlamda: *mut __CLPK_real,
                   __q2: *mut __CLPK_real, __indx: *mut __CLPK_integer,
                   __ctot: *mut __CLPK_integer, __w: *mut __CLPK_real,
                   __s: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slaed4_(__n: *mut __CLPK_integer, __i__: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __z__: *mut __CLPK_real,
                   __delta: *mut __CLPK_real, __rho: *mut __CLPK_real,
                   __dlam: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slaed5_(__i__: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __z__: *mut __CLPK_real, __delta: *mut __CLPK_real,
                   __rho: *mut __CLPK_real, __dlam: *mut __CLPK_real)
     -> ::libc::c_int;
    pub fn slaed6_(__kniter: *mut __CLPK_integer,
                   __orgati: *mut __CLPK_logical, __rho: *mut __CLPK_real,
                   __d__: *mut __CLPK_real, __z__: *mut __CLPK_real,
                   __finit: *mut __CLPK_real, __tau: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slaed7_(__icompq: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __qsiz: *mut __CLPK_integer, __tlvls: *mut __CLPK_integer,
                   __curlvl: *mut __CLPK_integer,
                   __curpbm: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __q: *mut __CLPK_real, __ldq: *mut __CLPK_integer,
                   __indxq: *mut __CLPK_integer, __rho: *mut __CLPK_real,
                   __cutpnt: *mut __CLPK_integer, __qstore: *mut __CLPK_real,
                   __qptr: *mut __CLPK_integer, __prmptr: *mut __CLPK_integer,
                   __perm: *mut __CLPK_integer, __givptr: *mut __CLPK_integer,
                   __givcol: *mut __CLPK_integer, __givnum: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slaed8_(__icompq: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __qsiz: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __q: *mut __CLPK_real,
                   __ldq: *mut __CLPK_integer, __indxq: *mut __CLPK_integer,
                   __rho: *mut __CLPK_real, __cutpnt: *mut __CLPK_integer,
                   __z__: *mut __CLPK_real, __dlamda: *mut __CLPK_real,
                   __q2: *mut __CLPK_real, __ldq2: *mut __CLPK_integer,
                   __w: *mut __CLPK_real, __perm: *mut __CLPK_integer,
                   __givptr: *mut __CLPK_integer,
                   __givcol: *mut __CLPK_integer, __givnum: *mut __CLPK_real,
                   __indxp: *mut __CLPK_integer, __indx: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slaed9_(__k: *mut __CLPK_integer, __kstart: *mut __CLPK_integer,
                   __kstop: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __q: *mut __CLPK_real,
                   __ldq: *mut __CLPK_integer, __rho: *mut __CLPK_real,
                   __dlamda: *mut __CLPK_real, __w: *mut __CLPK_real,
                   __s: *mut __CLPK_real, __lds: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slaeda_(__n: *mut __CLPK_integer, __tlvls: *mut __CLPK_integer,
                   __curlvl: *mut __CLPK_integer,
                   __curpbm: *mut __CLPK_integer,
                   __prmptr: *mut __CLPK_integer, __perm: *mut __CLPK_integer,
                   __givptr: *mut __CLPK_integer,
                   __givcol: *mut __CLPK_integer, __givnum: *mut __CLPK_real,
                   __q: *mut __CLPK_real, __qptr: *mut __CLPK_integer,
                   __z__: *mut __CLPK_real, __ztemp: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slaein_(__rightv: *mut __CLPK_logical,
                   __noinit: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __h__: *mut __CLPK_real, __ldh: *mut __CLPK_integer,
                   __wr: *mut __CLPK_real, __wi: *mut __CLPK_real,
                   __vr: *mut __CLPK_real, __vi: *mut __CLPK_real,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __eps3: *mut __CLPK_real,
                   __smlnum: *mut __CLPK_real, __bignum: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slaev2_(__a: *mut __CLPK_real, __b: *mut __CLPK_real,
                   __c__: *mut __CLPK_real, __rt1: *mut __CLPK_real,
                   __rt2: *mut __CLPK_real, __cs1: *mut __CLPK_real,
                   __sn1: *mut __CLPK_real) -> ::libc::c_int;
    pub fn slaexc_(__wantq: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __t: *mut __CLPK_real, __ldt: *mut __CLPK_integer,
                   __q: *mut __CLPK_real, __ldq: *mut __CLPK_integer,
                   __j1: *mut __CLPK_integer, __n1: *mut __CLPK_integer,
                   __n2: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slag2_(__a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                  __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                  __safmin: *mut __CLPK_real, __scale1: *mut __CLPK_real,
                  __scale2: *mut __CLPK_real, __wr1: *mut __CLPK_real,
                  __wr2: *mut __CLPK_real, __wi: *mut __CLPK_real)
     -> ::libc::c_int;
    pub fn slag2d_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __sa: *mut __CLPK_real, __ldsa: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slags2_(__upper: *mut __CLPK_logical, __a1: *mut __CLPK_real,
                   __a2: *mut __CLPK_real, __a3: *mut __CLPK_real,
                   __b1: *mut __CLPK_real, __b2: *mut __CLPK_real,
                   __b3: *mut __CLPK_real, __csu: *mut __CLPK_real,
                   __snu: *mut __CLPK_real, __csv: *mut __CLPK_real,
                   __snv: *mut __CLPK_real, __csq: *mut __CLPK_real,
                   __snq: *mut __CLPK_real) -> ::libc::c_int;
    pub fn slagtf_(__n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lambda: *mut __CLPK_real, __b: *mut __CLPK_real,
                   __c__: *mut __CLPK_real, __tol: *mut __CLPK_real,
                   __d__: *mut __CLPK_real, __in: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slagtm_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __alpha: *mut __CLPK_real,
                   __dl: *mut __CLPK_real, __d__: *mut __CLPK_real,
                   __du: *mut __CLPK_real, __x: *mut __CLPK_real,
                   __ldx: *mut __CLPK_integer, __beta: *mut __CLPK_real,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slagts_(__job: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __b: *mut __CLPK_real,
                   __c__: *mut __CLPK_real, __d__: *mut __CLPK_real,
                   __in: *mut __CLPK_integer, __y: *mut __CLPK_real,
                   __tol: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slagv2_(__a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __alphar: *mut __CLPK_real, __alphai: *mut __CLPK_real,
                   __beta: *mut __CLPK_real, __csl: *mut __CLPK_real,
                   __snl: *mut __CLPK_real, __csr: *mut __CLPK_real,
                   __snr: *mut __CLPK_real) -> ::libc::c_int;
    pub fn slahqr_(__wantt: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __h__: *mut __CLPK_real,
                   __ldh: *mut __CLPK_integer, __wr: *mut __CLPK_real,
                   __wi: *mut __CLPK_real, __iloz: *mut __CLPK_integer,
                   __ihiz: *mut __CLPK_integer, __z__: *mut __CLPK_real,
                   __ldz: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slahr2_(__n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __nb: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __t: *mut __CLPK_real, __ldt: *mut __CLPK_integer,
                   __y: *mut __CLPK_real, __ldy: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slahrd_(__n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __nb: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __t: *mut __CLPK_real, __ldt: *mut __CLPK_integer,
                   __y: *mut __CLPK_real, __ldy: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slaic1_(__job: *mut __CLPK_integer, __j: *mut __CLPK_integer,
                   __x: *mut __CLPK_real, __sest: *mut __CLPK_real,
                   __w: *mut __CLPK_real, __gamma: *mut __CLPK_real,
                   __sestpr: *mut __CLPK_real, __s: *mut __CLPK_real,
                   __c__: *mut __CLPK_real) -> ::libc::c_int;
    pub fn slaisnan_(__sin1: *mut __CLPK_real, __sin2: *mut __CLPK_real)
     -> __CLPK_logical;
    pub fn slaln2_(__ltrans: *mut __CLPK_logical, __na: *mut __CLPK_integer,
                   __nw: *mut __CLPK_integer, __smin: *mut __CLPK_real,
                   __ca: *mut __CLPK_real, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __d1: *mut __CLPK_real,
                   __d2: *mut __CLPK_real, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __wr: *mut __CLPK_real,
                   __wi: *mut __CLPK_real, __x: *mut __CLPK_real,
                   __ldx: *mut __CLPK_integer, __scale: *mut __CLPK_real,
                   __xnorm: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slals0_(__icompq: *mut __CLPK_integer, __nl: *mut __CLPK_integer,
                   __nr: *mut __CLPK_integer, __sqre: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __bx: *mut __CLPK_real,
                   __ldbx: *mut __CLPK_integer, __perm: *mut __CLPK_integer,
                   __givptr: *mut __CLPK_integer,
                   __givcol: *mut __CLPK_integer,
                   __ldgcol: *mut __CLPK_integer, __givnum: *mut __CLPK_real,
                   __ldgnum: *mut __CLPK_integer, __poles: *mut __CLPK_real,
                   __difl: *mut __CLPK_real, __difr: *mut __CLPK_real,
                   __z__: *mut __CLPK_real, __k: *mut __CLPK_integer,
                   __c__: *mut __CLPK_real, __s: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slalsa_(__icompq: *mut __CLPK_integer,
                   __smlsiz: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __bx: *mut __CLPK_real,
                   __ldbx: *mut __CLPK_integer, __u: *mut __CLPK_real,
                   __ldu: *mut __CLPK_integer, __vt: *mut __CLPK_real,
                   __k: *mut __CLPK_integer, __difl: *mut __CLPK_real,
                   __difr: *mut __CLPK_real, __z__: *mut __CLPK_real,
                   __poles: *mut __CLPK_real, __givptr: *mut __CLPK_integer,
                   __givcol: *mut __CLPK_integer,
                   __ldgcol: *mut __CLPK_integer, __perm: *mut __CLPK_integer,
                   __givnum: *mut __CLPK_real, __c__: *mut __CLPK_real,
                   __s: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slalsd_(__uplo: *mut ::libc::c_char, __smlsiz: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_real, __rank: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slamrg_(__n1: *mut __CLPK_integer, __n2: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __strd1: *mut __CLPK_integer,
                   __strd2: *mut __CLPK_integer, __index: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slaneg_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __lld: *mut __CLPK_real, __sigma: *mut __CLPK_real,
                   __pivmin: *mut __CLPK_real, __r__: *mut __CLPK_integer)
     -> __CLPK_integer;
    pub fn slangb_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_real, __ldab: *mut __CLPK_integer,
                   __work: *mut __CLPK_real) -> __CLPK_doublereal;
    pub fn slange_(__norm: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __work: *mut __CLPK_real)
     -> __CLPK_doublereal;
    pub fn slangt_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __dl: *mut __CLPK_real, __d__: *mut __CLPK_real,
                   __du: *mut __CLPK_real) -> __CLPK_doublereal;
    pub fn slanhs_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __work: *mut __CLPK_real) -> __CLPK_doublereal;
    pub fn slansb_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __ab: *mut __CLPK_real, __ldab: *mut __CLPK_integer,
                   __work: *mut __CLPK_real) -> __CLPK_doublereal;
    pub fn slansf_(__norm: *mut ::libc::c_char, __transr: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __work: *mut __CLPK_real)
     -> __CLPK_doublereal;
    pub fn slansp_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_real,
                   __work: *mut __CLPK_real) -> __CLPK_doublereal;
    pub fn slanst_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real)
     -> __CLPK_doublereal;
    pub fn slansy_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __work: *mut __CLPK_real)
     -> __CLPK_doublereal;
    pub fn slantb_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __ab: *mut __CLPK_real,
                   __ldab: *mut __CLPK_integer, __work: *mut __CLPK_real)
     -> __CLPK_doublereal;
    pub fn slantp_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_real, __work: *mut __CLPK_real)
     -> __CLPK_doublereal;
    pub fn slantr_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __work: *mut __CLPK_real)
     -> __CLPK_doublereal;
    pub fn slanv2_(__a: *mut __CLPK_real, __b: *mut __CLPK_real,
                   __c__: *mut __CLPK_real, __d__: *mut __CLPK_real,
                   __rt1r: *mut __CLPK_real, __rt1i: *mut __CLPK_real,
                   __rt2r: *mut __CLPK_real, __rt2i: *mut __CLPK_real,
                   __cs: *mut __CLPK_real, __sn: *mut __CLPK_real)
     -> ::libc::c_int;
    pub fn slapll_(__n: *mut __CLPK_integer, __x: *mut __CLPK_real,
                   __incx: *mut __CLPK_integer, __y: *mut __CLPK_real,
                   __incy: *mut __CLPK_integer, __ssmin: *mut __CLPK_real)
     -> ::libc::c_int;
    pub fn slapmt_(__forwrd: *mut __CLPK_logical, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __x: *mut __CLPK_real,
                   __ldx: *mut __CLPK_integer, __k: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slapy2_(__x: *mut __CLPK_real, __y: *mut __CLPK_real)
     -> __CLPK_doublereal;
    pub fn slapy3_(__x: *mut __CLPK_real, __y: *mut __CLPK_real,
                   __z__: *mut __CLPK_real) -> __CLPK_doublereal;
    pub fn slaqgb_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_real, __ldab: *mut __CLPK_integer,
                   __r__: *mut __CLPK_real, __c__: *mut __CLPK_real,
                   __rowcnd: *mut __CLPK_real, __colcnd: *mut __CLPK_real,
                   __amax: *mut __CLPK_real, __equed: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn slaqge_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __r__: *mut __CLPK_real, __c__: *mut __CLPK_real,
                   __rowcnd: *mut __CLPK_real, __colcnd: *mut __CLPK_real,
                   __amax: *mut __CLPK_real, __equed: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn slaqp2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __offset: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __jpvt: *mut __CLPK_integer,
                   __tau: *mut __CLPK_real, __vn1: *mut __CLPK_real,
                   __vn2: *mut __CLPK_real, __work: *mut __CLPK_real)
     -> ::libc::c_int;
    pub fn slaqps_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __offset: *mut __CLPK_integer, __nb: *mut __CLPK_integer,
                   __kb: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __jpvt: *mut __CLPK_integer,
                   __tau: *mut __CLPK_real, __vn1: *mut __CLPK_real,
                   __vn2: *mut __CLPK_real, __auxv: *mut __CLPK_real,
                   __f: *mut __CLPK_real, __ldf: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slaqr0_(__wantt: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __h__: *mut __CLPK_real,
                   __ldh: *mut __CLPK_integer, __wr: *mut __CLPK_real,
                   __wi: *mut __CLPK_real, __iloz: *mut __CLPK_integer,
                   __ihiz: *mut __CLPK_integer, __z__: *mut __CLPK_real,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slaqr1_(__n: *mut __CLPK_integer, __h__: *mut __CLPK_real,
                   __ldh: *mut __CLPK_integer, __sr1: *mut __CLPK_real,
                   __si1: *mut __CLPK_real, __sr2: *mut __CLPK_real,
                   __si2: *mut __CLPK_real, __v: *mut __CLPK_real)
     -> ::libc::c_int;
    pub fn slaqr2_(__wantt: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __ktop: *mut __CLPK_integer,
                   __kbot: *mut __CLPK_integer, __nw: *mut __CLPK_integer,
                   __h__: *mut __CLPK_real, __ldh: *mut __CLPK_integer,
                   __iloz: *mut __CLPK_integer, __ihiz: *mut __CLPK_integer,
                   __z__: *mut __CLPK_real, __ldz: *mut __CLPK_integer,
                   __ns: *mut __CLPK_integer, __nd: *mut __CLPK_integer,
                   __sr: *mut __CLPK_real, __si: *mut __CLPK_real,
                   __v: *mut __CLPK_real, __ldv: *mut __CLPK_integer,
                   __nh: *mut __CLPK_integer, __t: *mut __CLPK_real,
                   __ldt: *mut __CLPK_integer, __nv: *mut __CLPK_integer,
                   __wv: *mut __CLPK_real, __ldwv: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slaqr3_(__wantt: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __ktop: *mut __CLPK_integer,
                   __kbot: *mut __CLPK_integer, __nw: *mut __CLPK_integer,
                   __h__: *mut __CLPK_real, __ldh: *mut __CLPK_integer,
                   __iloz: *mut __CLPK_integer, __ihiz: *mut __CLPK_integer,
                   __z__: *mut __CLPK_real, __ldz: *mut __CLPK_integer,
                   __ns: *mut __CLPK_integer, __nd: *mut __CLPK_integer,
                   __sr: *mut __CLPK_real, __si: *mut __CLPK_real,
                   __v: *mut __CLPK_real, __ldv: *mut __CLPK_integer,
                   __nh: *mut __CLPK_integer, __t: *mut __CLPK_real,
                   __ldt: *mut __CLPK_integer, __nv: *mut __CLPK_integer,
                   __wv: *mut __CLPK_real, __ldwv: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slaqr4_(__wantt: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __h__: *mut __CLPK_real,
                   __ldh: *mut __CLPK_integer, __wr: *mut __CLPK_real,
                   __wi: *mut __CLPK_real, __iloz: *mut __CLPK_integer,
                   __ihiz: *mut __CLPK_integer, __z__: *mut __CLPK_real,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slaqr5_(__wantt: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __kacc22: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __ktop: *mut __CLPK_integer, __kbot: *mut __CLPK_integer,
                   __nshfts: *mut __CLPK_integer, __sr: *mut __CLPK_real,
                   __si: *mut __CLPK_real, __h__: *mut __CLPK_real,
                   __ldh: *mut __CLPK_integer, __iloz: *mut __CLPK_integer,
                   __ihiz: *mut __CLPK_integer, __z__: *mut __CLPK_real,
                   __ldz: *mut __CLPK_integer, __v: *mut __CLPK_real,
                   __ldv: *mut __CLPK_integer, __u: *mut __CLPK_real,
                   __ldu: *mut __CLPK_integer, __nv: *mut __CLPK_integer,
                   __wv: *mut __CLPK_real, __ldwv: *mut __CLPK_integer,
                   __nh: *mut __CLPK_integer, __wh: *mut __CLPK_real,
                   __ldwh: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slaqsb_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_real,
                   __ldab: *mut __CLPK_integer, __s: *mut __CLPK_real,
                   __scond: *mut __CLPK_real, __amax: *mut __CLPK_real,
                   __equed: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn slaqsp_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_real, __s: *mut __CLPK_real,
                   __scond: *mut __CLPK_real, __amax: *mut __CLPK_real,
                   __equed: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn slaqsy_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __s: *mut __CLPK_real, __scond: *mut __CLPK_real,
                   __amax: *mut __CLPK_real, __equed: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn slaqtr_(__ltran: *mut __CLPK_logical,
                   __l__CLPK_real: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __t: *mut __CLPK_real,
                   __ldt: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __w: *mut __CLPK_real, __scale: *mut __CLPK_real,
                   __x: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slar1v_(__n: *mut __CLPK_integer, __b1: *mut __CLPK_integer,
                   __bn: *mut __CLPK_integer, __lambda: *mut __CLPK_real,
                   __d__: *mut __CLPK_real, __l: *mut __CLPK_real,
                   __ld: *mut __CLPK_real, __lld: *mut __CLPK_real,
                   __pivmin: *mut __CLPK_real, __gaptol: *mut __CLPK_real,
                   __z__: *mut __CLPK_real, __wantnc: *mut __CLPK_logical,
                   __negcnt: *mut __CLPK_integer, __ztz: *mut __CLPK_real,
                   __mingma: *mut __CLPK_real, __r__: *mut __CLPK_integer,
                   __isuppz: *mut __CLPK_integer, __nrminv: *mut __CLPK_real,
                   __resid: *mut __CLPK_real, __rqcorr: *mut __CLPK_real,
                   __work: *mut __CLPK_real) -> ::libc::c_int;
    pub fn slar2v_(__n: *mut __CLPK_integer, __x: *mut __CLPK_real,
                   __y: *mut __CLPK_real, __z__: *mut __CLPK_real,
                   __incx: *mut __CLPK_integer, __c__: *mut __CLPK_real,
                   __s: *mut __CLPK_real, __incc: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slarf_(__side: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                  __n: *mut __CLPK_integer, __v: *mut __CLPK_real,
                  __incv: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                  __c__: *mut __CLPK_real, __ldc: *mut __CLPK_integer,
                  __work: *mut __CLPK_real) -> ::libc::c_int;
    pub fn slarfb_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __direct: *mut ::libc::c_char,
                   __storev: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __v: *mut __CLPK_real, __ldv: *mut __CLPK_integer,
                   __t: *mut __CLPK_real, __ldt: *mut __CLPK_integer,
                   __c__: *mut __CLPK_real, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __ldwork: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slarfg_(__n: *mut __CLPK_integer, __alpha: *mut __CLPK_real,
                   __x: *mut __CLPK_real, __incx: *mut __CLPK_integer,
                   __tau: *mut __CLPK_real) -> ::libc::c_int;
    pub fn slarfp_(__n: *mut __CLPK_integer, __alpha: *mut __CLPK_real,
                   __x: *mut __CLPK_real, __incx: *mut __CLPK_integer,
                   __tau: *mut __CLPK_real) -> ::libc::c_int;
    pub fn slarft_(__direct: *mut ::libc::c_char,
                   __storev: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __v: *mut __CLPK_real,
                   __ldv: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __t: *mut __CLPK_real, __ldt: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slarfx_(__side: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __v: *mut __CLPK_real,
                   __tau: *mut __CLPK_real, __c__: *mut __CLPK_real,
                   __ldc: *mut __CLPK_integer, __work: *mut __CLPK_real)
     -> ::libc::c_int;
    pub fn slargv_(__n: *mut __CLPK_integer, __x: *mut __CLPK_real,
                   __incx: *mut __CLPK_integer, __y: *mut __CLPK_real,
                   __incy: *mut __CLPK_integer, __c__: *mut __CLPK_real,
                   __incc: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slarnv_(__idist: *mut __CLPK_integer, __iseed: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __x: *mut __CLPK_real)
     -> ::libc::c_int;
    pub fn slarra_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __e2: *mut __CLPK_real,
                   __spltol: *mut __CLPK_real, __tnrm: *mut __CLPK_real,
                   __nsplit: *mut __CLPK_integer,
                   __isplit: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slarrb_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __lld: *mut __CLPK_real, __ifirst: *mut __CLPK_integer,
                   __ilast: *mut __CLPK_integer, __rtol1: *mut __CLPK_real,
                   __rtol2: *mut __CLPK_real, __offset: *mut __CLPK_integer,
                   __w: *mut __CLPK_real, __wgap: *mut __CLPK_real,
                   __werr: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __pivmin: *mut __CLPK_real,
                   __spdiam: *mut __CLPK_real, __twist: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slarrc_(__jobt: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __vl: *mut __CLPK_real, __vu: *mut __CLPK_real,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __pivmin: *mut __CLPK_real, __eigcnt: *mut __CLPK_integer,
                   __lcnt: *mut __CLPK_integer, __rcnt: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slarrd_(__range: *mut ::libc::c_char, __order: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __vl: *mut __CLPK_real,
                   __vu: *mut __CLPK_real, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer, __gers: *mut __CLPK_real,
                   __reltol: *mut __CLPK_real, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __e2: *mut __CLPK_real,
                   __pivmin: *mut __CLPK_real, __nsplit: *mut __CLPK_integer,
                   __isplit: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_real, __werr: *mut __CLPK_real,
                   __wl: *mut __CLPK_real, __wu: *mut __CLPK_real,
                   __iblock: *mut __CLPK_integer,
                   __indexw: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slarre_(__range: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __vl: *mut __CLPK_real, __vu: *mut __CLPK_real,
                   __il: *mut __CLPK_integer, __iu: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __e2: *mut __CLPK_real, __rtol1: *mut __CLPK_real,
                   __rtol2: *mut __CLPK_real, __spltol: *mut __CLPK_real,
                   __nsplit: *mut __CLPK_integer,
                   __isplit: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_real, __werr: *mut __CLPK_real,
                   __wgap: *mut __CLPK_real, __iblock: *mut __CLPK_integer,
                   __indexw: *mut __CLPK_integer, __gers: *mut __CLPK_real,
                   __pivmin: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slarrf_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __l: *mut __CLPK_real, __ld: *mut __CLPK_real,
                   __clstrt: *mut __CLPK_integer,
                   __clend: *mut __CLPK_integer, __w: *mut __CLPK_real,
                   __wgap: *mut __CLPK_real, __werr: *mut __CLPK_real,
                   __spdiam: *mut __CLPK_real, __clgapl: *mut __CLPK_real,
                   __clgapr: *mut __CLPK_real, __pivmin: *mut __CLPK_real,
                   __sigma: *mut __CLPK_real, __dplus: *mut __CLPK_real,
                   __lplus: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slarrj_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e2: *mut __CLPK_real, __ifirst: *mut __CLPK_integer,
                   __ilast: *mut __CLPK_integer, __rtol: *mut __CLPK_real,
                   __offset: *mut __CLPK_integer, __w: *mut __CLPK_real,
                   __werr: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __pivmin: *mut __CLPK_real,
                   __spdiam: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slarrk_(__n: *mut __CLPK_integer, __iw: *mut __CLPK_integer,
                   __gl: *mut __CLPK_real, __gu: *mut __CLPK_real,
                   __d__: *mut __CLPK_real, __e2: *mut __CLPK_real,
                   __pivmin: *mut __CLPK_real, __reltol: *mut __CLPK_real,
                   __w: *mut __CLPK_real, __werr: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slarrr_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slarrv_(__n: *mut __CLPK_integer, __vl: *mut __CLPK_real,
                   __vu: *mut __CLPK_real, __d__: *mut __CLPK_real,
                   __l: *mut __CLPK_real, __pivmin: *mut __CLPK_real,
                   __isplit: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __dol: *mut __CLPK_integer, __dou: *mut __CLPK_integer,
                   __minrgp: *mut __CLPK_real, __rtol1: *mut __CLPK_real,
                   __rtol2: *mut __CLPK_real, __w: *mut __CLPK_real,
                   __werr: *mut __CLPK_real, __wgap: *mut __CLPK_real,
                   __iblock: *mut __CLPK_integer,
                   __indexw: *mut __CLPK_integer, __gers: *mut __CLPK_real,
                   __z__: *mut __CLPK_real, __ldz: *mut __CLPK_integer,
                   __isuppz: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slarscl2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                     __d__: *mut __CLPK_real, __x: *mut __CLPK_real,
                     __ldx: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slartg_(__f: *mut __CLPK_real, __g: *mut __CLPK_real,
                   __cs: *mut __CLPK_real, __sn: *mut __CLPK_real,
                   __r__: *mut __CLPK_real) -> ::libc::c_int;
    pub fn slartv_(__n: *mut __CLPK_integer, __x: *mut __CLPK_real,
                   __incx: *mut __CLPK_integer, __y: *mut __CLPK_real,
                   __incy: *mut __CLPK_integer, __c__: *mut __CLPK_real,
                   __s: *mut __CLPK_real, __incc: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slaruv_(__iseed: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __x: *mut __CLPK_real) -> ::libc::c_int;
    pub fn slarz_(__side: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                  __n: *mut __CLPK_integer, __l: *mut __CLPK_integer,
                  __v: *mut __CLPK_real, __incv: *mut __CLPK_integer,
                  __tau: *mut __CLPK_real, __c__: *mut __CLPK_real,
                  __ldc: *mut __CLPK_integer, __work: *mut __CLPK_real)
     -> ::libc::c_int;
    pub fn slarzb_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __direct: *mut ::libc::c_char,
                   __storev: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __l: *mut __CLPK_integer, __v: *mut __CLPK_real,
                   __ldv: *mut __CLPK_integer, __t: *mut __CLPK_real,
                   __ldt: *mut __CLPK_integer, __c__: *mut __CLPK_real,
                   __ldc: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __ldwork: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slarzt_(__direct: *mut ::libc::c_char,
                   __storev: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __v: *mut __CLPK_real,
                   __ldv: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __t: *mut __CLPK_real, __ldt: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slas2_(__f: *mut __CLPK_real, __g: *mut __CLPK_real,
                  __h__: *mut __CLPK_real, __ssmin: *mut __CLPK_real,
                  __ssmax: *mut __CLPK_real) -> ::libc::c_int;
    pub fn slascl_(__type__: *mut ::libc::c_char, __kl: *mut __CLPK_integer,
                   __ku: *mut __CLPK_integer, __cfrom: *mut __CLPK_real,
                   __cto: *mut __CLPK_real, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slascl2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                    __d__: *mut __CLPK_real, __x: *mut __CLPK_real,
                    __ldx: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slasd0_(__n: *mut __CLPK_integer, __sqre: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __u: *mut __CLPK_real, __ldu: *mut __CLPK_integer,
                   __vt: *mut __CLPK_real, __ldvt: *mut __CLPK_integer,
                   __smlsiz: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slasd1_(__nl: *mut __CLPK_integer, __nr: *mut __CLPK_integer,
                   __sqre: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __alpha: *mut __CLPK_real, __beta: *mut __CLPK_real,
                   __u: *mut __CLPK_real, __ldu: *mut __CLPK_integer,
                   __vt: *mut __CLPK_real, __ldvt: *mut __CLPK_integer,
                   __idxq: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slasd2_(__nl: *mut __CLPK_integer, __nr: *mut __CLPK_integer,
                   __sqre: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __z__: *mut __CLPK_real,
                   __alpha: *mut __CLPK_real, __beta: *mut __CLPK_real,
                   __u: *mut __CLPK_real, __ldu: *mut __CLPK_integer,
                   __vt: *mut __CLPK_real, __ldvt: *mut __CLPK_integer,
                   __dsigma: *mut __CLPK_real, __u2: *mut __CLPK_real,
                   __ldu2: *mut __CLPK_integer, __vt2: *mut __CLPK_real,
                   __ldvt2: *mut __CLPK_integer, __idxp: *mut __CLPK_integer,
                   __idx: *mut __CLPK_integer, __idxc: *mut __CLPK_integer,
                   __idxq: *mut __CLPK_integer, __coltyp: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slasd3_(__nl: *mut __CLPK_integer, __nr: *mut __CLPK_integer,
                   __sqre: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __q: *mut __CLPK_real,
                   __ldq: *mut __CLPK_integer, __dsigma: *mut __CLPK_real,
                   __u: *mut __CLPK_real, __ldu: *mut __CLPK_integer,
                   __u2: *mut __CLPK_real, __ldu2: *mut __CLPK_integer,
                   __vt: *mut __CLPK_real, __ldvt: *mut __CLPK_integer,
                   __vt2: *mut __CLPK_real, __ldvt2: *mut __CLPK_integer,
                   __idxc: *mut __CLPK_integer, __ctot: *mut __CLPK_integer,
                   __z__: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slasd4_(__n: *mut __CLPK_integer, __i__: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __z__: *mut __CLPK_real,
                   __delta: *mut __CLPK_real, __rho: *mut __CLPK_real,
                   __sigma: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slasd5_(__i__: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __z__: *mut __CLPK_real, __delta: *mut __CLPK_real,
                   __rho: *mut __CLPK_real, __dsigma: *mut __CLPK_real,
                   __work: *mut __CLPK_real) -> ::libc::c_int;
    pub fn slasd6_(__icompq: *mut __CLPK_integer, __nl: *mut __CLPK_integer,
                   __nr: *mut __CLPK_integer, __sqre: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __vf: *mut __CLPK_real,
                   __vl: *mut __CLPK_real, __alpha: *mut __CLPK_real,
                   __beta: *mut __CLPK_real, __idxq: *mut __CLPK_integer,
                   __perm: *mut __CLPK_integer, __givptr: *mut __CLPK_integer,
                   __givcol: *mut __CLPK_integer,
                   __ldgcol: *mut __CLPK_integer, __givnum: *mut __CLPK_real,
                   __ldgnum: *mut __CLPK_integer, __poles: *mut __CLPK_real,
                   __difl: *mut __CLPK_real, __difr: *mut __CLPK_real,
                   __z__: *mut __CLPK_real, __k: *mut __CLPK_integer,
                   __c__: *mut __CLPK_real, __s: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slasd7_(__icompq: *mut __CLPK_integer, __nl: *mut __CLPK_integer,
                   __nr: *mut __CLPK_integer, __sqre: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __z__: *mut __CLPK_real, __zw: *mut __CLPK_real,
                   __vf: *mut __CLPK_real, __vfw: *mut __CLPK_real,
                   __vl: *mut __CLPK_real, __vlw: *mut __CLPK_real,
                   __alpha: *mut __CLPK_real, __beta: *mut __CLPK_real,
                   __dsigma: *mut __CLPK_real, __idx: *mut __CLPK_integer,
                   __idxp: *mut __CLPK_integer, __idxq: *mut __CLPK_integer,
                   __perm: *mut __CLPK_integer, __givptr: *mut __CLPK_integer,
                   __givcol: *mut __CLPK_integer,
                   __ldgcol: *mut __CLPK_integer, __givnum: *mut __CLPK_real,
                   __ldgnum: *mut __CLPK_integer, __c__: *mut __CLPK_real,
                   __s: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slasd8_(__icompq: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __z__: *mut __CLPK_real,
                   __vf: *mut __CLPK_real, __vl: *mut __CLPK_real,
                   __difl: *mut __CLPK_real, __difr: *mut __CLPK_real,
                   __lddifr: *mut __CLPK_integer, __dsigma: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slasda_(__icompq: *mut __CLPK_integer,
                   __smlsiz: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __sqre: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __u: *mut __CLPK_real,
                   __ldu: *mut __CLPK_integer, __vt: *mut __CLPK_real,
                   __k: *mut __CLPK_integer, __difl: *mut __CLPK_real,
                   __difr: *mut __CLPK_real, __z__: *mut __CLPK_real,
                   __poles: *mut __CLPK_real, __givptr: *mut __CLPK_integer,
                   __givcol: *mut __CLPK_integer,
                   __ldgcol: *mut __CLPK_integer, __perm: *mut __CLPK_integer,
                   __givnum: *mut __CLPK_real, __c__: *mut __CLPK_real,
                   __s: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slasdq_(__uplo: *mut ::libc::c_char, __sqre: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __ncvt: *mut __CLPK_integer,
                   __nru: *mut __CLPK_integer, __ncc: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __vt: *mut __CLPK_real, __ldvt: *mut __CLPK_integer,
                   __u: *mut __CLPK_real, __ldu: *mut __CLPK_integer,
                   __c__: *mut __CLPK_real, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slasdt_(__n: *mut __CLPK_integer, __lvl: *mut __CLPK_integer,
                   __nd: *mut __CLPK_integer, __inode: *mut __CLPK_integer,
                   __ndiml: *mut __CLPK_integer, __ndimr: *mut __CLPK_integer,
                   __msub: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slaset_(__uplo: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __alpha: *mut __CLPK_real,
                   __beta: *mut __CLPK_real, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slasq1_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slasq2_(__n: *mut __CLPK_integer, __z__: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slasq3_(__i0: *mut __CLPK_integer, __n0: *mut __CLPK_integer,
                   __z__: *mut __CLPK_real, __pp: *mut __CLPK_integer,
                   __dmin__: *mut __CLPK_real, __sigma: *mut __CLPK_real,
                   __desig: *mut __CLPK_real, __qmax: *mut __CLPK_real,
                   __nfail: *mut __CLPK_integer, __iter: *mut __CLPK_integer,
                   __ndiv: *mut __CLPK_integer, __ieee: *mut __CLPK_logical,
                   __ttype: *mut __CLPK_integer, __dmin1: *mut __CLPK_real,
                   __dmin2: *mut __CLPK_real, __dn: *mut __CLPK_real,
                   __dn1: *mut __CLPK_real, __dn2: *mut __CLPK_real,
                   __g: *mut __CLPK_real, __tau: *mut __CLPK_real)
     -> ::libc::c_int;
    pub fn slasq4_(__i0: *mut __CLPK_integer, __n0: *mut __CLPK_integer,
                   __z__: *mut __CLPK_real, __pp: *mut __CLPK_integer,
                   __n0in: *mut __CLPK_integer, __dmin__: *mut __CLPK_real,
                   __dmin1: *mut __CLPK_real, __dmin2: *mut __CLPK_real,
                   __dn: *mut __CLPK_real, __dn1: *mut __CLPK_real,
                   __dn2: *mut __CLPK_real, __tau: *mut __CLPK_real,
                   __ttype: *mut __CLPK_integer, __g: *mut __CLPK_real)
     -> ::libc::c_int;
    pub fn slasq5_(__i0: *mut __CLPK_integer, __n0: *mut __CLPK_integer,
                   __z__: *mut __CLPK_real, __pp: *mut __CLPK_integer,
                   __tau: *mut __CLPK_real, __dmin__: *mut __CLPK_real,
                   __dmin1: *mut __CLPK_real, __dmin2: *mut __CLPK_real,
                   __dn: *mut __CLPK_real, __dnm1: *mut __CLPK_real,
                   __dnm2: *mut __CLPK_real, __ieee: *mut __CLPK_logical)
     -> ::libc::c_int;
    pub fn slasq6_(__i0: *mut __CLPK_integer, __n0: *mut __CLPK_integer,
                   __z__: *mut __CLPK_real, __pp: *mut __CLPK_integer,
                   __dmin__: *mut __CLPK_real, __dmin1: *mut __CLPK_real,
                   __dmin2: *mut __CLPK_real, __dn: *mut __CLPK_real,
                   __dnm1: *mut __CLPK_real, __dnm2: *mut __CLPK_real)
     -> ::libc::c_int;
    pub fn slasr_(__side: *mut ::libc::c_char, __pivot: *mut ::libc::c_char,
                  __direct: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                  __n: *mut __CLPK_integer, __c__: *mut __CLPK_real,
                  __s: *mut __CLPK_real, __a: *mut __CLPK_real,
                  __lda: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slasrt_(__id: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slassq_(__n: *mut __CLPK_integer, __x: *mut __CLPK_real,
                   __incx: *mut __CLPK_integer, __scale: *mut __CLPK_real,
                   __sumsq: *mut __CLPK_real) -> ::libc::c_int;
    pub fn slasv2_(__f: *mut __CLPK_real, __g: *mut __CLPK_real,
                   __h__: *mut __CLPK_real, __ssmin: *mut __CLPK_real,
                   __ssmax: *mut __CLPK_real, __snr: *mut __CLPK_real,
                   __csr: *mut __CLPK_real, __snl: *mut __CLPK_real,
                   __csl: *mut __CLPK_real) -> ::libc::c_int;
    pub fn slaswp_(__n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __k1: *mut __CLPK_integer,
                   __k2: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __incx: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slasy2_(__ltranl: *mut __CLPK_logical,
                   __ltranr: *mut __CLPK_logical, __isgn: *mut __CLPK_integer,
                   __n1: *mut __CLPK_integer, __n2: *mut __CLPK_integer,
                   __tl: *mut __CLPK_real, __ldtl: *mut __CLPK_integer,
                   __tr: *mut __CLPK_real, __ldtr: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __scale: *mut __CLPK_real, __x: *mut __CLPK_real,
                   __ldx: *mut __CLPK_integer, __xnorm: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slasyf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nb: *mut __CLPK_integer, __kb: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __w: *mut __CLPK_real,
                   __ldw: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slatbs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __normin: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __kd: *mut __CLPK_integer,
                   __ab: *mut __CLPK_real, __ldab: *mut __CLPK_integer,
                   __x: *mut __CLPK_real, __scale: *mut __CLPK_real,
                   __cnorm: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slatdf_(__ijob: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __z__: *mut __CLPK_real, __ldz: *mut __CLPK_integer,
                   __rhs: *mut __CLPK_real, __rdsum: *mut __CLPK_real,
                   __rdscal: *mut __CLPK_real, __ipiv: *mut __CLPK_integer,
                   __jpiv: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slatps_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __normin: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_real,
                   __x: *mut __CLPK_real, __scale: *mut __CLPK_real,
                   __cnorm: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn slatrd_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nb: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __e: *mut __CLPK_real,
                   __tau: *mut __CLPK_real, __w: *mut __CLPK_real,
                   __ldw: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slatrs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __normin: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __x: *mut __CLPK_real,
                   __scale: *mut __CLPK_real, __cnorm: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slatrz_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __l: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __work: *mut __CLPK_real) -> ::libc::c_int;
    pub fn slatzm_(__side: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __v: *mut __CLPK_real,
                   __incv: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __c1: *mut __CLPK_real, __c2: *mut __CLPK_real,
                   __ldc: *mut __CLPK_integer, __work: *mut __CLPK_real)
     -> ::libc::c_int;
    pub fn slauu2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slauum_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sopgtr_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_real, __tau: *mut __CLPK_real,
                   __q: *mut __CLPK_real, __ldq: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sopmtr_(__side: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __trans: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_real,
                   __tau: *mut __CLPK_real, __c__: *mut __CLPK_real,
                   __ldc: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sorg2l_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sorg2r_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sorgbr_(__vect: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sorghr_(__n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sorgl2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sorglq_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sorgql_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sorgqr_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sorgr2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sorgrq_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sorgtr_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sorm2l_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __c__: *mut __CLPK_real, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sorm2r_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __c__: *mut __CLPK_real, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sormbr_(__vect: *mut ::libc::c_char, __side: *mut ::libc::c_char,
                   __trans: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_real, __c__: *mut __CLPK_real,
                   __ldc: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sormhr_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __ilo: *mut __CLPK_integer, __ihi: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_real, __c__: *mut __CLPK_real,
                   __ldc: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sorml2_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __c__: *mut __CLPK_real, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sormlq_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __c__: *mut __CLPK_real, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sormql_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __c__: *mut __CLPK_real, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sormqr_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __c__: *mut __CLPK_real, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sormr2_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __c__: *mut __CLPK_real, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sormr3_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __l: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_real, __c__: *mut __CLPK_real,
                   __ldc: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sormrq_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __c__: *mut __CLPK_real, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sormrz_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __l: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_real, __c__: *mut __CLPK_real,
                   __ldc: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sormtr_(__side: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __trans: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __tau: *mut __CLPK_real,
                   __c__: *mut __CLPK_real, __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn spbcon_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_real,
                   __ldab: *mut __CLPK_integer, __anorm: *mut __CLPK_real,
                   __rcond: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn spbequ_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_real,
                   __ldab: *mut __CLPK_integer, __s: *mut __CLPK_real,
                   __scond: *mut __CLPK_real, __amax: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn spbrfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ab: *mut __CLPK_real, __ldab: *mut __CLPK_integer,
                   __afb: *mut __CLPK_real, __ldafb: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_real, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn spbstf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_real,
                   __ldab: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn spbsv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __kd: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                  __ab: *mut __CLPK_real, __ldab: *mut __CLPK_integer,
                  __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn spbsvx_(__fact: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __kd: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ab: *mut __CLPK_real,
                   __ldab: *mut __CLPK_integer, __afb: *mut __CLPK_real,
                   __ldafb: *mut __CLPK_integer, __equed: *mut ::libc::c_char,
                   __s: *mut __CLPK_real, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_real,
                   __ldx: *mut __CLPK_integer, __rcond: *mut __CLPK_real,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn spbtf2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_real,
                   __ldab: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn spbtrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_real,
                   __ldab: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn spbtrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ab: *mut __CLPK_real, __ldab: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn spftrf_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn spftri_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn spftrs_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn spocon_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __anorm: *mut __CLPK_real, __rcond: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn spoequ_(__n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __s: *mut __CLPK_real,
                   __scond: *mut __CLPK_real, __amax: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn spoequb_(__n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                    __lda: *mut __CLPK_integer, __s: *mut __CLPK_real,
                    __scond: *mut __CLPK_real, __amax: *mut __CLPK_real,
                    __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sporfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __af: *mut __CLPK_real,
                   __ldaf: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_real,
                   __ldx: *mut __CLPK_integer, __ferr: *mut __CLPK_real,
                   __berr: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sposv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_real,
                  __lda: *mut __CLPK_integer, __b: *mut __CLPK_real,
                  __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sposvx_(__fact: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __af: *mut __CLPK_real, __ldaf: *mut __CLPK_integer,
                   __equed: *mut ::libc::c_char, __s: *mut __CLPK_real,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_real, __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_real, __ferr: *mut __CLPK_real,
                   __berr: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn spotf2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn spotrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn spotri_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn spotrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sppcon_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_real, __anorm: *mut __CLPK_real,
                   __rcond: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sppequ_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_real, __s: *mut __CLPK_real,
                   __scond: *mut __CLPK_real, __amax: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn spprfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_real,
                   __afp: *mut __CLPK_real, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_real,
                   __ldx: *mut __CLPK_integer, __ferr: *mut __CLPK_real,
                   __berr: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sppsv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_real,
                  __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sppsvx_(__fact: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ap: *mut __CLPK_real, __afp: *mut __CLPK_real,
                   __equed: *mut ::libc::c_char, __s: *mut __CLPK_real,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_real, __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_real, __ferr: *mut __CLPK_real,
                   __berr: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn spptrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn spptri_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn spptrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_real,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn spstf2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __piv: *mut __CLPK_integer, __rank: *mut __CLPK_integer,
                   __tol: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn spstrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __piv: *mut __CLPK_integer, __rank: *mut __CLPK_integer,
                   __tol: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sptcon_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __anorm: *mut __CLPK_real,
                   __rcond: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn spteqr_(__compz: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __z__: *mut __CLPK_real, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sptrfs_(__n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __df: *mut __CLPK_real, __ef: *mut __CLPK_real,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_real, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sptsv_(__n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                  __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                  __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sptsvx_(__fact: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __df: *mut __CLPK_real,
                   __ef: *mut __CLPK_real, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_real,
                   __ldx: *mut __CLPK_integer, __rcond: *mut __CLPK_real,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn spttrf_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn spttrs_(__n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sptts2_(__n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn srscl_(__n: *mut __CLPK_integer, __sa: *mut __CLPK_real,
                  __sx: *mut __CLPK_real, __incx: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ssbev_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __kd: *mut __CLPK_integer,
                  __ab: *mut __CLPK_real, __ldab: *mut __CLPK_integer,
                  __w: *mut __CLPK_real, __z__: *mut __CLPK_real,
                  __ldz: *mut __CLPK_integer, __work: *mut __CLPK_real,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ssbevd_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __kd: *mut __CLPK_integer,
                   __ab: *mut __CLPK_real, __ldab: *mut __CLPK_integer,
                   __w: *mut __CLPK_real, __z__: *mut __CLPK_real,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ssbevx_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_real,
                   __ldab: *mut __CLPK_integer, __q: *mut __CLPK_real,
                   __ldq: *mut __CLPK_integer, __vl: *mut __CLPK_real,
                   __vu: *mut __CLPK_real, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer, __abstol: *mut __CLPK_real,
                   __m: *mut __CLPK_integer, __w: *mut __CLPK_real,
                   __z__: *mut __CLPK_real, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __ifail: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ssbgst_(__vect: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ka: *mut __CLPK_integer,
                   __kb: *mut __CLPK_integer, __ab: *mut __CLPK_real,
                   __ldab: *mut __CLPK_integer, __bb: *mut __CLPK_real,
                   __ldbb: *mut __CLPK_integer, __x: *mut __CLPK_real,
                   __ldx: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ssbgv_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __ka: *mut __CLPK_integer,
                  __kb: *mut __CLPK_integer, __ab: *mut __CLPK_real,
                  __ldab: *mut __CLPK_integer, __bb: *mut __CLPK_real,
                  __ldbb: *mut __CLPK_integer, __w: *mut __CLPK_real,
                  __z__: *mut __CLPK_real, __ldz: *mut __CLPK_integer,
                  __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ssbgvd_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ka: *mut __CLPK_integer,
                   __kb: *mut __CLPK_integer, __ab: *mut __CLPK_real,
                   __ldab: *mut __CLPK_integer, __bb: *mut __CLPK_real,
                   __ldbb: *mut __CLPK_integer, __w: *mut __CLPK_real,
                   __z__: *mut __CLPK_real, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ssbgvx_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ka: *mut __CLPK_integer, __kb: *mut __CLPK_integer,
                   __ab: *mut __CLPK_real, __ldab: *mut __CLPK_integer,
                   __bb: *mut __CLPK_real, __ldbb: *mut __CLPK_integer,
                   __q: *mut __CLPK_real, __ldq: *mut __CLPK_integer,
                   __vl: *mut __CLPK_real, __vu: *mut __CLPK_real,
                   __il: *mut __CLPK_integer, __iu: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_real, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_real, __z__: *mut __CLPK_real,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __ifail: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ssbtrd_(__vect: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __kd: *mut __CLPK_integer,
                   __ab: *mut __CLPK_real, __ldab: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __q: *mut __CLPK_real, __ldq: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ssfrk_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                  __trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __k: *mut __CLPK_integer, __alpha: *mut __CLPK_real,
                  __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                  __beta: *mut __CLPK_real, __c__: *mut __CLPK_real)
     -> ::libc::c_int;
    pub fn sspcon_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_real, __ipiv: *mut __CLPK_integer,
                   __anorm: *mut __CLPK_real, __rcond: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sspev_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __ap: *mut __CLPK_real,
                  __w: *mut __CLPK_real, __z__: *mut __CLPK_real,
                  __ldz: *mut __CLPK_integer, __work: *mut __CLPK_real,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sspevd_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_real,
                   __w: *mut __CLPK_real, __z__: *mut __CLPK_real,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sspevx_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_real, __vl: *mut __CLPK_real,
                   __vu: *mut __CLPK_real, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer, __abstol: *mut __CLPK_real,
                   __m: *mut __CLPK_integer, __w: *mut __CLPK_real,
                   __z__: *mut __CLPK_real, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __ifail: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sspgst_(__itype: *mut __CLPK_integer, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_real,
                   __bp: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sspgv_(__itype: *mut __CLPK_integer, __jobz: *mut ::libc::c_char,
                  __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __ap: *mut __CLPK_real, __bp: *mut __CLPK_real,
                  __w: *mut __CLPK_real, __z__: *mut __CLPK_real,
                  __ldz: *mut __CLPK_integer, __work: *mut __CLPK_real,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sspgvd_(__itype: *mut __CLPK_integer, __jobz: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_real, __bp: *mut __CLPK_real,
                   __w: *mut __CLPK_real, __z__: *mut __CLPK_real,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sspgvx_(__itype: *mut __CLPK_integer, __jobz: *mut ::libc::c_char,
                   __range: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_real,
                   __bp: *mut __CLPK_real, __vl: *mut __CLPK_real,
                   __vu: *mut __CLPK_real, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer, __abstol: *mut __CLPK_real,
                   __m: *mut __CLPK_integer, __w: *mut __CLPK_real,
                   __z__: *mut __CLPK_real, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __ifail: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ssprfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_real,
                   __afp: *mut __CLPK_real, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_real, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sspsv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_real,
                  __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_real,
                  __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sspsvx_(__fact: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ap: *mut __CLPK_real, __afp: *mut __CLPK_real,
                   __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_real,
                   __ldx: *mut __CLPK_integer, __rcond: *mut __CLPK_real,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ssptrd_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_real, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __tau: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ssptrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_real, __ipiv: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ssptri_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_real, __ipiv: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ssptrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_real,
                   __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sstebz_(__range: *mut ::libc::c_char, __order: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __vl: *mut __CLPK_real,
                   __vu: *mut __CLPK_real, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer, __abstol: *mut __CLPK_real,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __m: *mut __CLPK_integer, __nsplit: *mut __CLPK_integer,
                   __w: *mut __CLPK_real, __iblock: *mut __CLPK_integer,
                   __isplit: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sstedc_(__compz: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __z__: *mut __CLPK_real, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sstegr_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __vl: *mut __CLPK_real,
                   __vu: *mut __CLPK_real, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer, __abstol: *mut __CLPK_real,
                   __m: *mut __CLPK_integer, __w: *mut __CLPK_real,
                   __z__: *mut __CLPK_real, __ldz: *mut __CLPK_integer,
                   __isuppz: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sstein_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_real, __iblock: *mut __CLPK_integer,
                   __isplit: *mut __CLPK_integer, __z__: *mut __CLPK_real,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __ifail: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn sstemr_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __vl: *mut __CLPK_real,
                   __vu: *mut __CLPK_real, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_real, __z__: *mut __CLPK_real,
                   __ldz: *mut __CLPK_integer, __nzc: *mut __CLPK_integer,
                   __isuppz: *mut __CLPK_integer,
                   __tryrac: *mut __CLPK_logical, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ssteqr_(__compz: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __z__: *mut __CLPK_real, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ssterf_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sstev_(__jobz: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                  __z__: *mut __CLPK_real, __ldz: *mut __CLPK_integer,
                  __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sstevd_(__jobz: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __z__: *mut __CLPK_real, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sstevr_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __vl: *mut __CLPK_real,
                   __vu: *mut __CLPK_real, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer, __abstol: *mut __CLPK_real,
                   __m: *mut __CLPK_integer, __w: *mut __CLPK_real,
                   __z__: *mut __CLPK_real, __ldz: *mut __CLPK_integer,
                   __isuppz: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn sstevx_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __d__: *mut __CLPK_real,
                   __e: *mut __CLPK_real, __vl: *mut __CLPK_real,
                   __vu: *mut __CLPK_real, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer, __abstol: *mut __CLPK_real,
                   __m: *mut __CLPK_integer, __w: *mut __CLPK_real,
                   __z__: *mut __CLPK_real, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __ifail: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ssycon_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __anorm: *mut __CLPK_real,
                   __rcond: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ssyequb_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                    __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                    __s: *mut __CLPK_real, __scond: *mut __CLPK_real,
                    __amax: *mut __CLPK_real, __work: *mut __CLPK_real,
                    __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ssyev_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                  __lda: *mut __CLPK_integer, __w: *mut __CLPK_real,
                  __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ssyevd_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __w: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ssyevr_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __vl: *mut __CLPK_real, __vu: *mut __CLPK_real,
                   __il: *mut __CLPK_integer, __iu: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_real, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_real, __z__: *mut __CLPK_real,
                   __ldz: *mut __CLPK_integer, __isuppz: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ssyevx_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __vl: *mut __CLPK_real, __vu: *mut __CLPK_real,
                   __il: *mut __CLPK_integer, __iu: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_real, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_real, __z__: *mut __CLPK_real,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __ifail: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ssygs2_(__itype: *mut __CLPK_integer, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ssygst_(__itype: *mut __CLPK_integer, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ssygv_(__itype: *mut __CLPK_integer, __jobz: *mut ::libc::c_char,
                  __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                  __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                  __w: *mut __CLPK_real, __work: *mut __CLPK_real,
                  __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ssygvd_(__itype: *mut __CLPK_integer, __jobz: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __w: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ssygvx_(__itype: *mut __CLPK_integer, __jobz: *mut ::libc::c_char,
                   __range: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __vl: *mut __CLPK_real,
                   __vu: *mut __CLPK_real, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer, __abstol: *mut __CLPK_real,
                   __m: *mut __CLPK_integer, __w: *mut __CLPK_real,
                   __z__: *mut __CLPK_real, __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer, __ifail: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ssyrfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __af: *mut __CLPK_real,
                   __ldaf: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_real, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ssysv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_real,
                  __lda: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                  __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                  __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ssysvx_(__fact: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __af: *mut __CLPK_real, __ldaf: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_real,
                   __ldx: *mut __CLPK_integer, __rcond: *mut __CLPK_real,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ssytd2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __tau: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ssytf2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ssytrd_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __e: *mut __CLPK_real,
                   __tau: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ssytrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ssytri_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ssytrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn stbcon_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_real,
                   __ldab: *mut __CLPK_integer, __rcond: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn stbrfs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ab: *mut __CLPK_real, __ldab: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_real, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn stbtrs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ab: *mut __CLPK_real, __ldab: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn stfsm_(__transr: *mut ::libc::c_char, __side: *mut ::libc::c_char,
                  __uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                  __diag: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                  __n: *mut __CLPK_integer, __alpha: *mut __CLPK_real,
                  __a: *mut __CLPK_real, __b: *mut __CLPK_real,
                  __ldb: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn stftri_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn stfttp_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __arf: *mut __CLPK_real,
                   __ap: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn stfttr_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __arf: *mut __CLPK_real,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn stgevc_(__side: *mut ::libc::c_char, __howmny: *mut ::libc::c_char,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __s: *mut __CLPK_real, __lds: *mut __CLPK_integer,
                   __p: *mut __CLPK_real, __ldp: *mut __CLPK_integer,
                   __vl: *mut __CLPK_real, __ldvl: *mut __CLPK_integer,
                   __vr: *mut __CLPK_real, __ldvr: *mut __CLPK_integer,
                   __mm: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn stgex2_(__wantq: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __q: *mut __CLPK_real,
                   __ldq: *mut __CLPK_integer, __z__: *mut __CLPK_real,
                   __ldz: *mut __CLPK_integer, __j1: *mut __CLPK_integer,
                   __n1: *mut __CLPK_integer, __n2: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn stgexc_(__wantq: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __q: *mut __CLPK_real,
                   __ldq: *mut __CLPK_integer, __z__: *mut __CLPK_real,
                   __ldz: *mut __CLPK_integer, __ifst: *mut __CLPK_integer,
                   __ilst: *mut __CLPK_integer, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn stgsen_(__ijob: *mut __CLPK_integer, __wantq: *mut __CLPK_logical,
                   __wantz: *mut __CLPK_logical,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __alphar: *mut __CLPK_real, __alphai: *mut __CLPK_real,
                   __beta: *mut __CLPK_real, __q: *mut __CLPK_real,
                   __ldq: *mut __CLPK_integer, __z__: *mut __CLPK_real,
                   __ldz: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __pl: *mut __CLPK_real, __pr: *mut __CLPK_real,
                   __dif: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn stgsja_(__jobu: *mut ::libc::c_char, __jobv: *mut ::libc::c_char,
                   __jobq: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __p: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __l: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __tola: *mut __CLPK_real, __tolb: *mut __CLPK_real,
                   __alpha: *mut __CLPK_real, __beta: *mut __CLPK_real,
                   __u: *mut __CLPK_real, __ldu: *mut __CLPK_integer,
                   __v: *mut __CLPK_real, __ldv: *mut __CLPK_integer,
                   __q: *mut __CLPK_real, __ldq: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __ncycle: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn stgsna_(__job: *mut ::libc::c_char, __howmny: *mut ::libc::c_char,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __vl: *mut __CLPK_real, __ldvl: *mut __CLPK_integer,
                   __vr: *mut __CLPK_real, __ldvr: *mut __CLPK_integer,
                   __s: *mut __CLPK_real, __dif: *mut __CLPK_real,
                   __mm: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn stgsy2_(__trans: *mut ::libc::c_char, __ijob: *mut __CLPK_integer,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __c__: *mut __CLPK_real, __ldc: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __ldd: *mut __CLPK_integer,
                   __e: *mut __CLPK_real, __lde: *mut __CLPK_integer,
                   __f: *mut __CLPK_real, __ldf: *mut __CLPK_integer,
                   __scale: *mut __CLPK_real, __rdsum: *mut __CLPK_real,
                   __rdscal: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __pq: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn stgsyl_(__trans: *mut ::libc::c_char, __ijob: *mut __CLPK_integer,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __c__: *mut __CLPK_real, __ldc: *mut __CLPK_integer,
                   __d__: *mut __CLPK_real, __ldd: *mut __CLPK_integer,
                   __e: *mut __CLPK_real, __lde: *mut __CLPK_integer,
                   __f: *mut __CLPK_real, __ldf: *mut __CLPK_integer,
                   __scale: *mut __CLPK_real, __dif: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __lwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn stpcon_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_real, __rcond: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn stprfs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_real,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_real, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_real, __berr: *mut __CLPK_real,
                   __work: *mut __CLPK_real, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn stptri_(__uplo: *mut ::libc::c_char, __diag: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn stptrs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __ap: *mut __CLPK_real,
                   __b: *mut __CLPK_real, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn stpttf_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_real,
                   __arf: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn stpttr_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_real, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn strcon_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn strevc_(__side: *mut ::libc::c_char, __howmny: *mut ::libc::c_char,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __t: *mut __CLPK_real, __ldt: *mut __CLPK_integer,
                   __vl: *mut __CLPK_real, __ldvl: *mut __CLPK_integer,
                   __vr: *mut __CLPK_real, __ldvr: *mut __CLPK_integer,
                   __mm: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn strexc_(__compq: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __t: *mut __CLPK_real, __ldt: *mut __CLPK_integer,
                   __q: *mut __CLPK_real, __ldq: *mut __CLPK_integer,
                   __ifst: *mut __CLPK_integer, __ilst: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn strrfs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __x: *mut __CLPK_real,
                   __ldx: *mut __CLPK_integer, __ferr: *mut __CLPK_real,
                   __berr: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn strsen_(__job: *mut ::libc::c_char, __compq: *mut ::libc::c_char,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __t: *mut __CLPK_real, __ldt: *mut __CLPK_integer,
                   __q: *mut __CLPK_real, __ldq: *mut __CLPK_integer,
                   __wr: *mut __CLPK_real, __wi: *mut __CLPK_real,
                   __m: *mut __CLPK_integer, __s: *mut __CLPK_real,
                   __sep: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn strsna_(__job: *mut ::libc::c_char, __howmny: *mut ::libc::c_char,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __t: *mut __CLPK_real, __ldt: *mut __CLPK_integer,
                   __vl: *mut __CLPK_real, __ldvl: *mut __CLPK_integer,
                   __vr: *mut __CLPK_real, __ldvr: *mut __CLPK_integer,
                   __s: *mut __CLPK_real, __sep: *mut __CLPK_real,
                   __mm: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __work: *mut __CLPK_real, __ldwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn strsyl_(__trana: *mut ::libc::c_char, __tranb: *mut ::libc::c_char,
                   __isgn: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __c__: *mut __CLPK_real,
                   __ldc: *mut __CLPK_integer, __scale: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn strti2_(__uplo: *mut ::libc::c_char, __diag: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn strtri_(__uplo: *mut ::libc::c_char, __diag: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn strtrs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_real,
                   __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn strttf_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_real,
                   __lda: *mut __CLPK_integer, __arf: *mut __CLPK_real,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn strttp_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __ap: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn stzrqf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_real, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn stzrzf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_real, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_real, __work: *mut __CLPK_real,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zbdsqr_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ncvt: *mut __CLPK_integer, __nru: *mut __CLPK_integer,
                   __ncc: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublereal,
                   __vt: *mut __CLPK_doublecomplex,
                   __ldvt: *mut __CLPK_integer,
                   __u: *mut __CLPK_doublecomplex, __ldu: *mut __CLPK_integer,
                   __c__: *mut __CLPK_doublecomplex,
                   __ldc: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zcgesv_(__n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __swork: *mut __CLPK_complex,
                   __rwork: *mut __CLPK_doublereal,
                   __iter: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zcposv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __swork: *mut __CLPK_complex,
                   __rwork: *mut __CLPK_doublereal,
                   __iter: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zdrscl_(__n: *mut __CLPK_integer, __sa: *mut __CLPK_doublereal,
                   __sx: *mut __CLPK_doublecomplex,
                   __incx: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgbbrd_(__vect: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __ncc: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublereal,
                   __q: *mut __CLPK_doublecomplex, __ldq: *mut __CLPK_integer,
                   __pt: *mut __CLPK_doublecomplex,
                   __ldpt: *mut __CLPK_integer,
                   __c__: *mut __CLPK_doublecomplex,
                   __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgbcon_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __anorm: *mut __CLPK_doublereal,
                   __rcond: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgbequ_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer, __r__: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal,
                   __rowcnd: *mut __CLPK_doublereal,
                   __colcnd: *mut __CLPK_doublereal,
                   __amax: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgbequb_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                    __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                    __ab: *mut __CLPK_doublecomplex,
                    __ldab: *mut __CLPK_integer,
                    __r__: *mut __CLPK_doublereal,
                    __c__: *mut __CLPK_doublereal,
                    __rowcnd: *mut __CLPK_doublereal,
                    __colcnd: *mut __CLPK_doublereal,
                    __amax: *mut __CLPK_doublereal,
                    __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgbrfs_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer,
                   __afb: *mut __CLPK_doublecomplex,
                   __ldafb: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgbsv_(__n: *mut __CLPK_integer, __kl: *mut __CLPK_integer,
                  __ku: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                  __ab: *mut __CLPK_doublecomplex,
                  __ldab: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                  __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgbsvx_(__fact: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __kl: *mut __CLPK_integer,
                   __ku: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer,
                   __afb: *mut __CLPK_doublecomplex,
                   __ldafb: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __equed: *mut ::libc::c_char,
                   __r__: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgbtf2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgbtrf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgbtrs_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgebak_(__job: *mut ::libc::c_char, __side: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer,
                   __scale: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __v: *mut __CLPK_doublecomplex, __ldv: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgebal_(__job: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __ilo: *mut __CLPK_integer, __ihi: *mut __CLPK_integer,
                   __scale: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgebd2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __tauq: *mut __CLPK_doublecomplex,
                   __taup: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgebrd_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __tauq: *mut __CLPK_doublecomplex,
                   __taup: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zgecon_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __anorm: *mut __CLPK_doublereal,
                   __rcond: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgeequ_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __r__: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal,
                   __rowcnd: *mut __CLPK_doublereal,
                   __colcnd: *mut __CLPK_doublereal,
                   __amax: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgeequb_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                    __a: *mut __CLPK_doublecomplex,
                    __lda: *mut __CLPK_integer, __r__: *mut __CLPK_doublereal,
                    __c__: *mut __CLPK_doublereal,
                    __rowcnd: *mut __CLPK_doublereal,
                    __colcnd: *mut __CLPK_doublereal,
                    __amax: *mut __CLPK_doublereal,
                    __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgees_(__jobvs: *mut ::libc::c_char, __sort: *mut ::libc::c_char,
                  __select: __CLPK_L_fp, __n: *mut __CLPK_integer,
                  __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                  __sdim: *mut __CLPK_integer, __w: *mut __CLPK_doublecomplex,
                  __vs: *mut __CLPK_doublecomplex,
                  __ldvs: *mut __CLPK_integer,
                  __work: *mut __CLPK_doublecomplex,
                  __lwork: *mut __CLPK_integer,
                  __rwork: *mut __CLPK_doublereal,
                  __bwork: *mut __CLPK_logical, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zgeesx_(__jobvs: *mut ::libc::c_char, __sort: *mut ::libc::c_char,
                   __select: __CLPK_L_fp, __sense: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __sdim: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublecomplex,
                   __vs: *mut __CLPK_doublecomplex,
                   __ldvs: *mut __CLPK_integer,
                   __rconde: *mut __CLPK_doublereal,
                   __rcondv: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __bwork: *mut __CLPK_logical, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zgeev_(__jobvl: *mut ::libc::c_char, __jobvr: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                  __lda: *mut __CLPK_integer, __w: *mut __CLPK_doublecomplex,
                  __vl: *mut __CLPK_doublecomplex,
                  __ldvl: *mut __CLPK_integer,
                  __vr: *mut __CLPK_doublecomplex,
                  __ldvr: *mut __CLPK_integer,
                  __work: *mut __CLPK_doublecomplex,
                  __lwork: *mut __CLPK_integer,
                  __rwork: *mut __CLPK_doublereal,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgeevx_(__balanc: *mut ::libc::c_char,
                   __jobvl: *mut ::libc::c_char, __jobvr: *mut ::libc::c_char,
                   __sense: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublecomplex,
                   __vl: *mut __CLPK_doublecomplex,
                   __ldvl: *mut __CLPK_integer,
                   __vr: *mut __CLPK_doublecomplex,
                   __ldvr: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer,
                   __scale: *mut __CLPK_doublereal,
                   __abnrm: *mut __CLPK_doublereal,
                   __rconde: *mut __CLPK_doublereal,
                   __rcondv: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgegs_(__jobvsl: *mut ::libc::c_char,
                  __jobvsr: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                  __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                  __alpha: *mut __CLPK_doublecomplex,
                  __beta: *mut __CLPK_doublecomplex,
                  __vsl: *mut __CLPK_doublecomplex,
                  __ldvsl: *mut __CLPK_integer,
                  __vsr: *mut __CLPK_doublecomplex,
                  __ldvsr: *mut __CLPK_integer,
                  __work: *mut __CLPK_doublecomplex,
                  __lwork: *mut __CLPK_integer,
                  __rwork: *mut __CLPK_doublereal,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgegv_(__jobvl: *mut ::libc::c_char, __jobvr: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                  __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublecomplex,
                  __ldb: *mut __CLPK_integer,
                  __alpha: *mut __CLPK_doublecomplex,
                  __beta: *mut __CLPK_doublecomplex,
                  __vl: *mut __CLPK_doublecomplex,
                  __ldvl: *mut __CLPK_integer,
                  __vr: *mut __CLPK_doublecomplex,
                  __ldvr: *mut __CLPK_integer,
                  __work: *mut __CLPK_doublecomplex,
                  __lwork: *mut __CLPK_integer,
                  __rwork: *mut __CLPK_doublereal,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgehd2_(__n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgehrd_(__n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zgelq2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgelqf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zgels_(__trans: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                  __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                  __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                  __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                  __work: *mut __CLPK_doublecomplex,
                  __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zgelsd_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __s: *mut __CLPK_doublereal,
                   __rcond: *mut __CLPK_doublereal,
                   __rank: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zgelss_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __s: *mut __CLPK_doublereal,
                   __rcond: *mut __CLPK_doublereal,
                   __rank: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgelsx_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __jpvt: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __rank: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgelsy_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __jpvt: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __rank: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgeql2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgeqlf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zgeqp3_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __jpvt: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgeqpf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __jpvt: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgeqr2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgeqrf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zgerfs_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __af: *mut __CLPK_doublecomplex,
                   __ldaf: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgerq2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgerqf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zgesc2_(__n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __rhs: *mut __CLPK_doublecomplex,
                   __ipiv: *mut __CLPK_integer, __jpiv: *mut __CLPK_integer,
                   __scale: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn zgesdd_(__jobz: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __s: *mut __CLPK_doublereal,
                   __u: *mut __CLPK_doublecomplex, __ldu: *mut __CLPK_integer,
                   __vt: *mut __CLPK_doublecomplex,
                   __ldvt: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zgesv_(__n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                  __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                  __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_doublecomplex,
                  __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zgesvd_(__jobu: *mut ::libc::c_char, __jobvt: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __s: *mut __CLPK_doublereal,
                   __u: *mut __CLPK_doublecomplex, __ldu: *mut __CLPK_integer,
                   __vt: *mut __CLPK_doublecomplex,
                   __ldvt: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgesvx_(__fact: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __af: *mut __CLPK_doublecomplex,
                   __ldaf: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __equed: *mut ::libc::c_char,
                   __r__: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgetc2_(__n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __jpiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zgetf2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zgetrf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zgetri_(__n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zgetrs_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zggbak_(__job: *mut ::libc::c_char, __side: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer,
                   __lscale: *mut __CLPK_doublereal,
                   __rscale: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __v: *mut __CLPK_doublecomplex, __ldv: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zggbal_(__job: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __ilo: *mut __CLPK_integer, __ihi: *mut __CLPK_integer,
                   __lscale: *mut __CLPK_doublereal,
                   __rscale: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgges_(__jobvsl: *mut ::libc::c_char,
                  __jobvsr: *mut ::libc::c_char, __sort: *mut ::libc::c_char,
                  __selctg: __CLPK_L_fp, __n: *mut __CLPK_integer,
                  __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                  __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                  __sdim: *mut __CLPK_integer,
                  __alpha: *mut __CLPK_doublecomplex,
                  __beta: *mut __CLPK_doublecomplex,
                  __vsl: *mut __CLPK_doublecomplex,
                  __ldvsl: *mut __CLPK_integer,
                  __vsr: *mut __CLPK_doublecomplex,
                  __ldvsr: *mut __CLPK_integer,
                  __work: *mut __CLPK_doublecomplex,
                  __lwork: *mut __CLPK_integer,
                  __rwork: *mut __CLPK_doublereal,
                  __bwork: *mut __CLPK_logical, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zggesx_(__jobvsl: *mut ::libc::c_char,
                   __jobvsr: *mut ::libc::c_char, __sort: *mut ::libc::c_char,
                   __selctg: __CLPK_L_fp, __sense: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublecomplex,
                   __ldb: *mut __CLPK_integer, __sdim: *mut __CLPK_integer,
                   __alpha: *mut __CLPK_doublecomplex,
                   __beta: *mut __CLPK_doublecomplex,
                   __vsl: *mut __CLPK_doublecomplex,
                   __ldvsl: *mut __CLPK_integer,
                   __vsr: *mut __CLPK_doublecomplex,
                   __ldvsr: *mut __CLPK_integer,
                   __rconde: *mut __CLPK_doublereal,
                   __rcondv: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer,
                   __bwork: *mut __CLPK_logical, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zggev_(__jobvl: *mut ::libc::c_char, __jobvr: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                  __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublecomplex,
                  __ldb: *mut __CLPK_integer,
                  __alpha: *mut __CLPK_doublecomplex,
                  __beta: *mut __CLPK_doublecomplex,
                  __vl: *mut __CLPK_doublecomplex,
                  __ldvl: *mut __CLPK_integer,
                  __vr: *mut __CLPK_doublecomplex,
                  __ldvr: *mut __CLPK_integer,
                  __work: *mut __CLPK_doublecomplex,
                  __lwork: *mut __CLPK_integer,
                  __rwork: *mut __CLPK_doublereal,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zggevx_(__balanc: *mut ::libc::c_char,
                   __jobvl: *mut ::libc::c_char, __jobvr: *mut ::libc::c_char,
                   __sense: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __alpha: *mut __CLPK_doublecomplex,
                   __beta: *mut __CLPK_doublecomplex,
                   __vl: *mut __CLPK_doublecomplex,
                   __ldvl: *mut __CLPK_integer,
                   __vr: *mut __CLPK_doublecomplex,
                   __ldvr: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer,
                   __lscale: *mut __CLPK_doublereal,
                   __rscale: *mut __CLPK_doublereal,
                   __abnrm: *mut __CLPK_doublereal,
                   __bbnrm: *mut __CLPK_doublereal,
                   __rconde: *mut __CLPK_doublereal,
                   __rcondv: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __bwork: *mut __CLPK_logical,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zggglm_(__n: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __p: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublecomplex,
                   __ldb: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublecomplex,
                   __x: *mut __CLPK_doublecomplex,
                   __y: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zgghrd_(__compq: *mut ::libc::c_char, __compz: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublecomplex,
                   __ldb: *mut __CLPK_integer, __q: *mut __CLPK_doublecomplex,
                   __ldq: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zgglse_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __p: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublecomplex,
                   __ldb: *mut __CLPK_integer,
                   __c__: *mut __CLPK_doublecomplex,
                   __d__: *mut __CLPK_doublecomplex,
                   __x: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zggqrf_(__n: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __p: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __taua: *mut __CLPK_doublecomplex,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __taub: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zggrqf_(__m: *mut __CLPK_integer, __p: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __taua: *mut __CLPK_doublecomplex,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __taub: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zggsvd_(__jobu: *mut ::libc::c_char, __jobv: *mut ::libc::c_char,
                   __jobq: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __p: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __l: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __alpha: *mut __CLPK_doublereal,
                   __beta: *mut __CLPK_doublereal,
                   __u: *mut __CLPK_doublecomplex, __ldu: *mut __CLPK_integer,
                   __v: *mut __CLPK_doublecomplex, __ldv: *mut __CLPK_integer,
                   __q: *mut __CLPK_doublecomplex, __ldq: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zggsvp_(__jobu: *mut ::libc::c_char, __jobv: *mut ::libc::c_char,
                   __jobq: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __p: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __tola: *mut __CLPK_doublereal,
                   __tolb: *mut __CLPK_doublereal, __k: *mut __CLPK_integer,
                   __l: *mut __CLPK_integer, __u: *mut __CLPK_doublecomplex,
                   __ldu: *mut __CLPK_integer, __v: *mut __CLPK_doublecomplex,
                   __ldv: *mut __CLPK_integer, __q: *mut __CLPK_doublecomplex,
                   __ldq: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgtcon_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __dl: *mut __CLPK_doublecomplex,
                   __d__: *mut __CLPK_doublecomplex,
                   __du: *mut __CLPK_doublecomplex,
                   __du2: *mut __CLPK_doublecomplex,
                   __ipiv: *mut __CLPK_integer,
                   __anorm: *mut __CLPK_doublereal,
                   __rcond: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgtrfs_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __dl: *mut __CLPK_doublecomplex,
                   __d__: *mut __CLPK_doublecomplex,
                   __du: *mut __CLPK_doublecomplex,
                   __dlf: *mut __CLPK_doublecomplex,
                   __df: *mut __CLPK_doublecomplex,
                   __duf: *mut __CLPK_doublecomplex,
                   __du2: *mut __CLPK_doublecomplex,
                   __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgtsv_(__n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                  __dl: *mut __CLPK_doublecomplex,
                  __d__: *mut __CLPK_doublecomplex,
                  __du: *mut __CLPK_doublecomplex,
                  __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgtsvx_(__fact: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __dl: *mut __CLPK_doublecomplex,
                   __d__: *mut __CLPK_doublecomplex,
                   __du: *mut __CLPK_doublecomplex,
                   __dlf: *mut __CLPK_doublecomplex,
                   __df: *mut __CLPK_doublecomplex,
                   __duf: *mut __CLPK_doublecomplex,
                   __du2: *mut __CLPK_doublecomplex,
                   __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgttrf_(__n: *mut __CLPK_integer, __dl: *mut __CLPK_doublecomplex,
                   __d__: *mut __CLPK_doublecomplex,
                   __du: *mut __CLPK_doublecomplex,
                   __du2: *mut __CLPK_doublecomplex,
                   __ipiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zgttrs_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __dl: *mut __CLPK_doublecomplex,
                   __d__: *mut __CLPK_doublecomplex,
                   __du: *mut __CLPK_doublecomplex,
                   __du2: *mut __CLPK_doublecomplex,
                   __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zgtts2_(__itrans: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __dl: *mut __CLPK_doublecomplex,
                   __d__: *mut __CLPK_doublecomplex,
                   __du: *mut __CLPK_doublecomplex,
                   __du2: *mut __CLPK_doublecomplex,
                   __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zhbev_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __kd: *mut __CLPK_integer,
                  __ab: *mut __CLPK_doublecomplex,
                  __ldab: *mut __CLPK_integer, __w: *mut __CLPK_doublereal,
                  __z__: *mut __CLPK_doublecomplex,
                  __ldz: *mut __CLPK_integer,
                  __work: *mut __CLPK_doublecomplex,
                  __rwork: *mut __CLPK_doublereal,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zhbevd_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __kd: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer, __w: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __lrwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zhbevx_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer,
                   __q: *mut __CLPK_doublecomplex, __ldq: *mut __CLPK_integer,
                   __vl: *mut __CLPK_doublereal, __vu: *mut __CLPK_doublereal,
                   __il: *mut __CLPK_integer, __iu: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __ifail: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zhbgst_(__vect: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ka: *mut __CLPK_integer,
                   __kb: *mut __CLPK_integer, __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer,
                   __bb: *mut __CLPK_doublecomplex,
                   __ldbb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zhbgv_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __ka: *mut __CLPK_integer,
                  __kb: *mut __CLPK_integer, __ab: *mut __CLPK_doublecomplex,
                  __ldab: *mut __CLPK_integer,
                  __bb: *mut __CLPK_doublecomplex,
                  __ldbb: *mut __CLPK_integer, __w: *mut __CLPK_doublereal,
                  __z__: *mut __CLPK_doublecomplex,
                  __ldz: *mut __CLPK_integer,
                  __work: *mut __CLPK_doublecomplex,
                  __rwork: *mut __CLPK_doublereal,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zhbgvd_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ka: *mut __CLPK_integer,
                   __kb: *mut __CLPK_integer, __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer,
                   __bb: *mut __CLPK_doublecomplex,
                   __ldbb: *mut __CLPK_integer, __w: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __lrwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zhbgvx_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ka: *mut __CLPK_integer, __kb: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer,
                   __bb: *mut __CLPK_doublecomplex,
                   __ldbb: *mut __CLPK_integer,
                   __q: *mut __CLPK_doublecomplex, __ldq: *mut __CLPK_integer,
                   __vl: *mut __CLPK_doublereal, __vu: *mut __CLPK_doublereal,
                   __il: *mut __CLPK_integer, __iu: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __ifail: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zhbtrd_(__vect: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __kd: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublereal,
                   __q: *mut __CLPK_doublecomplex, __ldq: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zhecon_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer,
                   __anorm: *mut __CLPK_doublereal,
                   __rcond: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zheequb_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                    __a: *mut __CLPK_doublecomplex,
                    __lda: *mut __CLPK_integer, __s: *mut __CLPK_doublereal,
                    __scond: *mut __CLPK_doublereal,
                    __amax: *mut __CLPK_doublereal,
                    __work: *mut __CLPK_doublecomplex,
                    __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zheev_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                  __lda: *mut __CLPK_integer, __w: *mut __CLPK_doublereal,
                  __work: *mut __CLPK_doublecomplex,
                  __lwork: *mut __CLPK_integer,
                  __rwork: *mut __CLPK_doublereal,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zheevd_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __w: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __lrwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zheevr_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __vl: *mut __CLPK_doublereal, __vu: *mut __CLPK_doublereal,
                   __il: *mut __CLPK_integer, __iu: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer, __isuppz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __lrwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zheevx_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __vl: *mut __CLPK_doublereal, __vu: *mut __CLPK_doublereal,
                   __il: *mut __CLPK_integer, __iu: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __ifail: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zhegs2_(__itype: *mut __CLPK_integer, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublecomplex,
                   __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zhegst_(__itype: *mut __CLPK_integer, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublecomplex,
                   __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zhegv_(__itype: *mut __CLPK_integer, __jobz: *mut ::libc::c_char,
                  __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                  __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                  __w: *mut __CLPK_doublereal,
                  __work: *mut __CLPK_doublecomplex,
                  __lwork: *mut __CLPK_integer,
                  __rwork: *mut __CLPK_doublereal,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zhegvd_(__itype: *mut __CLPK_integer, __jobz: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __lrwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zhegvx_(__itype: *mut __CLPK_integer, __jobz: *mut ::libc::c_char,
                   __range: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublecomplex,
                   __ldb: *mut __CLPK_integer, __vl: *mut __CLPK_doublereal,
                   __vu: *mut __CLPK_doublereal, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __ifail: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zherfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __af: *mut __CLPK_doublecomplex,
                   __ldaf: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zhesv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                  __lda: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                  __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                  __work: *mut __CLPK_doublecomplex,
                  __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zhesvx_(__fact: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __af: *mut __CLPK_doublecomplex,
                   __ldaf: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zhetd2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __tau: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zhetf2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zhetrd_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zhetrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zhetri_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zhetrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zhfrk_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                  __trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __k: *mut __CLPK_integer, __alpha: *mut __CLPK_doublereal,
                  __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                  __beta: *mut __CLPK_doublereal,
                  __c__: *mut __CLPK_doublecomplex) -> ::libc::c_int;
    pub fn zhgeqz_(__job: *mut ::libc::c_char, __compq: *mut ::libc::c_char,
                   __compz: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ilo: *mut __CLPK_integer, __ihi: *mut __CLPK_integer,
                   __h__: *mut __CLPK_doublecomplex,
                   __ldh: *mut __CLPK_integer, __t: *mut __CLPK_doublecomplex,
                   __ldt: *mut __CLPK_integer,
                   __alpha: *mut __CLPK_doublecomplex,
                   __beta: *mut __CLPK_doublecomplex,
                   __q: *mut __CLPK_doublecomplex, __ldq: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zhpcon_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __ipiv: *mut __CLPK_integer,
                   __anorm: *mut __CLPK_doublereal,
                   __rcond: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zhpev_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                  __n: *mut __CLPK_integer, __ap: *mut __CLPK_doublecomplex,
                  __w: *mut __CLPK_doublereal,
                  __z__: *mut __CLPK_doublecomplex,
                  __ldz: *mut __CLPK_integer,
                  __work: *mut __CLPK_doublecomplex,
                  __rwork: *mut __CLPK_doublereal,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zhpevd_(__jobz: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_doublecomplex,
                   __w: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __lrwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zhpevx_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __vl: *mut __CLPK_doublereal, __vu: *mut __CLPK_doublereal,
                   __il: *mut __CLPK_integer, __iu: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __ifail: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zhpgst_(__itype: *mut __CLPK_integer, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_doublecomplex,
                   __bp: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zhpgv_(__itype: *mut __CLPK_integer, __jobz: *mut ::libc::c_char,
                  __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __ap: *mut __CLPK_doublecomplex,
                  __bp: *mut __CLPK_doublecomplex,
                  __w: *mut __CLPK_doublereal,
                  __z__: *mut __CLPK_doublecomplex,
                  __ldz: *mut __CLPK_integer,
                  __work: *mut __CLPK_doublecomplex,
                  __rwork: *mut __CLPK_doublereal,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zhpgvd_(__itype: *mut __CLPK_integer, __jobz: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __bp: *mut __CLPK_doublecomplex,
                   __w: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __lrwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zhpgvx_(__itype: *mut __CLPK_integer, __jobz: *mut ::libc::c_char,
                   __range: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_doublecomplex,
                   __bp: *mut __CLPK_doublecomplex,
                   __vl: *mut __CLPK_doublereal, __vu: *mut __CLPK_doublereal,
                   __il: *mut __CLPK_integer, __iu: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __ifail: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zhprfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __afp: *mut __CLPK_doublecomplex,
                   __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zhpsv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __nrhs: *mut __CLPK_integer,
                  __ap: *mut __CLPK_doublecomplex,
                  __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_doublecomplex,
                  __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zhpsvx_(__fact: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __afp: *mut __CLPK_doublecomplex,
                   __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zhptrd_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __tau: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zhptrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __ipiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zhptri_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __ipiv: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zhptrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zhsein_(__side: *mut ::libc::c_char, __eigsrc: *mut ::libc::c_char,
                   __initv: *mut ::libc::c_char,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __h__: *mut __CLPK_doublecomplex,
                   __ldh: *mut __CLPK_integer, __w: *mut __CLPK_doublecomplex,
                   __vl: *mut __CLPK_doublecomplex,
                   __ldvl: *mut __CLPK_integer,
                   __vr: *mut __CLPK_doublecomplex,
                   __ldvr: *mut __CLPK_integer, __mm: *mut __CLPK_integer,
                   __m: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __ifaill: *mut __CLPK_integer,
                   __ifailr: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zhseqr_(__job: *mut ::libc::c_char, __compz: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer,
                   __h__: *mut __CLPK_doublecomplex,
                   __ldh: *mut __CLPK_integer, __w: *mut __CLPK_doublecomplex,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zlabrd_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nb: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublereal,
                   __tauq: *mut __CLPK_doublecomplex,
                   __taup: *mut __CLPK_doublecomplex,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __y: *mut __CLPK_doublecomplex, __ldy: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zlacgv_(__n: *mut __CLPK_integer, __x: *mut __CLPK_doublecomplex,
                   __incx: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlacn2_(__n: *mut __CLPK_integer, __v: *mut __CLPK_doublecomplex,
                   __x: *mut __CLPK_doublecomplex,
                   __est: *mut __CLPK_doublereal, __kase: *mut __CLPK_integer,
                   __isave: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlacon_(__n: *mut __CLPK_integer, __v: *mut __CLPK_doublecomplex,
                   __x: *mut __CLPK_doublecomplex,
                   __est: *mut __CLPK_doublereal, __kase: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zlacp2_(__uplo: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublereal,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublecomplex,
                   __ldb: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlacpy_(__uplo: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublecomplex,
                   __ldb: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlacrm_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublereal, __ldb: *mut __CLPK_integer,
                   __c__: *mut __CLPK_doublecomplex,
                   __ldc: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn zlacrt_(__n: *mut __CLPK_integer, __cx: *mut __CLPK_doublecomplex,
                   __incx: *mut __CLPK_integer,
                   __cy: *mut __CLPK_doublecomplex,
                   __incy: *mut __CLPK_integer,
                   __c__: *mut __CLPK_doublecomplex,
                   __s: *mut __CLPK_doublecomplex) -> ::libc::c_int;
    pub fn zladiv_(__ret_val: *mut __CLPK_doublecomplex,
                   __x: *mut __CLPK_doublecomplex,
                   __y: *mut __CLPK_doublecomplex) -> ();
    pub fn zlaed0_(__qsiz: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __q: *mut __CLPK_doublecomplex, __ldq: *mut __CLPK_integer,
                   __qstore: *mut __CLPK_doublecomplex,
                   __ldqs: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zlaed7_(__n: *mut __CLPK_integer, __cutpnt: *mut __CLPK_integer,
                   __qsiz: *mut __CLPK_integer, __tlvls: *mut __CLPK_integer,
                   __curlvl: *mut __CLPK_integer,
                   __curpbm: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal,
                   __q: *mut __CLPK_doublecomplex, __ldq: *mut __CLPK_integer,
                   __rho: *mut __CLPK_doublereal,
                   __indxq: *mut __CLPK_integer,
                   __qstore: *mut __CLPK_doublereal,
                   __qptr: *mut __CLPK_integer, __prmptr: *mut __CLPK_integer,
                   __perm: *mut __CLPK_integer, __givptr: *mut __CLPK_integer,
                   __givcol: *mut __CLPK_integer,
                   __givnum: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zlaed8_(__k: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __qsiz: *mut __CLPK_integer,
                   __q: *mut __CLPK_doublecomplex, __ldq: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal,
                   __rho: *mut __CLPK_doublereal,
                   __cutpnt: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublereal,
                   __dlamda: *mut __CLPK_doublereal,
                   __q2: *mut __CLPK_doublecomplex,
                   __ldq2: *mut __CLPK_integer, __w: *mut __CLPK_doublereal,
                   __indxp: *mut __CLPK_integer, __indx: *mut __CLPK_integer,
                   __indxq: *mut __CLPK_integer, __perm: *mut __CLPK_integer,
                   __givptr: *mut __CLPK_integer,
                   __givcol: *mut __CLPK_integer,
                   __givnum: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlaein_(__rightv: *mut __CLPK_logical,
                   __noinit: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __h__: *mut __CLPK_doublecomplex,
                   __ldh: *mut __CLPK_integer, __w: *mut __CLPK_doublecomplex,
                   __v: *mut __CLPK_doublecomplex,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __eps3: *mut __CLPK_doublereal,
                   __smlnum: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlaesy_(__a: *mut __CLPK_doublecomplex,
                   __b: *mut __CLPK_doublecomplex,
                   __c__: *mut __CLPK_doublecomplex,
                   __rt1: *mut __CLPK_doublecomplex,
                   __rt2: *mut __CLPK_doublecomplex,
                   __evscal: *mut __CLPK_doublecomplex,
                   __cs1: *mut __CLPK_doublecomplex,
                   __sn1: *mut __CLPK_doublecomplex) -> ::libc::c_int;
    pub fn zlaev2_(__a: *mut __CLPK_doublecomplex,
                   __b: *mut __CLPK_doublecomplex,
                   __c__: *mut __CLPK_doublecomplex,
                   __rt1: *mut __CLPK_doublereal,
                   __rt2: *mut __CLPK_doublereal,
                   __cs1: *mut __CLPK_doublereal,
                   __sn1: *mut __CLPK_doublecomplex) -> ::libc::c_int;
    pub fn zlag2c_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __sa: *mut __CLPK_complex, __ldsa: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlags2_(__upper: *mut __CLPK_logical, __a1: *mut __CLPK_doublereal,
                   __a2: *mut __CLPK_doublecomplex,
                   __a3: *mut __CLPK_doublereal, __b1: *mut __CLPK_doublereal,
                   __b2: *mut __CLPK_doublecomplex,
                   __b3: *mut __CLPK_doublereal,
                   __csu: *mut __CLPK_doublereal,
                   __snu: *mut __CLPK_doublecomplex,
                   __csv: *mut __CLPK_doublereal,
                   __snv: *mut __CLPK_doublecomplex,
                   __csq: *mut __CLPK_doublereal,
                   __snq: *mut __CLPK_doublecomplex) -> ::libc::c_int;
    pub fn zlagtm_(__trans: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __alpha: *mut __CLPK_doublereal,
                   __dl: *mut __CLPK_doublecomplex,
                   __d__: *mut __CLPK_doublecomplex,
                   __du: *mut __CLPK_doublecomplex,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __beta: *mut __CLPK_doublereal,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zlahef_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nb: *mut __CLPK_integer, __kb: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublecomplex, __ldw: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlahqr_(__wantt: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer,
                   __h__: *mut __CLPK_doublecomplex,
                   __ldh: *mut __CLPK_integer, __w: *mut __CLPK_doublecomplex,
                   __iloz: *mut __CLPK_integer, __ihiz: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zlahr2_(__n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __nb: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __t: *mut __CLPK_doublecomplex, __ldt: *mut __CLPK_integer,
                   __y: *mut __CLPK_doublecomplex, __ldy: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zlahrd_(__n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __nb: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __t: *mut __CLPK_doublecomplex, __ldt: *mut __CLPK_integer,
                   __y: *mut __CLPK_doublecomplex, __ldy: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zlaic1_(__job: *mut __CLPK_integer, __j: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex,
                   __sest: *mut __CLPK_doublereal,
                   __w: *mut __CLPK_doublecomplex,
                   __gamma: *mut __CLPK_doublecomplex,
                   __sestpr: *mut __CLPK_doublereal,
                   __s: *mut __CLPK_doublecomplex,
                   __c__: *mut __CLPK_doublecomplex) -> ::libc::c_int;
    pub fn zlals0_(__icompq: *mut __CLPK_integer, __nl: *mut __CLPK_integer,
                   __nr: *mut __CLPK_integer, __sqre: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __bx: *mut __CLPK_doublecomplex,
                   __ldbx: *mut __CLPK_integer, __perm: *mut __CLPK_integer,
                   __givptr: *mut __CLPK_integer,
                   __givcol: *mut __CLPK_integer,
                   __ldgcol: *mut __CLPK_integer,
                   __givnum: *mut __CLPK_doublereal,
                   __ldgnum: *mut __CLPK_integer,
                   __poles: *mut __CLPK_doublereal,
                   __difl: *mut __CLPK_doublereal,
                   __difr: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublereal, __k: *mut __CLPK_integer,
                   __c__: *mut __CLPK_doublereal, __s: *mut __CLPK_doublereal,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlalsa_(__icompq: *mut __CLPK_integer,
                   __smlsiz: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __bx: *mut __CLPK_doublecomplex,
                   __ldbx: *mut __CLPK_integer, __u: *mut __CLPK_doublereal,
                   __ldu: *mut __CLPK_integer, __vt: *mut __CLPK_doublereal,
                   __k: *mut __CLPK_integer, __difl: *mut __CLPK_doublereal,
                   __difr: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublereal,
                   __poles: *mut __CLPK_doublereal,
                   __givptr: *mut __CLPK_integer,
                   __givcol: *mut __CLPK_integer,
                   __ldgcol: *mut __CLPK_integer, __perm: *mut __CLPK_integer,
                   __givnum: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal, __s: *mut __CLPK_doublereal,
                   __rwork: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zlalsd_(__uplo: *mut ::libc::c_char, __smlsiz: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __rank: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zlangb_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal) -> __CLPK_doublereal;
    pub fn zlange_(__norm: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __work: *mut __CLPK_doublereal)
     -> __CLPK_doublereal;
    pub fn zlangt_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __dl: *mut __CLPK_doublecomplex,
                   __d__: *mut __CLPK_doublecomplex,
                   __du: *mut __CLPK_doublecomplex) -> __CLPK_doublereal;
    pub fn zlanhb_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal) -> __CLPK_doublereal;
    pub fn zlanhe_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __work: *mut __CLPK_doublereal)
     -> __CLPK_doublereal;
    pub fn zlanhf_(__norm: *mut ::libc::c_char, __transr: *mut ::libc::c_char,
                   __uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublereal) -> __CLPK_doublereal;
    pub fn zlanhp_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublereal) -> __CLPK_doublereal;
    pub fn zlanhs_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal) -> __CLPK_doublereal;
    pub fn zlanht_(__norm: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublecomplex) -> __CLPK_doublereal;
    pub fn zlansb_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal) -> __CLPK_doublereal;
    pub fn zlansp_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublereal) -> __CLPK_doublereal;
    pub fn zlansy_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __work: *mut __CLPK_doublereal)
     -> __CLPK_doublereal;
    pub fn zlantb_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal) -> __CLPK_doublereal;
    pub fn zlantp_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublereal) -> __CLPK_doublereal;
    pub fn zlantr_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __work: *mut __CLPK_doublereal)
     -> __CLPK_doublereal;
    pub fn zlapll_(__n: *mut __CLPK_integer, __x: *mut __CLPK_doublecomplex,
                   __incx: *mut __CLPK_integer,
                   __y: *mut __CLPK_doublecomplex,
                   __incy: *mut __CLPK_integer,
                   __ssmin: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn zlapmt_(__forwrd: *mut __CLPK_logical, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __x: *mut __CLPK_doublecomplex,
                   __ldx: *mut __CLPK_integer, __k: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zlaqgb_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __kl: *mut __CLPK_integer, __ku: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer, __r__: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal,
                   __rowcnd: *mut __CLPK_doublereal,
                   __colcnd: *mut __CLPK_doublereal,
                   __amax: *mut __CLPK_doublereal,
                   __equed: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn zlaqge_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __r__: *mut __CLPK_doublereal,
                   __c__: *mut __CLPK_doublereal,
                   __rowcnd: *mut __CLPK_doublereal,
                   __colcnd: *mut __CLPK_doublereal,
                   __amax: *mut __CLPK_doublereal,
                   __equed: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn zlaqhb_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer, __s: *mut __CLPK_doublereal,
                   __scond: *mut __CLPK_doublereal,
                   __amax: *mut __CLPK_doublereal,
                   __equed: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn zlaqhe_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __s: *mut __CLPK_doublereal,
                   __scond: *mut __CLPK_doublereal,
                   __amax: *mut __CLPK_doublereal,
                   __equed: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn zlaqhp_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __s: *mut __CLPK_doublereal,
                   __scond: *mut __CLPK_doublereal,
                   __amax: *mut __CLPK_doublereal,
                   __equed: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn zlaqp2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __offset: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __jpvt: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __vn1: *mut __CLPK_doublereal,
                   __vn2: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex) -> ::libc::c_int;
    pub fn zlaqps_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __offset: *mut __CLPK_integer, __nb: *mut __CLPK_integer,
                   __kb: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __jpvt: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __vn1: *mut __CLPK_doublereal,
                   __vn2: *mut __CLPK_doublereal,
                   __auxv: *mut __CLPK_doublecomplex,
                   __f: *mut __CLPK_doublecomplex, __ldf: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zlaqr0_(__wantt: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer,
                   __h__: *mut __CLPK_doublecomplex,
                   __ldh: *mut __CLPK_integer, __w: *mut __CLPK_doublecomplex,
                   __iloz: *mut __CLPK_integer, __ihiz: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zlaqr1_(__n: *mut __CLPK_integer, __h__: *mut __CLPK_doublecomplex,
                   __ldh: *mut __CLPK_integer,
                   __s1: *mut __CLPK_doublecomplex,
                   __s2: *mut __CLPK_doublecomplex,
                   __v: *mut __CLPK_doublecomplex) -> ::libc::c_int;
    pub fn zlaqr2_(__wantt: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __ktop: *mut __CLPK_integer,
                   __kbot: *mut __CLPK_integer, __nw: *mut __CLPK_integer,
                   __h__: *mut __CLPK_doublecomplex,
                   __ldh: *mut __CLPK_integer, __iloz: *mut __CLPK_integer,
                   __ihiz: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer, __ns: *mut __CLPK_integer,
                   __nd: *mut __CLPK_integer, __sh: *mut __CLPK_doublecomplex,
                   __v: *mut __CLPK_doublecomplex, __ldv: *mut __CLPK_integer,
                   __nh: *mut __CLPK_integer, __t: *mut __CLPK_doublecomplex,
                   __ldt: *mut __CLPK_integer, __nv: *mut __CLPK_integer,
                   __wv: *mut __CLPK_doublecomplex,
                   __ldwv: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlaqr3_(__wantt: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __ktop: *mut __CLPK_integer,
                   __kbot: *mut __CLPK_integer, __nw: *mut __CLPK_integer,
                   __h__: *mut __CLPK_doublecomplex,
                   __ldh: *mut __CLPK_integer, __iloz: *mut __CLPK_integer,
                   __ihiz: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer, __ns: *mut __CLPK_integer,
                   __nd: *mut __CLPK_integer, __sh: *mut __CLPK_doublecomplex,
                   __v: *mut __CLPK_doublecomplex, __ldv: *mut __CLPK_integer,
                   __nh: *mut __CLPK_integer, __t: *mut __CLPK_doublecomplex,
                   __ldt: *mut __CLPK_integer, __nv: *mut __CLPK_integer,
                   __wv: *mut __CLPK_doublecomplex,
                   __ldwv: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlaqr4_(__wantt: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer,
                   __h__: *mut __CLPK_doublecomplex,
                   __ldh: *mut __CLPK_integer, __w: *mut __CLPK_doublecomplex,
                   __iloz: *mut __CLPK_integer, __ihiz: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zlaqr5_(__wantt: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __kacc22: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __ktop: *mut __CLPK_integer, __kbot: *mut __CLPK_integer,
                   __nshfts: *mut __CLPK_integer,
                   __s: *mut __CLPK_doublecomplex,
                   __h__: *mut __CLPK_doublecomplex,
                   __ldh: *mut __CLPK_integer, __iloz: *mut __CLPK_integer,
                   __ihiz: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer, __v: *mut __CLPK_doublecomplex,
                   __ldv: *mut __CLPK_integer, __u: *mut __CLPK_doublecomplex,
                   __ldu: *mut __CLPK_integer, __nv: *mut __CLPK_integer,
                   __wv: *mut __CLPK_doublecomplex,
                   __ldwv: *mut __CLPK_integer, __nh: *mut __CLPK_integer,
                   __wh: *mut __CLPK_doublecomplex,
                   __ldwh: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlaqsb_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer, __s: *mut __CLPK_doublereal,
                   __scond: *mut __CLPK_doublereal,
                   __amax: *mut __CLPK_doublereal,
                   __equed: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn zlaqsp_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __s: *mut __CLPK_doublereal,
                   __scond: *mut __CLPK_doublereal,
                   __amax: *mut __CLPK_doublereal,
                   __equed: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn zlaqsy_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __s: *mut __CLPK_doublereal,
                   __scond: *mut __CLPK_doublereal,
                   __amax: *mut __CLPK_doublereal,
                   __equed: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn zlar1v_(__n: *mut __CLPK_integer, __b1: *mut __CLPK_integer,
                   __bn: *mut __CLPK_integer,
                   __lambda: *mut __CLPK_doublereal,
                   __d__: *mut __CLPK_doublereal, __l: *mut __CLPK_doublereal,
                   __ld: *mut __CLPK_doublereal,
                   __lld: *mut __CLPK_doublereal,
                   __pivmin: *mut __CLPK_doublereal,
                   __gaptol: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublecomplex,
                   __wantnc: *mut __CLPK_logical,
                   __negcnt: *mut __CLPK_integer,
                   __ztz: *mut __CLPK_doublereal,
                   __mingma: *mut __CLPK_doublereal,
                   __r__: *mut __CLPK_integer, __isuppz: *mut __CLPK_integer,
                   __nrminv: *mut __CLPK_doublereal,
                   __resid: *mut __CLPK_doublereal,
                   __rqcorr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn zlar2v_(__n: *mut __CLPK_integer, __x: *mut __CLPK_doublecomplex,
                   __y: *mut __CLPK_doublecomplex,
                   __z__: *mut __CLPK_doublecomplex,
                   __incx: *mut __CLPK_integer, __c__: *mut __CLPK_doublereal,
                   __s: *mut __CLPK_doublecomplex,
                   __incc: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlarcm_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublereal, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __c__: *mut __CLPK_doublecomplex,
                   __ldc: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn zlarf_(__side: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                  __n: *mut __CLPK_integer, __v: *mut __CLPK_doublecomplex,
                  __incv: *mut __CLPK_integer,
                  __tau: *mut __CLPK_doublecomplex,
                  __c__: *mut __CLPK_doublecomplex,
                  __ldc: *mut __CLPK_integer,
                  __work: *mut __CLPK_doublecomplex) -> ::libc::c_int;
    pub fn zlarfb_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __direct: *mut ::libc::c_char,
                   __storev: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __v: *mut __CLPK_doublecomplex, __ldv: *mut __CLPK_integer,
                   __t: *mut __CLPK_doublecomplex, __ldt: *mut __CLPK_integer,
                   __c__: *mut __CLPK_doublecomplex,
                   __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __ldwork: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlarfg_(__n: *mut __CLPK_integer,
                   __alpha: *mut __CLPK_doublecomplex,
                   __x: *mut __CLPK_doublecomplex,
                   __incx: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex) -> ::libc::c_int;
    pub fn zlarfp_(__n: *mut __CLPK_integer,
                   __alpha: *mut __CLPK_doublecomplex,
                   __x: *mut __CLPK_doublecomplex,
                   __incx: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex) -> ::libc::c_int;
    pub fn zlarft_(__direct: *mut ::libc::c_char,
                   __storev: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __v: *mut __CLPK_doublecomplex,
                   __ldv: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __t: *mut __CLPK_doublecomplex, __ldt: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zlarfx_(__side: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __v: *mut __CLPK_doublecomplex,
                   __tau: *mut __CLPK_doublecomplex,
                   __c__: *mut __CLPK_doublecomplex,
                   __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex) -> ::libc::c_int;
    pub fn zlargv_(__n: *mut __CLPK_integer, __x: *mut __CLPK_doublecomplex,
                   __incx: *mut __CLPK_integer,
                   __y: *mut __CLPK_doublecomplex,
                   __incy: *mut __CLPK_integer, __c__: *mut __CLPK_doublereal,
                   __incc: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlarnv_(__idist: *mut __CLPK_integer, __iseed: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __x: *mut __CLPK_doublecomplex)
     -> ::libc::c_int;
    pub fn zlarrv_(__n: *mut __CLPK_integer, __vl: *mut __CLPK_doublereal,
                   __vu: *mut __CLPK_doublereal,
                   __d__: *mut __CLPK_doublereal, __l: *mut __CLPK_doublereal,
                   __pivmin: *mut __CLPK_doublereal,
                   __isplit: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __dol: *mut __CLPK_integer, __dou: *mut __CLPK_integer,
                   __minrgp: *mut __CLPK_doublereal,
                   __rtol1: *mut __CLPK_doublereal,
                   __rtol2: *mut __CLPK_doublereal,
                   __w: *mut __CLPK_doublereal,
                   __werr: *mut __CLPK_doublereal,
                   __wgap: *mut __CLPK_doublereal,
                   __iblock: *mut __CLPK_integer,
                   __indexw: *mut __CLPK_integer,
                   __gers: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer, __isuppz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zlarscl2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                     __d__: *mut __CLPK_doublereal,
                     __x: *mut __CLPK_doublecomplex,
                     __ldx: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlartg_(__f: *mut __CLPK_doublecomplex,
                   __g: *mut __CLPK_doublecomplex,
                   __cs: *mut __CLPK_doublereal,
                   __sn: *mut __CLPK_doublecomplex,
                   __r__: *mut __CLPK_doublecomplex) -> ::libc::c_int;
    pub fn zlartv_(__n: *mut __CLPK_integer, __x: *mut __CLPK_doublecomplex,
                   __incx: *mut __CLPK_integer,
                   __y: *mut __CLPK_doublecomplex,
                   __incy: *mut __CLPK_integer, __c__: *mut __CLPK_doublereal,
                   __s: *mut __CLPK_doublecomplex,
                   __incc: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlarz_(__side: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                  __n: *mut __CLPK_integer, __l: *mut __CLPK_integer,
                  __v: *mut __CLPK_doublecomplex, __incv: *mut __CLPK_integer,
                  __tau: *mut __CLPK_doublecomplex,
                  __c__: *mut __CLPK_doublecomplex,
                  __ldc: *mut __CLPK_integer,
                  __work: *mut __CLPK_doublecomplex) -> ::libc::c_int;
    pub fn zlarzb_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __direct: *mut ::libc::c_char,
                   __storev: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __l: *mut __CLPK_integer, __v: *mut __CLPK_doublecomplex,
                   __ldv: *mut __CLPK_integer, __t: *mut __CLPK_doublecomplex,
                   __ldt: *mut __CLPK_integer,
                   __c__: *mut __CLPK_doublecomplex,
                   __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __ldwork: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlarzt_(__direct: *mut ::libc::c_char,
                   __storev: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __v: *mut __CLPK_doublecomplex,
                   __ldv: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __t: *mut __CLPK_doublecomplex, __ldt: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zlascl_(__type__: *mut ::libc::c_char, __kl: *mut __CLPK_integer,
                   __ku: *mut __CLPK_integer, __cfrom: *mut __CLPK_doublereal,
                   __cto: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zlascl2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                    __d__: *mut __CLPK_doublereal,
                    __x: *mut __CLPK_doublecomplex,
                    __ldx: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlaset_(__uplo: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer,
                   __alpha: *mut __CLPK_doublecomplex,
                   __beta: *mut __CLPK_doublecomplex,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zlasr_(__side: *mut ::libc::c_char, __pivot: *mut ::libc::c_char,
                  __direct: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                  __n: *mut __CLPK_integer, __c__: *mut __CLPK_doublereal,
                  __s: *mut __CLPK_doublereal, __a: *mut __CLPK_doublecomplex,
                  __lda: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlassq_(__n: *mut __CLPK_integer, __x: *mut __CLPK_doublecomplex,
                   __incx: *mut __CLPK_integer,
                   __scale: *mut __CLPK_doublereal,
                   __sumsq: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn zlaswp_(__n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __k1: *mut __CLPK_integer,
                   __k2: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __incx: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlasyf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nb: *mut __CLPK_integer, __kb: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublecomplex, __ldw: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlat2c_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __sa: *mut __CLPK_complex, __ldsa: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlatbs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __normin: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __kd: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex,
                   __scale: *mut __CLPK_doublereal,
                   __cnorm: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlatdf_(__ijob: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer,
                   __rhs: *mut __CLPK_doublecomplex,
                   __rdsum: *mut __CLPK_doublereal,
                   __rdscal: *mut __CLPK_doublereal,
                   __ipiv: *mut __CLPK_integer, __jpiv: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zlatps_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __normin: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_doublecomplex,
                   __x: *mut __CLPK_doublecomplex,
                   __scale: *mut __CLPK_doublereal,
                   __cnorm: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlatrd_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nb: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __e: *mut __CLPK_doublereal,
                   __tau: *mut __CLPK_doublecomplex,
                   __w: *mut __CLPK_doublecomplex, __ldw: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zlatrs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __normin: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __x: *mut __CLPK_doublecomplex,
                   __scale: *mut __CLPK_doublereal,
                   __cnorm: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlatrz_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __l: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex) -> ::libc::c_int;
    pub fn zlatzm_(__side: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __v: *mut __CLPK_doublecomplex,
                   __incv: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __c1: *mut __CLPK_doublecomplex,
                   __c2: *mut __CLPK_doublecomplex,
                   __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex) -> ::libc::c_int;
    pub fn zlauu2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zlauum_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zpbcon_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer,
                   __anorm: *mut __CLPK_doublereal,
                   __rcond: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zpbequ_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer, __s: *mut __CLPK_doublereal,
                   __scond: *mut __CLPK_doublereal,
                   __amax: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zpbrfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer,
                   __afb: *mut __CLPK_doublecomplex,
                   __ldafb: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zpbstf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zpbsv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __kd: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                  __ab: *mut __CLPK_doublecomplex,
                  __ldab: *mut __CLPK_integer, __b: *mut __CLPK_doublecomplex,
                  __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zpbsvx_(__fact: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __kd: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer,
                   __afb: *mut __CLPK_doublecomplex,
                   __ldafb: *mut __CLPK_integer, __equed: *mut ::libc::c_char,
                   __s: *mut __CLPK_doublereal,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zpbtf2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zpbtrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zpbtrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zpftrf_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zpftri_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zpftrs_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zpocon_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __anorm: *mut __CLPK_doublereal,
                   __rcond: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zpoequ_(__n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __s: *mut __CLPK_doublereal,
                   __scond: *mut __CLPK_doublereal,
                   __amax: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zpoequb_(__n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                    __lda: *mut __CLPK_integer, __s: *mut __CLPK_doublereal,
                    __scond: *mut __CLPK_doublereal,
                    __amax: *mut __CLPK_doublereal,
                    __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zporfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __af: *mut __CLPK_doublecomplex,
                   __ldaf: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zposv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                  __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublecomplex,
                  __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zposvx_(__fact: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __af: *mut __CLPK_doublecomplex,
                   __ldaf: *mut __CLPK_integer, __equed: *mut ::libc::c_char,
                   __s: *mut __CLPK_doublereal,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zpotf2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zpotrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zpotri_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zpotrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zppcon_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __anorm: *mut __CLPK_doublereal,
                   __rcond: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zppequ_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __s: *mut __CLPK_doublereal,
                   __scond: *mut __CLPK_doublereal,
                   __amax: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zpprfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __afp: *mut __CLPK_doublecomplex,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zppsv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __nrhs: *mut __CLPK_integer,
                  __ap: *mut __CLPK_doublecomplex,
                  __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zppsvx_(__fact: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __afp: *mut __CLPK_doublecomplex,
                   __equed: *mut ::libc::c_char, __s: *mut __CLPK_doublereal,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zpptrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zpptri_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zpptrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zpstf2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __piv: *mut __CLPK_integer, __rank: *mut __CLPK_integer,
                   __tol: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zpstrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __piv: *mut __CLPK_integer, __rank: *mut __CLPK_integer,
                   __tol: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zptcon_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublecomplex,
                   __anorm: *mut __CLPK_doublereal,
                   __rcond: *mut __CLPK_doublereal,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zpteqr_(__compz: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zptrfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublecomplex,
                   __df: *mut __CLPK_doublereal,
                   __ef: *mut __CLPK_doublecomplex,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zptsv_(__n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                  __d__: *mut __CLPK_doublereal,
                  __e: *mut __CLPK_doublecomplex,
                  __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                  __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zptsvx_(__fact: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublecomplex,
                   __df: *mut __CLPK_doublereal,
                   __ef: *mut __CLPK_doublecomplex,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zpttrf_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zpttrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublecomplex,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zptts2_(__iuplo: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublecomplex,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zrot_(__n: *mut __CLPK_integer, __cx: *mut __CLPK_doublecomplex,
                 __incx: *mut __CLPK_integer, __cy: *mut __CLPK_doublecomplex,
                 __incy: *mut __CLPK_integer, __c__: *mut __CLPK_doublereal,
                 __s: *mut __CLPK_doublecomplex) -> ::libc::c_int;
    pub fn zspcon_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __ipiv: *mut __CLPK_integer,
                   __anorm: *mut __CLPK_doublereal,
                   __rcond: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zspmv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __alpha: *mut __CLPK_doublecomplex,
                  __ap: *mut __CLPK_doublecomplex,
                  __x: *mut __CLPK_doublecomplex, __incx: *mut __CLPK_integer,
                  __beta: *mut __CLPK_doublecomplex,
                  __y: *mut __CLPK_doublecomplex, __incy: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zspr_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                 __alpha: *mut __CLPK_doublecomplex,
                 __x: *mut __CLPK_doublecomplex, __incx: *mut __CLPK_integer,
                 __ap: *mut __CLPK_doublecomplex) -> ::libc::c_int;
    pub fn zsprfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __afp: *mut __CLPK_doublecomplex,
                   __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zspsv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __nrhs: *mut __CLPK_integer,
                  __ap: *mut __CLPK_doublecomplex,
                  __ipiv: *mut __CLPK_integer, __b: *mut __CLPK_doublecomplex,
                  __ldb: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zspsvx_(__fact: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __afp: *mut __CLPK_doublecomplex,
                   __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zsptrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __ipiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zsptri_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __ipiv: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zsptrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zstedc_(__compz: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __lrwork: *mut __CLPK_integer,
                   __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zstegr_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublereal, __vl: *mut __CLPK_doublereal,
                   __vu: *mut __CLPK_doublereal, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer,
                   __abstol: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer, __isuppz: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zstein_(__n: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublereal, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal, __iblock: *mut __CLPK_integer,
                   __isplit: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __iwork: *mut __CLPK_integer, __ifail: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zstemr_(__jobz: *mut ::libc::c_char, __range: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __d__: *mut __CLPK_doublereal,
                   __e: *mut __CLPK_doublereal, __vl: *mut __CLPK_doublereal,
                   __vu: *mut __CLPK_doublereal, __il: *mut __CLPK_integer,
                   __iu: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer, __nzc: *mut __CLPK_integer,
                   __isuppz: *mut __CLPK_integer,
                   __tryrac: *mut __CLPK_logical,
                   __work: *mut __CLPK_doublereal,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zsteqr_(__compz: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublereal, __e: *mut __CLPK_doublereal,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer, __work: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zsycon_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer,
                   __anorm: *mut __CLPK_doublereal,
                   __rcond: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zsyequb_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                    __a: *mut __CLPK_doublecomplex,
                    __lda: *mut __CLPK_integer, __s: *mut __CLPK_doublereal,
                    __scond: *mut __CLPK_doublereal,
                    __amax: *mut __CLPK_doublereal,
                    __work: *mut __CLPK_doublecomplex,
                    __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zsymv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __alpha: *mut __CLPK_doublecomplex,
                  __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                  __x: *mut __CLPK_doublecomplex, __incx: *mut __CLPK_integer,
                  __beta: *mut __CLPK_doublecomplex,
                  __y: *mut __CLPK_doublecomplex, __incy: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zsyr_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                 __alpha: *mut __CLPK_doublecomplex,
                 __x: *mut __CLPK_doublecomplex, __incx: *mut __CLPK_integer,
                 __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zsyrfs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __af: *mut __CLPK_doublecomplex,
                   __ldaf: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zsysv_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                  __nrhs: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                  __lda: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                  __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                  __work: *mut __CLPK_doublecomplex,
                  __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zsysvx_(__fact: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __af: *mut __CLPK_doublecomplex,
                   __ldaf: *mut __CLPK_integer, __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zsytf2_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zsytrf_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zsytri_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zsytrs_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __ipiv: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztbcon_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztbrfs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztbtrs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __kd: *mut __CLPK_integer, __nrhs: *mut __CLPK_integer,
                   __ab: *mut __CLPK_doublecomplex,
                   __ldab: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztfsm_(__transr: *mut ::libc::c_char, __side: *mut ::libc::c_char,
                  __uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                  __diag: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                  __n: *mut __CLPK_integer,
                  __alpha: *mut __CLPK_doublecomplex,
                  __a: *mut __CLPK_doublecomplex,
                  __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ztftri_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztfttp_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __arf: *mut __CLPK_doublecomplex,
                   __ap: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztfttr_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __arf: *mut __CLPK_doublecomplex,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztgevc_(__side: *mut ::libc::c_char, __howmny: *mut ::libc::c_char,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __s: *mut __CLPK_doublecomplex, __lds: *mut __CLPK_integer,
                   __p: *mut __CLPK_doublecomplex, __ldp: *mut __CLPK_integer,
                   __vl: *mut __CLPK_doublecomplex,
                   __ldvl: *mut __CLPK_integer,
                   __vr: *mut __CLPK_doublecomplex,
                   __ldvr: *mut __CLPK_integer, __mm: *mut __CLPK_integer,
                   __m: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztgex2_(__wantq: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublecomplex,
                   __ldb: *mut __CLPK_integer, __q: *mut __CLPK_doublecomplex,
                   __ldq: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer, __j1: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztgexc_(__wantq: *mut __CLPK_logical, __wantz: *mut __CLPK_logical,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublecomplex,
                   __ldb: *mut __CLPK_integer, __q: *mut __CLPK_doublecomplex,
                   __ldq: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer, __ifst: *mut __CLPK_integer,
                   __ilst: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ztgsen_(__ijob: *mut __CLPK_integer, __wantq: *mut __CLPK_logical,
                   __wantz: *mut __CLPK_logical,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __alpha: *mut __CLPK_doublecomplex,
                   __beta: *mut __CLPK_doublecomplex,
                   __q: *mut __CLPK_doublecomplex, __ldq: *mut __CLPK_integer,
                   __z__: *mut __CLPK_doublecomplex,
                   __ldz: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __pl: *mut __CLPK_doublereal, __pr: *mut __CLPK_doublereal,
                   __dif: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __liwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ztgsja_(__jobu: *mut ::libc::c_char, __jobv: *mut ::libc::c_char,
                   __jobq: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __p: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __l: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __tola: *mut __CLPK_doublereal,
                   __tolb: *mut __CLPK_doublereal,
                   __alpha: *mut __CLPK_doublereal,
                   __beta: *mut __CLPK_doublereal,
                   __u: *mut __CLPK_doublecomplex, __ldu: *mut __CLPK_integer,
                   __v: *mut __CLPK_doublecomplex, __ldv: *mut __CLPK_integer,
                   __q: *mut __CLPK_doublecomplex, __ldq: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __ncycle: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ztgsna_(__job: *mut ::libc::c_char, __howmny: *mut ::libc::c_char,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __vl: *mut __CLPK_doublecomplex,
                   __ldvl: *mut __CLPK_integer,
                   __vr: *mut __CLPK_doublecomplex,
                   __ldvr: *mut __CLPK_integer, __s: *mut __CLPK_doublereal,
                   __dif: *mut __CLPK_doublereal, __mm: *mut __CLPK_integer,
                   __m: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztgsy2_(__trans: *mut ::libc::c_char, __ijob: *mut __CLPK_integer,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __c__: *mut __CLPK_doublecomplex,
                   __ldc: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublecomplex,
                   __ldd: *mut __CLPK_integer, __e: *mut __CLPK_doublecomplex,
                   __lde: *mut __CLPK_integer, __f: *mut __CLPK_doublecomplex,
                   __ldf: *mut __CLPK_integer,
                   __scale: *mut __CLPK_doublereal,
                   __rdsum: *mut __CLPK_doublereal,
                   __rdscal: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztgsyl_(__trans: *mut ::libc::c_char, __ijob: *mut __CLPK_integer,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __c__: *mut __CLPK_doublecomplex,
                   __ldc: *mut __CLPK_integer,
                   __d__: *mut __CLPK_doublecomplex,
                   __ldd: *mut __CLPK_integer, __e: *mut __CLPK_doublecomplex,
                   __lde: *mut __CLPK_integer, __f: *mut __CLPK_doublecomplex,
                   __ldf: *mut __CLPK_integer,
                   __scale: *mut __CLPK_doublereal,
                   __dif: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __iwork: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztpcon_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __rcond: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztprfs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztptri_(__uplo: *mut ::libc::c_char, __diag: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztptrs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztpttf_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_doublecomplex,
                   __arf: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztpttr_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztrcon_(__norm: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __rcond: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztrevc_(__side: *mut ::libc::c_char, __howmny: *mut ::libc::c_char,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __t: *mut __CLPK_doublecomplex, __ldt: *mut __CLPK_integer,
                   __vl: *mut __CLPK_doublecomplex,
                   __ldvl: *mut __CLPK_integer,
                   __vr: *mut __CLPK_doublecomplex,
                   __ldvr: *mut __CLPK_integer, __mm: *mut __CLPK_integer,
                   __m: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztrexc_(__compq: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __t: *mut __CLPK_doublecomplex, __ldt: *mut __CLPK_integer,
                   __q: *mut __CLPK_doublecomplex, __ldq: *mut __CLPK_integer,
                   __ifst: *mut __CLPK_integer, __ilst: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztrrfs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __x: *mut __CLPK_doublecomplex, __ldx: *mut __CLPK_integer,
                   __ferr: *mut __CLPK_doublereal,
                   __berr: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztrsen_(__job: *mut ::libc::c_char, __compq: *mut ::libc::c_char,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __t: *mut __CLPK_doublecomplex, __ldt: *mut __CLPK_integer,
                   __q: *mut __CLPK_doublecomplex, __ldq: *mut __CLPK_integer,
                   __w: *mut __CLPK_doublecomplex, __m: *mut __CLPK_integer,
                   __s: *mut __CLPK_doublereal, __sep: *mut __CLPK_doublereal,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ztrsna_(__job: *mut ::libc::c_char, __howmny: *mut ::libc::c_char,
                   __select: *mut __CLPK_logical, __n: *mut __CLPK_integer,
                   __t: *mut __CLPK_doublecomplex, __ldt: *mut __CLPK_integer,
                   __vl: *mut __CLPK_doublecomplex,
                   __ldvl: *mut __CLPK_integer,
                   __vr: *mut __CLPK_doublecomplex,
                   __ldvr: *mut __CLPK_integer, __s: *mut __CLPK_doublereal,
                   __sep: *mut __CLPK_doublereal, __mm: *mut __CLPK_integer,
                   __m: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __ldwork: *mut __CLPK_integer,
                   __rwork: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztrsyl_(__trana: *mut ::libc::c_char, __tranb: *mut ::libc::c_char,
                   __isgn: *mut __CLPK_integer, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __b: *mut __CLPK_doublecomplex,
                   __ldb: *mut __CLPK_integer,
                   __c__: *mut __CLPK_doublecomplex,
                   __ldc: *mut __CLPK_integer,
                   __scale: *mut __CLPK_doublereal,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztrti2_(__uplo: *mut ::libc::c_char, __diag: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ztrtri_(__uplo: *mut ::libc::c_char, __diag: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn ztrtrs_(__uplo: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __diag: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __nrhs: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __b: *mut __CLPK_doublecomplex, __ldb: *mut __CLPK_integer,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztrttf_(__transr: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __arf: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztrttp_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztzrqf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn ztzrzf_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zung2l_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zung2r_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zungbr_(__vect: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zunghr_(__n: *mut __CLPK_integer, __ilo: *mut __CLPK_integer,
                   __ihi: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zungl2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zunglq_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zungql_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zungqr_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zungr2_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zungrq_(__m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zungtr_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zunm2l_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __c__: *mut __CLPK_doublecomplex,
                   __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zunm2r_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __c__: *mut __CLPK_doublecomplex,
                   __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zunmbr_(__vect: *mut ::libc::c_char, __side: *mut ::libc::c_char,
                   __trans: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __k: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __c__: *mut __CLPK_doublecomplex,
                   __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zunmhr_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __ilo: *mut __CLPK_integer, __ihi: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __c__: *mut __CLPK_doublecomplex,
                   __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zunml2_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __c__: *mut __CLPK_doublecomplex,
                   __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zunmlq_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __c__: *mut __CLPK_doublecomplex,
                   __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zunmql_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __c__: *mut __CLPK_doublecomplex,
                   __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zunmqr_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __c__: *mut __CLPK_doublecomplex,
                   __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zunmr2_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __c__: *mut __CLPK_doublecomplex,
                   __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zunmr3_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __l: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __c__: *mut __CLPK_doublecomplex,
                   __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zunmrq_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __c__: *mut __CLPK_doublecomplex,
                   __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zunmrz_(__side: *mut ::libc::c_char, __trans: *mut ::libc::c_char,
                   __m: *mut __CLPK_integer, __n: *mut __CLPK_integer,
                   __k: *mut __CLPK_integer, __l: *mut __CLPK_integer,
                   __a: *mut __CLPK_doublecomplex, __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __c__: *mut __CLPK_doublecomplex,
                   __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zunmtr_(__side: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __trans: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __a: *mut __CLPK_doublecomplex,
                   __lda: *mut __CLPK_integer,
                   __tau: *mut __CLPK_doublecomplex,
                   __c__: *mut __CLPK_doublecomplex,
                   __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __lwork: *mut __CLPK_integer, __info: *mut __CLPK_integer)
     -> ::libc::c_int;
    pub fn zupgtr_(__uplo: *mut ::libc::c_char, __n: *mut __CLPK_integer,
                   __ap: *mut __CLPK_doublecomplex,
                   __tau: *mut __CLPK_doublecomplex,
                   __q: *mut __CLPK_doublecomplex, __ldq: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn zupmtr_(__side: *mut ::libc::c_char, __uplo: *mut ::libc::c_char,
                   __trans: *mut ::libc::c_char, __m: *mut __CLPK_integer,
                   __n: *mut __CLPK_integer, __ap: *mut __CLPK_doublecomplex,
                   __tau: *mut __CLPK_doublecomplex,
                   __c__: *mut __CLPK_doublecomplex,
                   __ldc: *mut __CLPK_integer,
                   __work: *mut __CLPK_doublecomplex,
                   __info: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlamc1_(__beta: *mut __CLPK_integer, __t: *mut __CLPK_integer,
                   __rnd: *mut __CLPK_logical, __ieee1: *mut __CLPK_logical)
     -> ::libc::c_int;
    pub fn slamch_(__cmach: *mut ::libc::c_char) -> __CLPK_doublereal;
    pub fn slamc1_(__beta: *mut __CLPK_integer, __t: *mut __CLPK_integer,
                   __rnd: *mut __CLPK_logical, __ieee1: *mut __CLPK_logical)
     -> ::libc::c_int;
    pub fn slamc2_(__beta: *mut __CLPK_integer, __t: *mut __CLPK_integer,
                   __rnd: *mut __CLPK_logical, __eps: *mut __CLPK_real,
                   __emin: *mut __CLPK_integer, __rmin: *mut __CLPK_real,
                   __emax: *mut __CLPK_integer, __rmax: *mut __CLPK_real)
     -> ::libc::c_int;
    pub fn slamc3_(__a: *mut __CLPK_real, __b: *mut __CLPK_real)
     -> __CLPK_doublereal;
    pub fn slamc4_(__emin: *mut __CLPK_integer, __start: *mut __CLPK_real,
                   __base: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn slamc5_(__beta: *mut __CLPK_integer, __p: *mut __CLPK_integer,
                   __emin: *mut __CLPK_integer, __ieee: *mut __CLPK_logical,
                   __emax: *mut __CLPK_integer, __rmax: *mut __CLPK_real)
     -> ::libc::c_int;
    pub fn dlamch_(__cmach: *mut ::libc::c_char) -> __CLPK_doublereal;
    pub fn dlamc2_(__beta: *mut __CLPK_integer, __t: *mut __CLPK_integer,
                   __rnd: *mut __CLPK_logical, __eps: *mut __CLPK_doublereal,
                   __emin: *mut __CLPK_integer,
                   __rmin: *mut __CLPK_doublereal,
                   __emax: *mut __CLPK_integer,
                   __rmax: *mut __CLPK_doublereal) -> ::libc::c_int;
    pub fn dlamc3_(__a: *mut __CLPK_doublereal, __b: *mut __CLPK_doublereal)
     -> __CLPK_doublereal;
    pub fn dlamc4_(__emin: *mut __CLPK_integer,
                   __start: *mut __CLPK_doublereal,
                   __base: *mut __CLPK_integer) -> ::libc::c_int;
    pub fn dlamc5_(__beta: *mut __CLPK_integer, __p: *mut __CLPK_integer,
                   __emin: *mut __CLPK_integer, __ieee: *mut __CLPK_logical,
                   __emax: *mut __CLPK_integer,
                   __rmax: *mut __CLPK_doublereal) -> ::libc::c_int;
}
